// dot -T png typical.dot -o typical.png

digraph graph_name {
    graph [
        //    layout = dot
        layout = fdp
    ];
    node [
        colorscheme = "rdylgn11";
        style = "solid,filled";
        fontsize = 16;
        fontname = "Migu 1M";
        height = 0.6;
        width = 1.2;
    ];

    問題 [shape=doublecircle,fontsize=60];

    問題 -> グラフ;
    問題 -> 数え上げ;
    問題 -> 最小化;
    問題 -> 辞書順最小化;
    問題 -> クエリ;
    問題 -> 木;
    問題 -> 多次元;
    問題 -> "YES/NO";
    問題 -> XOR;
    問題 -> 構築;
    問題 -> ゲーム;
    問題 -> 文字列;
    問題 -> マンハッタン距離;
    問題 -> "約数, gcd";

    木 -> "木DP";
    木 -> "全方位DP" [label="全てのノードが全状態に依存する"];
    木 -> "重心";
    木 -> "中心";
    木 -> "直径";
    木 -> "同型";

    "約数, gcd" -> "約数全列挙";

    グラフ -> "小さい制約(5歩で、10回で）" [label="半分全列挙"];
    グラフ -> "最短経路DAG";
    グラフ -> "最短経路として使われうる辺は最短経路問題で";

    "マンハッタン距離" -> "45度回転";

    構築 -> "連立方程式の解の一例";
    "連立方程式の解の一例" -> "最短距離問題双対（牛ゲー）" [label="不等式"];
    "連立方程式の解の一例" -> "DFSで矛盾検知" [label="等式"];
    "連立方程式の解の一例" -> "重み付きUnion Find" [label="等式"];
    構築 -> "小制約の全探索ができる" -> "辞書順最小の解を出して法則を見出す";

    数え上げ -> 二分探索;
    数え上げ -> DP;
    数え上げ -> "X以上の関数を作る" [label="ちょうどX"];
    数え上げ -> "X以下の関数を作る" [label="ちょうどX"];
    数え上げ -> "包除原理";
    数え上げ -> "高速ゼータ・メビウス変換";

    多次元 -> xy独立;
    多次元 -> 一次元固定;

    クエリ -> オフラインクエリ;
    クエリ -> オンラインクエリ;
    クエリ -> 木のクエリ;
    オフラインクエリ -> "Decomposable searching problem";
    オフラインクエリ -> "Wavelet Matrix";
    オフラインクエリ -> "Mo";
    木のクエリ -> "HL分解" [label="モノイド"];
    木のクエリ -> "オイラーツアー" [label="群"];
    木のクエリ -> "LCA";
    木のクエリ ->  木の切断;
    木の切断 -> "Link-Cut Tree";
    オンラインクエリ -> 平方分割;
    オンラインクエリ -> 連結行列のセグ木;


    XOR -> 桁ごと固定;
    XOR -> "Trie木" [label="最大化？"];

    ゲーム -> "WL-Algorithm";
    ゲーム -> "Grundy Number";
    ゲーム -> "アドホック";
    ゲーム -> "後ろから確定";
    ゲーム -> "猿真似";

    "Grundy Number" -> "分裂";

    最小化 -> DP;
    最小化 -> 二分探索;
    最小化 -> 最小値全探索;
    最小化 -> "1変数固定";
    最小化 -> フロー [label="大量制約"];
    最小化 -> "Totally monotone minima";
    数え上げ -> "半分全列挙" [label="小制約"];

    辞書順最小化 -> "上から貪欲";
    辞書順最小化 -> "最近のものを26分木でまとめていく";
    辞書順最小化 -> "同じ桁なら数字比較と辞書順比較は一致";

    "YES/NO" -> 乱択;
    "YES/NO" -> "大量制約";
    "大量制約" -> "SAT";
    "SAT" -> "2-SAT" [label="制約変数が2個以下"]; 
    "SAT" -> "3-SAT" [label="制約変数が3個以上"]; 
    "2-SAT" -> "Segment Tree SAT" [label="範囲禁止がある"];

    文字列 -> マッチング;
    文字列 -> 一致判定;
    一致判定 -> "ロリハ" [label="1次元"];
    一致判定 -> "ロリハ" [label="2次元"]; 
    一致判定 -> "SA-IS" [label="1次元"]; 
}
