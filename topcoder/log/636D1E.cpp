#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class ChocolateDividingEasy {
    public:
        int findBest(vector <string> c) {
            ll ni = c.size();
            ll nj = c[0].length();
            vvll s(ni+1, vll(nj+1, 0));
            rep(i, ni) {
                rep(j, nj) {
                    s[i+1][j+1] = c[i][j] - '0';
                }
            }
            rep(i, ni+1) {
                rep(j, nj) {
                    s[i][j+1] += s[i][j];
                }
            }
            rep(j, nj+1) {
                rep(i, ni) {
                    s[i+1][j] += s[i][j];
                }
            }

            auto f = [&](ll i0, ll j0, ll i1, ll j1) {
                return s[i1][j1] - s[i1][j0] - s[i0][j1] + s[i0][j0];
            };

            ll ret = 0;
            rep(i0, ni-2) for (int i1 = i0+1; i1 < ni-1; i1++) {
                rep(j0, nj-2) for (int j1 = j0+1; j1 < nj-1; j1++) {
                    ll m = INF;
                    chmin(m, f(0, 0, i0+1, j0+1));
                    chmin(m, f(i0+1, 0, i1+1, j0+1));
                    chmin(m, f(i1+1, 0, ni, j0+1));
                    chmin(m, f(0, j0+1, i0+1, j1+1));
                    chmin(m, f(i0+1, j0+1, i1+1, j1+1));
                    chmin(m, f(i1+1, j0+1, ni, j1+1));
                    chmin(m, f(0, j1+1, i0+1, nj));
                    chmin(m, f(i0+1, j1+1, i1+1, nj));
                    chmin(m, f(i1+1, j1+1, ni, nj));
                    chmax(ret, m);
                }
            }
            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChocolateDividingEasy *obj;
	int answer;
	obj = new ChocolateDividingEasy();
	clock_t startTime = clock();
	answer = obj->findBest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"9768","6767","5313"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"36753562","91270936","06261879","20237592","28973612","93194784"};
	p1 = 15;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"012","345","678"};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Mirosz adores sweets.
// He has just bought a rectangular bar of chocolate.
// The bar is divided into a grid of square cells.
// Different cells may have a different quality.
// You are given the description of the bar in a vector <string> chocolate.
// Each character in chocolate is a digit between '0' and '9', inclusive: the quality of one of the cells.
// 
// Mirosz is now going to divide the chocolate into 9 parts: one for him and one for each of his 8 friends.
// He will do the division by making four cuts: two horizontal and two vertical ones.
// Each cut must go between two rows or columns of cells.
// Each of the 9 parts must be non-empty.
// The quality of a part is the sum of the qualities of all cells it contains.
// 
// Mirosz is well-mannered and he will let his friends choose their pieces first.
// His friends are even more addicted to chocolate than he is.
// Therefore, they will certainly choose the pieces with higher quality first, and Mirosz will be left with the worst of the nine pieces.
// 
// You are given the vector <string> chocolate.
// Find the optimal places for the four cuts.
// More precisely, compute and return the largest possible quality of Mirosz's part of the chocolate bar.
// 
// DEFINITION
// Class:ChocolateDividingEasy
// Method:findBest
// Parameters:vector <string>
// Returns:int
// Method signature:int findBest(vector <string> chocolate)
// 
// 
// CONSTRAINTS
// -chocolate will contain between 3 and 50 elements, inclusive. 
// -All elements in chocolate will contain between 3 and 50 characters, inclusive. 
// -All elements in chocolate will contain the same number of characters. 
// -All elements in chocolate will contain only digits ('0'-'9').
// 
// 
// EXAMPLES
// 
// 0)
// {
// "9768",
// "6767",
// "5313"
// }
// 
// Returns: 3
// 
// There are three valid ways to cut this chocolate.
// One of the optimal ones is shown below. 
// 
// 9 | 7 | 6 8 
// --|---|----- 
// 6 | 7 | 6 7 
// --|---|----- 
// 5 | 3 | 1 3 
// 
// This way of cutting produces parts with the following qualities:
// 9, 7, 14, 6, 7, 13, 5, 3, and 4.
// The quality of the worst part (the one that Mirosz will get) is 3. 
// 
// Here is another way of cutting the same chocolate: 
// 
// 
// 9 7 | 6 | 8 
// ----|---|--- 
// 6 7 | 6 | 7 
// ----|---|--- 
// 5 3 | 1 | 3 
// 
// 
// If Mirosz cuts the chocolate in this way, the quality of his part will be 1, which is worse than 3.
// 
// 1)
// {
// "36753562",
// "91270936",
// "06261879",
// "20237592",
// "28973612",
// "93194784"
// }
// 
// Returns: 15
// 
// There is only one optimal way to divide the chocolate:  
// 
// 
// 3 6 7 5 | 3 5 | 6 2 
// 9 1 2 7 | 0 9 | 3 6 
// --------|-----|----- 
// 0 6 2 6 | 1 8 | 7 9 
// 2 0 2 3 | 7 5 | 9 2 
// --------|-----|----- 
// 2 8 9 7 | 3 6 | 1 2 
// 9 3 1 9 | 4 7 | 8 4  
// 
// The three parts on the top have qualities 3+6+7+5+9+1+2+7 = 40, 3+5+0+9 = 17 and 6+2+3+6 = 17 
// The worst part is the one in the bottom right corner. Its quality is only 1+2+4+8 = 15.
// 
// 2)
// {
// "012",
// "345",
// "678"
// }
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
