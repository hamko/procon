#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { if (!v.empty()) { o << '['; copy(v.begin(), v.end(), ostream_iterator<T>(o, ", ")); o << "\b\b]"; } return o; }
using ll = long long; using ld = long double; using vll = vector<ll>; using vld = vector<ld>;
typedef pair<ll, ll> P;

static const double EPS = 1e-14;
static const long long INF = 1e18;
#define MAX_N 100005

class FiringEmployees {
    public:
        int fire(vector <int> manager, vector <int> salary, vector <int> productivity) {
            vector<vector<ll>> g(manager.size()+1ll);
            rep(i, manager.size()) g[manager[i]].pb(i+1ll);

            function<ll(ll)> f = [&](ll v){
                ll ret = (v != 0ll) * productivity[v-1ll] - salary[v-1ll];
                rep(i, g[v].size()) 
                    ret += max<ll>(0ll, f(g[v][i]));
                return ret;
            };
            return f(0ll);
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	FiringEmployees *obj;
	int answer;
	obj = new FiringEmployees();
	clock_t startTime = clock();
	answer = obj->fire(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,0,0};
	p1 = {1,2,3};
	p2 = {3,2,1};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,1,2,3};
	p1 = {4,3,2,1};
	p2 = {2,3,4,5};
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,1};
	p1 = {1,10};
	p2 = {5,5};
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,1,2,1,2,3,4,2,3};
	p1 = {5,3,6,8,4,2,4,6,7};
	p2 = {2,5,7,8,5,3,5,7,9};
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {0,0,1,1,2,2};
	p1 = {1,1,1,2,2,2};
	p2 = {2,2,2,1,1,1};
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// BottomCoder has a CEO and N employees.
// The CEO has number 0, the employees are numbered 1 through N.
// Each employee can be described by three numbers: their salary, their productivity, and the number of their direct manager.
// For each employee E, employee E's manager has a number smaller than E.
// Hence, the company has a tree-like hierarchy.
// 
// You are given the description of BottomCoder in the vector <int>s manager, salary, and productivity.
// For each i between 1 and N, inclusive, employee i is described by the values manager[i-1], salary[i-1], and productivity[i-1].
// 
// The profit from an employee can be computed as the employee's productivity minus their salary.
// Note that the profit from an employee can be negative.
// The total profit of the company is the sum of profits of its employees.
// 
// The CEO would like to increase the total profit of the company by firing some of its employees.
// However, if he fires an employee E, he must also fire all employees who reported to E.
// For example, if he fires your manager, he must fire you as well.
// As another example, if he fires the manager of your manager, he must fire your manager and therefore he must also fire you.
// 
// Find a valid way of firing some (possibly none, possibly all) employees that maximizes the profit of the resulting company.
// Return the total profit after the selected employees are fired.
// 
// DEFINITION
// Class:FiringEmployees
// Method:fire
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int fire(vector <int> manager, vector <int> salary, vector <int> productivity)
// 
// 
// NOTES
// -The CEO of BottomCoder has both salary and productivity equal to zero. The CEO cannot be fired.
// 
// 
// CONSTRAINTS
// -manager, salary and productivity will contain N elements each.
// -manager will contain between 1 and 2500 elements inclusive.
// -Each element of salary will be between 1 and 10,000 inclusive.
// -Each element of productivity will be between 1 and 10,000 inclusive.
// -The i-th element of manager will be between 0 and i inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0,0,0}
// {1,2,3}
// {3,2,1}
// 
// Returns: 2
// 
// The CEO has three direct employees.
// The first one has a salary of 1 and a productivity of 3.
// The second one has a salary of 2 and a productivity of 2.
// The third one has a salary of 3 and a productivity of 1.
// The CEO should fire employee 3.
// The CEO can also fire employee 2, but it does not matter: here, firing is equally good as keeping.
// 
// 1)
// {0,1,2,3}
// {4,3,2,1}
// {2,3,4,5}
// 
// Returns: 4
// 
// Employee 1 has a negative profit: 2-4 = (-2).
// The other three employees have nonnegative profits: 0, 2, and 4.
// 
// It would seem that the CEO should fire employee 1.
// However, if he does that, he would have to fire all four employees, because 1 is (either directly or indirectly) the manager of each of them.
// This would leave the CEO with an empty company that has profit 0.
// 
// The optimal strategy is not to fire anyone.
// The total profit in this case will be (-2) + 0 + 2 + 4 = 4.
// 
// 2)
// {0,1}
// {1,10}
// {5,5}
// 
// Returns: 4
// 
// In this case the best choice is to fire employee number 2 and keep employee number 1.
// 
// 3)
// {0,1,2,1,2,3,4,2,3}
// {5,3,6,8,4,2,4,6,7}
// {2,5,7,8,5,3,5,7,9}
// 
// Returns: 6
// 
// 
// 
// 4)
// {0,0,1,1,2,2}
// {1,1,1,2,2,2}
// {2,2,2,1,1,1}
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
