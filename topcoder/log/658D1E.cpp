#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
#define mp make_pair
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
#define forall(a, f) all_of((a).begin(), (a).end(), (f))
#define exists(it, a, f) (((it)=find_if((a).begin(), (a).end(), (f)))!=(a).end())

using ll = long long; using vll = vector<ll>; using vvll = vector<vll>; using P = pair<ll, ll>;
using ld = long double;  using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>; vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using Pos = complex<double>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; o << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
#define ldout fixed << setprecision(40) 

template <typename T> istream& operator>>(istream& i, vector<T>& o) { rep(j, o.size()) i >> o[j]; return i;}

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

string bits_to_string(ll input, ll n=64) { string s; rep(i, n) s += '0' + !!(input & (1ll << i)); return s; }
template <typename T> unordered_map<T, ll> counter(vector<T> vec){unordered_map<T, ll> ret; for (auto&& x : vec) ret[x]++; return ret;};
string substr(string s, P x) {return s.substr(x.fi, x.se - x.fi); }

class OddEvenTree {
    public:
        vector <int> getTree(vector <string> x) {
            ll n = x.size();
            for (auto c : "EO") if (c) rep(i, n) {
                ll faf = 1;
                rep(j, n) 
                    if (x[i][j] != c) 
                        faf = 0;
                if (faf) 
                    return {-1};
            }
            rep(i, n) {
                if (x[i][i] == 'O') {
                    return {-1};
                }
            }
            rep(i, n) rep(j, n) {
                if (x[i][j] != x[j][i]) {
                    return {-1};
                }
            }

            set<ll> memo;
            vector<int> ret;
            vvll g(n, vll(n, INF)); rep(i, n) g[i][i] = 0;
            rep(i, n) rep(j, n) if (i > j) if (x[i][j] == 'O') {
                if (memo.count(i) == 0 || memo.count(j) == 0) {
                    ret.pb(i);
                    ret.pb(j);
                    g[i][j] = 1;
                    g[j][i] = 1;
                }
                memo.insert(i);
                memo.insert(j);
            }

            rep(i, n) rep(j, n) rep(k, n) 
                chmin(g[j][k], g[j][i] + g[i][k]);
            rep(i, n) rep(j, n) {
                if (g[i][j] % 2 == 1) {
                    if (x[i][j] == 'E') 
                        return {-1};
                } else {
                    if (x[i][j] == 'O') 
                        return {-1};
                }
            }

            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    OddEvenTree *obj;
    vector <int> answer;
    obj = new OddEvenTree();
    clock_t startTime = clock();
    answer = obj->getTree(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p1[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    vector <string> p0;
    vector <int> p1;

    // ----- test 0 -----
    disabled = false;
    p0 = {"EOE","OEO","EOE"};
    p1 = {0,1,2,1};
    all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
	disabled = false;
	p0 = {"EO","OE"};
	p1 = {0,1};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"OO","OE"};
	p1 = {-1};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"EO","EE"};
	p1 = {-1};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"EOEO","OEOE","EOEO","OEOE"};
	p1 = {0,1,0,3,2,1};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In a tree, the distance between two nodes is the number of edges on the (only) simple path that connects them.
// 
// 
// You are given a vector <string> x with N elements, each containing N characters.
// Draw a tree with N nodes, numbered 0 through N-1.
// The tree must have the following properties:
// For each i and j, if x[i][j] is 'E' the distance between i and j must be even, and if it is 'O' (uppercase o) this distance must be odd.
// 
// 
// If there is no tree with these properties, return {-1}.
// Otherwise, return a vector <int> with 2N-2 elements: the list of edges in one such tree.
// For example, if N=3 and your tree contains the edges 0-2 and 1-2, return {0,2,1,2}.
// If there are multiple correct outputs you may output any of them.
// 
// DEFINITION
// Class:OddEvenTree
// Method:getTree
// Parameters:vector <string>
// Returns:vector <int>
// Method signature:vector <int> getTree(vector <string> x)
// 
// 
// NOTES
// -If you use plugins to test your solution, be careful. Plugins cannot tell you whether your solution is correct -- they'll just tell you whether it matches the example output exactly.
// 
// 
// CONSTRAINTS
// -n will be between 2 and 50, inclusive.
// -x will contain exactly n elements.
// -Each element in x will have exactly n characters.
// -Each character in x will be 'O' or 'E'.
// 
// 
// EXAMPLES
// 
// 0)
// {"EOE",
//  "OEO",
//  "EOE"}
// 
// Returns: {0, 1, 2, 1 }
// 
// The tree: 0-1-2 is a valid answer.
// 
// 1)
// {"EO",
//  "OE"}
// 
// Returns: {0, 1 }
// 
// 
// 
// 2)
// {"OO",
//  "OE"}
// 
// Returns: {-1 }
// 
// dist[0][0] must be 0, and it should be an even number, so it is impossible.
// 
// 3)
// {"EO",
//  "EE"}
// 
// Returns: {-1 }
// 
// dist[0][1] should be same with dist[1][0].
// 
// 4)
// {"EOEO",
//  "OEOE",
//  "EOEO",
//  "OEOE"}
// 
// Returns: {0, 1, 0, 3, 2, 1 }
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
