#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
void printbits(ll mask, ll n) { rep(i, n) { cout << !!(mask & (1ll << i)); } cout << endl; }
string substr(string s, P x) {return s.substr(x.fi, x.se - x.fi); }


static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class ABBADiv1 {
    public:
        string canObtain(string s, string t) {
            if (count(all(t), 'B') - count(all(s), 'B') < 0) 
                return "Impossible";
            if (count(all(t), 'A') - count(all(s), 'A') < 0) 
                return "Impossible";

            ll swapped = 0;
            if ((count(all(t), 'B') - count(all(s), 'B')) % 2) 
                swapped = 1, reverse(all(s));

            ll index = 0;
            while (1) {
                ll step = substr(t, P(index, t.size())).find(s);
                if (step == string::npos) break;
                index += step;
                 
                string x = substr(t, P(0, index)), y = substr(t, P(index+s.size(), t.size()));

                if (x.size() == 0 || x[0] == 'B') 
                    if (count(all(x), 'B') - count(all(y), 'B') - swapped == 0)
                        return "Possible";
                index++;
            }

            return "Impossible";
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
    cout << "]" << endl;
    ABBADiv1 *obj;
    string answer;
    obj = new ABBADiv1();
    clock_t startTime = clock();
    answer = obj->canObtain(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    string p0;
    string p1;
    string p2;

    // ----- test 0 -----
    disabled = false;
    p0 = "A";
    p1 = "BABA";
    p2 = "Possible";
    all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = "BAAAAABAA";
    p1 = "BAABAAAAAB";
    p2 = "Possible";
    all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = "A";
    p1 = "ABBA";
    p2 = "Impossible";
    all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 3 -----
    disabled = false;
	p0 = "AAABBAABB";
	p1 = "BAABAAABAABAABBBAAAAAABBAABBBBBBBABB";
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "AAABAAABB";
	p1 = "BAABAAABAABAABBBAAAAAABBAABBBBBBBABB";
	p2 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// One day, Jamie noticed that many English words only use the letters A and B.
// Examples of such words include "AB" (short for abdominal), "BAA" (the noise a sheep makes), "AA" (a type of lava), and "ABBA" (a Swedish pop sensation).
// 
// Inspired by this observation, Jamie created a simple game.
// You are given two strings: initial and target.
// The goal of the game is to find a sequence of valid moves that will change initial into target.
// There are two types of valid moves:
// 
// Add the letter A to the end of the string.
// Add the letter B to the end of the string and then reverse the entire string. (After the reversal the newly-added B becomes the first character of the string).
// 
// 
// Return "Possible" (quotes for clarity) if there is a sequence of valid moves that will change initial into target.
// Otherwise, return "Impossible".
// 
// DEFINITION
// Class:ABBADiv1
// Method:canObtain
// Parameters:string, string
// Returns:string
// Method signature:string canObtain(string initial, string target)
// 
// 
// CONSTRAINTS
// -The length of initial will be between 1 and 49, inclusive.
// -The length of target will be between 2 and 50, inclusive.
// -target will be longer than initial.
// -Each character in initial and each character in target will be either 'A' or 'B'.
// 
// 
// EXAMPLES
// 
// 0)
// "A"
// "BABA"
// 
// Returns: "Possible"
// 
// Jamie can perform the following moves:
// 
// Initially, the string is "A".
// Jamie adds a 'B' to the end of the string and then reverses the string. Now the string is "BA".
// Jamie adds a 'B' to the end of the string and then reverses the string. Now the string is "BAB".
// Jamie adds an 'A' to the end of the string. Now the string is "BABA".
// 
// Since there is a sequence of moves which starts with "A" and creates the string "BABA", the answer is "Possible".
// 
// 1)
// "BAAAAABAA"
// "BAABAAAAAB"
// 
// Returns: "Possible"
// 
// Jamie can add a 'B' to the end of the string and then reverse the string.
// 
// 2)
// "A"
// "ABBA"
// 
// Returns: "Impossible"
// 
// 
// 
// 3)
// "AAABBAABB"
// "BAABAAABAABAABBBAAAAAABBAABBBBBBBABB"
// 
// Returns: "Possible"
// 
// 
// 
// 4)
// "AAABAAABB"
// "BAABAAABAABAABBBAAAAAABBAABBBBBBBABB"
// 
// Returns: "Impossible"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
