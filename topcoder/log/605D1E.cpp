#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class AlienAndHamburgers {
    public:
        int getNumber(vector <int> a, vector <int> b) {
            ll n = a.size();
            vector<P> p(n); rep(i, n) p[i].se = a[i], p[i].fi = b[i];
            sort(all(p), greater<P>());
            ll s = 0, ret = 0;
            set<ll> t;
            rep(i, n) {
                if (p[i].fi < 0 && t.count(p[i].se))
                    continue;
                s += p[i].fi;
                t.insert(p[i].se);
                chmax(ret, s * (ll)t.size());
            }

            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	AlienAndHamburgers *obj;
	int answer;
	obj = new AlienAndHamburgers();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,2};
	p1 = {4,7};
	p2 = 22;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,1};
	p1 = {-1,-1};
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {1,2,3};
	p1 = {7,4,-1};
	p2 = 30;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,2,3,2,3,1,3,2,3,1,1,1};
	p1 = {1,7,-2,3,-4,-1,3,1,3,-5,-1,0};
	p2 = 54;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {30,20,10};
	p1 = {100000,-100000,100000};
	p2 = 400000;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Alien Fred wants to destroy the Earth.
// But before he does that, he wants to eat some hamburgers.
// 
// 
// 
// 
// You are given two vector <int>s: type and taste.
// They describe all hamburgers available in the shop he found.
// Each hamburger has a type (some positive integer) and a taste (some, possibly negative, integer).
// For each i, type[i] represents the type of i-th hamburger (0-based index), and taste[i] represents the taste of i-th hamburger.
// It is possible that different hamburgers have the same type but a different taste.
// 
// 
// 
// 
// Fred wants to eat some subset of those hamburgers (possibly none or all of them).
// Eating the chosen hamburgers will give him some amount of joy.
// This amount can be computed as Y * A, where Y is the number of different types of hamburgers eaten, and A is their total taste.
// 
// 
// 
// 
// Return the largest possible amount of joy he can get.
// 
// 
// DEFINITION
// Class:AlienAndHamburgers
// Method:getNumber
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int getNumber(vector <int> type, vector <int> taste)
// 
// 
// CONSTRAINTS
// -type will contain between 1 and 50 elements, inclusive.
// -type and taste will contain the same number of elements.
// -Each element of type will be between 1 and 100, inclusive.
// -Each element of taste will be between -100,000 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2}
// {4, 7}
// 
// Returns: 22
// 
// In this case, the best choice is to choose both hamburgers. The number of different types is 2, and the total taste is 11. Thus, the answer is 2*11 = 22.
// 
// 1)
// {1, 1}
// {-1, -1}
// 
// Returns: 0
// 
// Note that sometimes the best choice is not to eat any hamburgers. In such a case the amount of joy is 0.
// 
// 2)
// {1, 2, 3}
// {7, 4, -1}
// 
// Returns: 30
// 
// 
// 
// 3)
// {1, 2, 3, 2, 3, 1, 3, 2, 3, 1, 1, 1}
// {1, 7, -2, 3, -4, -1, 3, 1, 3, -5, -1, 0}
// 
// Returns: 54
// 
// 
// 
// 4)
// {30, 20, 10}
// {100000, -100000, 100000}
// 
// Returns: 400000
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
