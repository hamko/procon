#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;


// a.b.c = (a+b)*c + ab = ab + bc + ca
// a.b.c.d = (a.b.c) + (a+b+c)*d = ab + bc + ca + ad + bd + cd
//
// (a+b+c+d)^2-(a^2+b^2+c^2+d^2)

class SubdividedSlimes {
    public:
        int needCut(int s_, int m_) {
            ll s = s_, m = m_;
            rep(i, 2000) {
                if (i == 0 || i > s) 
                    continue;

                ll small = s / i;
                ll large = s / i + 1;
                ll largen = s - small * i; 
                ll smalln = i - largen;
                if ((s * s - smalln * small * small - largen * large * large)/2 >= m)
                    return i - 1;
            }
            return -1;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	SubdividedSlimes *obj;
	int answer;
	obj = new SubdividedSlimes();
	clock_t startTime = clock();
	answer = obj->needCut(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 2;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = 3;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 3;
	p1 = 4;
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 765;
	p1 = 271828;
	p2 = 14;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The idols Ami and Mami like playing games.
// Today they bought a new game.
// At the beginning of the game a single slime appears on the screen.
// You are given an int S: the size of the slime.
// 
// The game consists of K turns.
// In each turn of the game the player must choose a single slime and cut it into two smaller parts.
// More precisely, suppose that the player chose a slime of size z.
// When cutting this slime, the player must choose two positive integers x and y such that x+y = z.
// The player will then cut the slime into two smaller slimes.
// The sizes of those smaller slimes will be x and y, respectively.
// Note that the player must always choose a slime of size 2 or more, as it is not possible to cut a slime of size 1.
// 
// The player gets a reward for making each cut:
// whenever you cut a slime of size x+y into slimes of sizes x and y, the player is awarded x*y mascots.
// 
// Ami and Mami have just started a new game.
// You are given two ints S and M.
// Calculate and return the smallest possible K (the number of turns in the game) such that Ami and Mami can get at least M mascots in the game.
// If there exists no such K, return -1 instead.
// 
// 
// DEFINITION
// Class:SubdividedSlimes
// Method:needCut
// Parameters:int, int
// Returns:int
// Method signature:int needCut(int S, int M)
// 
// 
// CONSTRAINTS
// -S will be between 2 and 1000, inclusive.
// -M will be between 1 and 10^9, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 2
// 
// Returns: 1
// 
// There is a single slime of size 3, and the players have to get at least two mascots.
// In this case, K = 1 is sufficient.
// In the only step, cut the only slime into two slimes with sizes 1 and 2.
// (This gives them 1*2 = 2 mascots.)
// 
// 1)
// 3
// 3
// 
// Returns: 2
// 
// There is a single slime of size 3, and the players have to get at least three mascots.
// They can get three mascots in two steps:
// In the first step, cut the only slime into two slimes with sizes 1 and 2.
// (This gives them 1*2 = 2 mascots.)
// In the second step, choose the slime of size 2 and cut it into two slimes of size 1 each.
// (This gives them 1*1 = 1 mascot.)
// The total number of mascots they obtained is 2 + 1 = 3.
// 
// 2)
// 3
// 4
// 
// Returns: -1
// 
// There is a single slime of size 3.
// The players cannot get 4 mascots in any way.
// 
// 3)
// 765
// 271828
// 
// Returns: 14
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
