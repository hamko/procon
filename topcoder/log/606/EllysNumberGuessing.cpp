#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class EllysNumberGuessing {
    public:
        int getNumber(vector <int> g, vector <int> a) {
            ll n = a.size();
            set<ll> c;
            if (1 <= g[0] + a[0] && g[0] + a[0] <= 1e9) c.insert(g[0] + a[0]);
            if (1 <= g[0] - a[0] && g[0] - a[0] <= 1e9) c.insert(g[0] - a[0]);
            for (int i = 1; i < n; i++) {
                for (auto it = c.begin(); it != c.end(); it++) {
                    if (*it != g[i] + a[i] && *it != g[i] - a[i])
                        c.erase(it);
                }
            }
            if (c.size() == 2) {
                return -1;
            } else if (c.size() == 0) {
                return -2;
            } else {
                for (auto x : c) 
                    return x;
            }
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysNumberGuessing *obj;
	int answer;
	obj = new EllysNumberGuessing();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {600,594};
	p1 = {6,12};
	p2 = 606;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {100,50,34,40};
	p1 = {58,8,8,2};
	p2 = 42;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {500000,600000,700000};
	p1 = {120013,220013,79987};
	p2 = -2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {500000000};
	p1 = {133742666};
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {76938260,523164588,14196746,296286419,535893832,41243148,364561227,270003278,472017422,367932361,395758413,301278456,186276934,316343129,336557549,52536121,98343562,356769915,89249181,335191879};
	p1 = {466274085,20047757,529015599,246925926,7318513,501969197,178651118,273209067,71194923,175279984,147453932,241933889,356935411,226869216,206654796,490676224,444868783,186442430,453963164,208020466};
	p2 = 543212345;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {42};
	p1 = {42};
	p2 = 84;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {999900000};
	p1 = {100001};
	p2 = 999799999;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly and Kris play the following game. In the beginning Kristina thinks of a number between 1 and 1,000,000,000, inclusive. After that Elly starts trying to guess it. In each round she says a number and Kristina says what is the absolute difference between the number she has thought of, and the number Elly guessed. Now Elly wonders if the guesses she has already made are sufficient to uniquely determine Kristina's number.
// 
// You are given a vector <int> guesses and a vector <int> answers of the same length. For each valid i, in round i of the game (0-based index) Elly guessed the number guesses[i] and Kristina answered answers[i]. If Kristina's number can be uniquely determined, return that number. If there are multiple possibilities that are consistent with the current set of guesses and answers, return -1. If it can be shown that at some point Kristina has lied (some of her answers were inconsistent), return -2.
// 
// DEFINITION
// Class:EllysNumberGuessing
// Method:getNumber
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int getNumber(vector <int> guesses, vector <int> answers)
// 
// 
// CONSTRAINTS
// -guesses and answers will each contain between 1 and 50 elements, inclusive.
// -guesses and answers will contain the same number of elements.
// -Each element of guesses will be between 1 and 1,000,000,000, inclusive.
// -Each element of answers will be between 1 and 999,999,999, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {600, 594}
// {6, 12}
// 
// Returns: 606
// 
// Apparently Kristina has thought of the number of this SRM.
// 
// 1)
// {100, 50, 34, 40}
// {58, 8, 8, 2}
// 
// Returns: 42
// 
// It is not guaranteed that Elly has used a perfect strategy so far.
// 
// 2)
// {500000, 600000, 700000}
// {120013, 220013, 79987}
// 
// Returns: -2
// 
// The answers here are inconsistent. After the second guess we can conclude that the answer is below 500000. But the third one indicates that it is above 500000. Thus, Kristina is a liar and you should return -2.
// 
// 3)
// {500000000}
// {133742666}
// 
// Returns: -1
// 
// There are multiple possibilities here, thus you should return -1.
// 
// 4)
// {76938260, 523164588, 14196746, 296286419, 535893832,
//  41243148, 364561227, 270003278, 472017422, 367932361,
//  395758413, 301278456, 186276934, 316343129, 336557549,
//  52536121, 98343562, 356769915, 89249181, 335191879}
// {466274085, 20047757, 529015599, 246925926, 7318513,
//  501969197, 178651118, 273209067, 71194923, 175279984,
//  147453932, 241933889, 356935411, 226869216, 206654796,
//  490676224, 444868783, 186442430, 453963164, 208020466}
// 
// Returns: 543212345
// 
// 
// 
// 5)
// {42}
// {42}
// 
// Returns: 84
// 
// Don't forget that the number Kris has thought of must be between 1 and 1,000,000,000.
// 
// 6)
// {999900000}
// {100001}
// 
// Returns: 999799999
// 
// Don't forget that the number Kris has thought of must be between 1 and 1,000,000,000.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
