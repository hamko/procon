#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
void printbits(ll mask, ll n) { rep(i, n) { cout << !!(mask & (1ll << i)); } cout << endl; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class Bracket107 {
    public:
        bool is_correct(string& s) {
            ll tmp = 0;
            rep(i, s.length()) {
                tmp += s[i] == '(' ? 1 : -1;
                if (tmp < 0) 
                    return false;
            }
            return true;
        }
        int lcs(const string& a, const string& b) {
            const int n = a.size(), m = b.size();
            vector< vector<int> > X(n+1, vector<int>(m+1));
            vector< vector<int> > Y(n+1, vector<int>(m+1));
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < m; ++j) {
                    if (a[i] == b[j]) {
                        X[i+1][j+1] = X[i][j] + 1;
                        Y[i+1][j+1] = 0;
                    } else if (X[i+1][j] < X[i][j+1]) {
                        X[i+1][j+1] = X[i][j+1];
                        Y[i+1][j+1] = +1;
                    } else {
                        X[i+1][j+1] = X[i+1][j];
                        Y[i+1][j+1] = -1;
                    }
                }
            }
            vector<int> c;
            for (int i = n, j = m; i > 0 && j > 0; ) {
                if      (Y[i][j] > 0) --i;
                else if (Y[i][j] < 0) --j;
                else { c.push_back(a[i-1]); --i; --j; }
            }
            reverse(c.begin(), c.end());
            return c.size();
        }

        int yetanother(string s) {
            string s_org = s;
            ll ret = 0;
            set<string> memo;
            rep(i, s.length()) {
                string tmp = s.substr(0, i) + s.substr(i+1);
                rep(j, s.length()) {
                    memo.insert(tmp.substr(0, j) + s[i] + tmp.substr(j));
                }
            }
            if (memo.count(s))
                memo.erase(s);
            cout << memo << endl;
            for (auto x : memo) {
                ret += is_correct(x);
            }
            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    Bracket107 *obj;
    int answer;
    obj = new Bracket107();
    clock_t startTime = clock();
    answer = obj->yetanother(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    string p0;
    int p1;

    // ----- test 0 -----
    disabled = false;
    p0 = "(())";
    p1 = 1;
    all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = "(())()";
    p1 = 3;
    all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = "()()()";
    p1 = 3;
    all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 3 -----
    disabled = false;
    p0 = "(((())))";
    p1 = 5;
    all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 4 -----
    disabled = false;
    p0 = "((())())";
    p1 = 9;
    all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    if (all_right) {
        if (tests_disabled) {
            cout << "You're a stud (but some test cases were disabled)!" << endl;
        } else {
            cout << "You're a stud (at least on given cases)!" << endl;
        }
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// Correct bracket sequences are strings in which each character is a '(' or a ')', the total number of opening brackets is the same as the total number of closing brackets, and each prefix contains at least as many opening as closing brackets.
// For example, the shortest few correct bracket sequences are "", "()", "(())", and "()()".
// 
// The subsequence of a string S is any string that can be obtained by erasing zero or more characters of S.
// For example, each of the strings "", "ace", and "abcde" is a subsequence of "abcde".
// 
// We will use LCS(S,T) to denote the length of a longest common subsequence of strings S and T.
// In other words, LCS(S,T) is the largest k such that there is a string U of length k that is both a subsequence of S and a subsequence of T.
// For example, LCS("abcde","bad") = 2.
// 
// You are given a string s that contains a correct bracket sequence.
// You are looking for a string t with the following properties:
// 
// t will have the same length as s,
// t will be a correct bracket sequence,
// t will not be equal to s,
// LCS(s,t) will be as large as possible.
// 
// Compute and return the number of strings with these properties.
// 
// DEFINITION
// Class:Bracket107
// Method:yetanother
// Parameters:string
// Returns:int
// Method signature:int yetanother(string s)
// 
// 
// NOTES
// -You may assume that the answer for each valid test case fits into a signed 32-bit integer variable.
// 
// 
// CONSTRAINTS
// -s will contain between 4 and 50 characters, inclusive.
// -Each character in s will be either '(' or ')'.
// -s will be a correct bracket sequence.
// 
// 
// EXAMPLES
// 
// 0)
// "(())"
// 
// Returns: 1
// 
// There is only one other correct bracket sequence of the same length.
// 
// 1)
// "(())()"
// 
// Returns: 3
// 
// There are four other correct bracket sequences of the same length: "((()))", "()(())", "()()()", and "(()())".
// However, only in three of those four cases the length of the longest common subsequence is 5.
// LCS( "(())()", "()(())" ) is only 4, therefore "()(())" is not a valid choice of the string t.
// 
// 2)
// "()()()"
// 
// Returns: 3
// 
// 
// 
// 3)
// "(((())))"
// 
// Returns: 5
// 
// 
// 
// 4)
// "((())())"
// 
// Returns: 9
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
