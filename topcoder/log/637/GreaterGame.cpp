#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class GreaterGame {
    public:
        double calc(vector <int> a, vector <int> b) {
            double ret = 0;
            ll n = a.size();
            sort(all(a));
            sort(all(b));

            set<ll> s; 
            rep(i, 2*n) s.insert(i+1);
            rep(i, a.size()) 
                s.erase(a[i]);

            while (a.size() && *(b.end()-1) != -1) {
                auto itb = upper_bound(all(b), -1);
                auto ita = lower_bound(all(a), *itb);
                s.erase(*itb);
                b.erase(itb);
                if (ita != a.end()) {
                    ret += 1;
                    a.erase(ita);
                } else {
                    a.erase(a.begin());
                }
            }

            for (auto x : s) {
                ret += 1.0 * (int)(a.end() - lower_bound(all(a), x)) / s.size();
            }
            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    GreaterGame *obj;
    double answer;
    obj = new GreaterGame();
    clock_t startTime = clock();
    answer = obj->calc(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	double p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {4,2};
	p1 = {-1,-1};
	p2 = 1.5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {4,2};
	p1 = {1,3};
	p2 = 2.0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {2};
	p1 = {-1};
	p2 = 1.0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,3,5,7};
	p1 = {8,-1,4,-1};
	p2 = 2.5;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {6,12,17,14,20,8,16,7,2,15};
	p1 = {-1,-1,4,-1,11,3,13,-1,-1,18};
	p2 = 8.0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	disabled = false;
	p0 = {15, 8, 7, 9, 30, 13, 17, 2, 21, 29, 20, 22, 14, 18, 23};
	p1 = {26, -1, -1, -1, 16, 24, -1, 6, -1, 27, -1, 1, 19, -1, 28};
	p2 = 12.0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cat Snuke and wolf Sothe are playing the Greater Game.
// The game is played with cards.
// Each card has a number written on it.
// There are 2N cards.
// The numbers on the cards are the integers between 1 and 2N, inclusive.
// 
// At the beginning of the game, each player gets N of the cards and chooses the order in which he wants to play them.
// The game then consists of N turns.
// In each turn, both players play one of their cards simultaneously.
// The player who revealed the card with the larger number gets a point.
// 
// You are given a vector <int> hand.
// The elements of hand are the numbers on Snuke's cards.
// He can play those cards in any order he chooses.
// 
// Obviously, Snuke can determine the numbers on Sothe's cards, but he does not necessarily know the order in which Sothe is going to play his cards.
// You are given the information Snuke has about Sothe in a vector <int> sothe.
// For each i, element i of sothe is either the number on the card Sothe will play in turn i (0-based index), or -1 if Snuke does not know the card Sothe will play in that turn.
// 
// Snuke wants to play according to a strategy that maximizes the expected number of points he'll get.
// Find that strategy and return the corresponding expected number of Snuke's points at the end of the game.
// 
// As shown in Example 0, the optimal strategy for Snuke may involve some random decisions.
// However, note that before the game starts Snuke must choose the order in which he is going to play all his cards.
// He is not allowed to change their order after he sees some of the cards played by Sothe.
// 
// DEFINITION
// Class:GreaterGame
// Method:calc
// Parameters:vector <int>, vector <int>
// Returns:double
// Method signature:double calc(vector <int> hand, vector <int> sothe)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -hand and sothe will contain exactly N elements each.
// -Each element of hand will be an integer between 1 and 2N, inclusive.
// -Each element of sothe will be either -1, or an integer between 1 and 2N, inclusive.
// -The positive integers in hand and sothe will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// {4,2}
// {-1,-1}
// 
// Returns: 1.5
// 
// Sothe will play the cards 1 and 3 in some unknown order.
// The best strategy for Snuke is to flip a coin and to play his cards either in the order {2,4} or in the order {4,2} with equal probability.
// This leads to two equally likely results of the game:
// 
// Snuke plays his 2 against Sothe's 1, and his 4 against Sothe's 3. In this case, Snuke wins both turns and thus scores 2 points.
// Snuke plays his 2 against Sothe's 3, and his 4 against Sothe's 1. In this case, Snuke scores 1 point.
// 
// Therefore, the expected number of Snuke's points is 1.5.
// 
// 1)
// {4,2}
// {1,3}
// 
// Returns: 2.0
// 
// If Snuke plays card 2 first and card 4 next, he is guaranteed to score 2 points.
// 
// 2)
// {2}
// {-1}
// 
// Returns: 1.0
// 
// Sothe's only card has to be 1, and thus Snuke is guaranteed to win the only turn of this game.
// 
// 3)
// {1,3,5,7}
// {8,-1,4,-1}
// 
// Returns: 2.5
// 
// 
// 
// 4)
// {6,12,17,14,20,8,16,7,2,15}
// {-1,-1,4,-1,11,3,13,-1,-1,18}
// 
// Returns: 8.0
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
