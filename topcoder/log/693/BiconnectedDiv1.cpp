#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
void printbits(ll mask, ll n) { rep(i, n) { cout << !!(mask & (1ll << i)); } cout << endl; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class BiconnectedDiv1 {
    public:
        int minimize(vector <int> w1, vector <int> w2) {
            vll dp(105);
            for(int i = 1;i < w1.size() - 1; i++) {
                chmax(dp[i+1],dp[i]+w1[i]);
                chmax(dp[i+2],dp[i]+w2[i]);
            }
            return accumulate(w1.begin(),w1.end(),0)+accumulate(w2.begin(),w2.end(),0)-dp[w1.size()-1];
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    BiconnectedDiv1 *obj;
    int answer;
    obj = new BiconnectedDiv1();
    clock_t startTime = clock();
    answer = obj->minimize(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    vector <int> p0;
    vector <int> p1;
    int p2;

    // ----- test 0 -----
    disabled = false;
    p0 = {1,2};
    p1 = {3};
    p2 = 6;
    all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = {3,0,4};
    p1 = {1,2};
    p2 = 10;
    all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = {3,3,3,3};
    p1 = {3,6,3};
    p2 = 18;
    all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {7243,7525,8467,6351,9453,8456,8175,5874,6869,7400,6438,8926,6876};
	p1 = {2642,1743,3546,4100,2788,3019,2678,1935,1790,2674,3775,1920};
	p2 = 46729;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A 2-edge-connected graph is a connected undirected graph with the following property:
// for any two distinct vertices u,v and for any edge e there exists a path from u to v that does not contain e.
// 
// You are given a graph G with n vertices numbered 0 through n-1, where n is not less than 3.
// The graph has a very specific structure.
// For each i between 0 and n-2, inclusive, vertices i and i+1 are connected by an edge with weight w1[i].
// Additionally, for each i between 0 and n-3, inclusive, vertices i and i+2 are connected by an edge with weight w2[i].
// It is easy to verify that this graph is 2-edge-connected.
// 
// Note that some of the edge weights may be zeros.
// An edge with weight zero is still present in the graph, just like any other edge.
// 
// You may erase some edges of the graph G.
// If you do, you must do it in such a way that the graph remains 2-edge-connected.
// Your goal is to minimize the sum of weights of edges that remain in G.
// 
// You are given the vector <int>s w1 and w2 that describe the graph G.
// Compute and return the smallest possible sum of weights of a graph that can be produced in the way described above.
// 
// DEFINITION
// Class:BiconnectedDiv1
// Method:minimize
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int minimize(vector <int> w1, vector <int> w2)
// 
// 
// CONSTRAINTS
// -n will be between 3 and 100, inclusive.
// -w1 will contain exactly n-1 elements.
// -w2 will contain exactly n-2 elements.
// -Each element of w1 and w2 will be between 0 and 10,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2}
// {3}
// 
// Returns: 6
// 
// There are three vertices and three edges (0,1), (1,2), (2,0). If you erase edge (0,1), then any path from 0 to 1 has to go through edge (0,2). And if you erase two or more edges, the graph will become disconnected. So you cannot erase anything.
// 
// 1)
// {3,0,4}
// {1,2}
// 
// Returns: 10
// 
// An optimal solution is to keep all the edges.
// 
// 2)
// {3,3,3,3}
// {3,6,3}
// 
// Returns: 18
// 
// An optimal solution is to erase edge (1,3).
// 
// 3)
// {7243,7525,8467,6351,9453,8456,8175,5874,6869,7400,6438,8926,6876}
// {2642,1743,3546,4100,2788,3019,2678,1935,1790,2674,3775,1920}
// 
// Returns: 46729
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
