#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define fi first
#define se second
#define mt make_tuple
#define mp make_pair
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
#define forall(a, f) all_of((a).begin(), (a).end(), (f))
#define exists(it, a, f) (((it)=find_if((a).begin(), (a).end(), (f)))!=(a).end())

using ll = long long; using vll = vector<ll>; using vvll = vector<vll>; using P = pair<ll, ll>;
using ld = long double;  using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>; vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using Pos = complex<double>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; o << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
#define ldout fixed << setprecision(40) 

template <typename T> istream& operator>>(istream& i, vector<T>& o) { rep(j, o.size()) i >> o[j]; return i;}

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

string bits_to_string(ll input, ll n=64) { string s; rep(i, n) s += '0' + !!(input & (1ll << i)); return s; }
template <typename T> unordered_map<T, ll> counter(vector<T> vec){unordered_map<T, ll> ret; for (auto&& x : vec) ret[x]++; return ret;};
string substr(string s, P x) {return s.substr(x.fi, x.se - x.fi); }

class UniformBoard {
    public:
        int getBoard(vector <string> b, int k) {
            ll xn = b.size(), yn = b[0].size();

            vll in(255), out(255), all(255);
            rep(x, xn) rep(y, yn) 
                all[b[x][y]]++;

            ll area = 0;
            for (ll x1 = 0; x1 < xn; x1++ ) for (ll x2 = x1; x2 < xn; x2++)
                for (ll y1 = 0; y1 < yn; y1++ ) for (ll y2 = y1; y2 < yn; y2++) {
                    if (all['A'] < (x2-x1+1)*(y2-y1+1)) continue;
                    for (auto c : "AP.") if (c) in[c] = 0, out[c] = all[c];
                    for (ll x = x1; x <= x2; x++) 
                        for (ll y = y1; y <= y2; y++) 
                            in[b[x][y]]++, out[b[x][y]]--;
                    if (all['.'] == 0 && in['A'] != (x2-x1+1)*(y2-y1+1)) continue;
                    if (all['.'] > 0  && 2 * in['P'] + in['.'] > k) continue;
                    chmax(area, (x2 - x1 + 1) * (y2 - y1 + 1));
                }
            return area;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    UniformBoard *obj;
    int answer;
    obj = new UniformBoard();
    clock_t startTime = clock();
    answer = obj->getBoard(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    vector <string> p0;
    int p1;
    int p2;

    // ----- test 0 -----
    disabled = false;
    p0 = {"AP",".A"};
    p1 = 0;
    p2 = 1;
    all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = {"AP",".A"};
    p1 = 1;
    p2 = 2;
    all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = {"PPP","APA","A.P"};
    p1 = 2;
    p2 = 3;
    all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 3 -----
    disabled = false;
	p0 = {"AAA","PPP","AAA"};
	p1 = 10;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"."};
	p1 = 1000;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
    //
		// ----- test 4 -----
	disabled = false;
	p0 = {"PAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP", "PAPAPAPAPAPAPAPAPAPA", "APAPAPAPAPAPAPAPAPAP"};

	p1 = 1000;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"PPAAPA..AP","PPA.APAP..","..P.AA.PPP","P.P..APAA.","P.P..P.APA","PPA..AP.AA","APP..AAPAA","P.P.AP...P",".P.A.PAPPA","..PAPAP..P"};
	p1 = 10;
	p2 = 15;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A square board is divided into N rows by N columns of unit square cells.
// Some cells of the board are empty.
// Each of the other cells contains either an apple or a pear.
// You are given the current state of the board as a vector <string> board.
// In board, the character '.' denotes an empty cell, 'A' denotes an apple, and 'P' denotes a pear.
// 
// You are allowed to perform at most K moves.
// In each move, you can pick up one fruit (an apple or a pear) and place it onto any empty cell.
// (The new cell doesn't have to be adjacent to the old one.)
// Note that you cannot remove fruit from the board, you are only allowed to move it onto different cells.
// 
// A rectangular section of the board is called uniform if each cell in the rectangle contains an apple. After you are done moving the fruit, you want to have a uniform rectangle that is as large as possible somewhere on the board.
// Return the largest possible area of such a rectangle. If there are no apples, return 0.
// 
// DEFINITION
// Class:UniformBoard
// Method:getBoard
// Parameters:vector <string>, int
// Returns:int
// Method signature:int getBoard(vector <string> board, int K)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 20, inclusive.
// -board will contain exactly N elements.
// -Each element of board will contain exactly N characters.
// -Each character in board will be '.', 'A', or 'P'.
// -K will be between 0 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"AP",
//  ".A"}
// 0
// 
// Returns: 1
// 
// You cannot move anything.
// The largest uniform rectangle on the board is a 1x1 rectangle that consists of a single cell with an apple.
// 
// 1)
// {"AP",
//  ".A"}
// 1
// 
// Returns: 2
// 
// You are allowed to make one move.
// You can move one of the apples onto the currently empty cell, thus creating a 1x2 rectangle of apples.
// 
// 2)
// {"PPP",
//  "APA",
//  "A.P"}
// 2
// 
// Returns: 3
// 
// In two moves you can create a 1x3 rectangle of apples.
// 
// 3)
// {"AAA",
//  "PPP",
//  "AAA"}
// 10
// 
// Returns: 3
// 
// You are allowed to make at most 10 moves.
// However, you cannot make any moves because there are no empty cells.
// 
// 4)
// {"."}
// 1000
// 
// Returns: 0
// 
// 
// 
// 5)
// {"PPAAPA..AP",
//  "PPA.APAP..",
//  "..P.AA.PPP",
//  "P.P..APAA.",
//  "P.P..P.APA",
//  "PPA..AP.AA",
//  "APP..AAPAA",
//  "P.P.AP...P",
//  ".P.A.PAPPA",
//  "..PAPAP..P"}
// 10
// 
// Returns: 15
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
