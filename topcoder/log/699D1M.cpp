#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
#define mp make_pair
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
#define exists find_if
#define forall all_of

using ll = long long; using vll = vector<ll>; using vvll = vector<vll>; using P = pair<ll, ll>;
using ld = long double;  using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>; vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using Pos = complex<double>;

namespace std{ namespace { template <class T> inline void hash_combine(size_t& seed, T const& v) { seed ^= hash<T>()(v) + 0x9e3779b9 + (seed<<6) + (seed>>2); } template <class Tuple, size_t Index = tuple_size<Tuple>::value - 1> struct HashValueImpl { static void apply(size_t& seed, Tuple const& tuple) { HashValueImpl<Tuple, Index-1>::apply(seed, tuple); hash_combine(seed, get<Index>(tuple)); } }; template <class Tuple> struct HashValueImpl<Tuple,0> { static void apply(size_t& seed, Tuple const& tuple) { hash_combine(seed, get<0>(tuple)); } }; } template <typename ... TT> struct hash<tuple<TT...>> { size_t operator()(tuple<TT...> const& tt) const { size_t seed = 0; HashValueImpl<tuple<TT...> >::apply(seed, tt); return seed; } }; } 
namespace std { template<typename U, typename V> struct hash<pair<U, V>> { size_t operator()(pair<U, V> const& v) const { return v.first ^ v.second; } }; } struct pairhash { public: template <typename T, typename U> size_t operator()(const pair<T, U> &x) const { return hash<T>()(x.first) ^ hash<U>()(x.second); } };

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; o << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const unordered_set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
vector<int> range(const int x, const int y) { vector<int> v(y - x + 1); iota(v.begin(), v.end(), x); return v; }
template <typename T> istream& operator>>(istream& i, vector<T>& o) { rep(j, o.size()) i >> o[j]; return i;}
string bits_to_string(ll input, ll n=64) { string s; rep(i, n) s += '0' + !!(input & (1ll << i)); return s; }
template <typename T> unordered_map<T, ll> counter(vector<T> vec){unordered_map<T, ll> ret; for (auto&& x : vec) ret[x]++; return ret;};
string substr(string s, P x) {return s.substr(x.fi, x.se - x.fi); }
struct ci : public iterator<forward_iterator_tag, ll> { ll n; ci(const ll n) : n(n) { } bool operator==(const ci& x) { return n == x.n; } bool operator!=(const ci& x) { return !(*this == x); } ci &operator++() { n++; return *this; } ll operator*() const { return n; } };

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;
#define ldout fixed << setprecision(40) 


#define lcm(a, b) ((a)/__gcd((a),(b))*(b))
class FromToDivisible {
    public:
        int shortest(int n, int s, int t, vector <int> a, vector <int> b) {
            if (s == t) return 0;
            unordered_set<int> reachable;
            rep(i, a.size()) 
                if (s % a[i] == 0) 
                    reachable.insert(i);

            vector<vector<bool>> lcm_ok(a.size(), vector<bool>(a.size(), 0));
            rep(i, a.size()) rep(j, b.size()) 
                lcm_ok[i][j] = lcm((long long)b[i], (long long)a[j]) <= (long long)n;

            rep(cyc, 1e9) {
                if (!reachable.size()) break;
                for (auto x : reachable) 
                    if (t % b[x] == 0) 
                        return cyc + 1;

                unordered_set<int> new_reachable;
                for (auto x : reachable) 
                    rep(i, a.size()) 
                        if (lcm_ok[x][i])
                            new_reachable.insert(i);

                if (reachable == new_reachable) break;
                swap(reachable, new_reachable);
            }
            return -1;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, vector <int> p3, vector <int> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	FromToDivisible *obj;
	int answer;
	obj = new FromToDivisible();
	clock_t startTime = clock();
	answer = obj->shortest(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	vector <int> p3;
	vector <int> p4;
	int p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 11;
	p1 = 9;
	p2 = 6;
	p3 = {3,10};
	p4 = {5,2};
	p5 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 123456789;
	p1 = 18;
	p2 = 12;
	p3 = {1,42,50};
	p4 = {1,17,3};
	p5 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 60;
	p1 = 30;
	p2 = 8;
	p3 = {16,15,12};
	p4 = {2,20,5};
	p5 = -1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 77;
	p1 = 10;
	p2 = 62;
	p3 = {2,5,7,4,17,26};
	p4 = {25,7,11,13,31,34};
	p5 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 100;
	p1 = 90;
	p2 = 40;
	p3 = {20,30,100,99,100};
	p4 = {10,30,100,100,99};
	p5 = 2;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 1000000000;
	p1 = 7000;
	p2 = 424212345;
	p3 = {35000000,120000000,424212345,200000000,3500,19};
	p4 = {15,1,7000,200000000,400000000,17};
	p5 = 3;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = 2;
	p3 = {2};
	p4 = {1};
	p5 = -1;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
    // ----- test 7 -----
	disabled = false;
	p0 = 1000000000;
	p1 = 932271153;
	p2 = 645801325;
	p3 = {6454267, 393576855, 13520589, 2969285, 638624837, 46870247, 911655828, 29297256, 713996141, 899740485, 54680877, 71115825, 49849533, 34377777, 64258099, 373702660, 840290585, 823548332, 87869536, 15325801, 494979778, 547351325, 978551624, 601855379, 51755892, 20595656, 32461099, 846898463, 923745917, 20466888, 748938658, 575359604, 430776590, 512548838, 906597397, 726527258, 29699571, 891179009, 56246692, 372197789, 4723536, 91683295, 891179009, 2705796, 15597886, 78802114, 524386358, 681311643, 978551624, 67527471, 32202063, 567087540, 877314266, 468439514, 954847373, 18204940, 44532597, 525500184, 18270929, 11048222, 670054414, 671811797, 603142497, 923745917, 71815316, 31157138, 731026521, 579048770, 24297920, 30693728, 582014845, 58168655, 541226054, 444869066, 390795220, 633209480, 441256042, 678229596, 24622629, 32739420, 6860123, 579061452, 822618137, 360732975, 582014845, 430776590, 481210169, 80745549, 552018824, 432072613, 541226054, 512548838, 33070912, 11284525, 578282154, 716909917, 4632376, 645795492, 998484866, 932407733, 641117131, 828739580, 524386358, 560148947, 481210169, 745094838, 358214755, 512548838, 373421069, 627136880, 48559147, 487763930, 61243700, 677814219, 67295398, 556423312, 8605895, 26950724, 884643574, 32679852, 44385500, 29425470, 762998275, 838065, 368550303, 401079684, 75401472, 459576817, 390098714, 400251526, 70732881, 567087540, 726527258, 614137885, 37066631, 49778785, 622782354, 55610173, 910983403, 79844634, 494979778, 525500184, 76614443, 53519331, 998484866, 899882491, 444869066, 608107931, 896029322, 59109512, 960904873, 34126373, 491841301, 528667129, 60112623, 7259509, 801686816, 55113318, 370400447, 845973764, 748462087, 687772425, 54432495, 63175178, 17655759, 462908729, 854529589, 348671653, 547319303, 35235489, 392173479, 79739635, 36142486, 48936624, 45885614, 713996141, 621307676, 600383106, 51475276, 559408599, 896029322, 553792388, 553792388, 559979412, 557328704, 670054414, 978551624, 514107234, 846898463, 801686816, 373577216, 535024052, 622782354, 745094838, 1176757, 617030443, 373421069, 16327310, 8868477, 42791119, 603142497, 52668421, 896029322, 40592527, 547319303, 541226054, 840290585, 553792388, 726527258, 17812371, 2022012, 549422177, 732971251, 420471645, 53971639, 378267732, 3561851, 35565966, 44010880, 696716203, 860591458, 641117131, 390098714, 547319303, 22479055, 665268, 373702660, 41913179, 948296383, 72147118, 36199785, 55647087, 975304907, 541226054, 481210169, 40482504, 638306580, 75386765, 31593001, 373421069, 849426553, 782685574, 524386358, 638306580, 392173479, 614137885, 560745550, 549422177, 568761861, 390098714, 1336325, 70493269, 49544975, 360732975, 693178237, 25321479, 67645024, 25761380, 390795220, 744522477, 42755161, 28513206, 33068359, 713996141, 1965886, 515302678, 910983403, 28302158, 627136880, 463808292, 975304907, 784837658, 641225546, 32671678, 789346479, 43029911, 525500184, 911655828, 565908692, 862791964, 514107234, 896029322, 930240473, 608107931, 524386358, 846117143, 37994688, 50785656, 28628445, 499571556, 968427029, 971392544, 26019018, 560328779, 39739815, 47509478, 690371534, 532290792, 37923698, 38115918, 701875094, 12666904, 428636867, 91608923, 614137885, 14873279, 49723955, 377800723, 13708378, 393576855, 701875094, 641117131, 712687862, 8275161, 370400447, 830838508, 754193298, 481210169, 557328704, 517728034, 71142103, 79510931, 99461195, 579048770, 546727561, 402760837, 82661985, 39968153, 33129035, 89838614, 432072613, 5491398, 78972905, 482935198, 494979778, 24770622, 553677831, 536312475, 16723025, 906597397, 49622618, 975304907, 421662654, 67125270, 935658597, 718221810, 42829185, 64702457, 884643574, 804857276, 22127020, 582014845, 789346479, 671811797, 6864592, 985009809, 41361475, 546727561, 370400447, 560148947, 69994785, 468439514, 878935075, 4705663, 7917367, 83383302, 933680533, 28454403, 21618065, 22927173, 53330818, 603142497, 575359604, 15290503, 515302678, 993718532, 62898079, 575359604, 71883367, 977430913, 949860920, 549422177, 896029322, 49046718, 677814219, 441256042, 681311643, 14764868, 43353298, 599414071, 600383106, 617030443, 687772425, 804857276, 375624468, 528303963, 66512761, 358214755, 744522477, 28239328, 42301303, 801686816, 780665021, 538031571, 949860920, 17384750, 690371534, 854529589, 351826973, 421662654, 524386358, 822618137, 678229596, 641117131, 576565530, 481210169, 50774078, 28418893, 784837658, 557328704, 373577216, 4161538, 845973764, 899882491, 930747579, 5022253, 19917239, 62414372, 748462087, 27068097, 701875094, 20776522, 2815349, 17106657, 55042388, 20671349, 30691046, 375624468, 30597586, 772412959, 557328704, 967439909, 712687862, 737722795, 911655828, 866273694, 949860920, 561641552, 556423312, 671811797, 55545479, 430776590, 846898463, 568761861, 603142497, 33688044, 74869934, 899740485, 420471645, 546727561, 64318462, 459576817, 780665021, 906597397, 528667129, 748938658, 780665021, 400317333, 556423312, 870797546, 85311625, 402760837, 84751923, 360732975, 65788304, 400317333, 377800723, 7271537, 750533597, 723144616, 804326019, 40733556, 621307676, 65604505, 896029322, 600383106, 762643584, 41020483, 36555506, 638624837, 809591144, 395878568, 726527258, 726527258, 65086126, 400317333, 19145936, 444869066, 536164562, 887810168, 762643584, 7029015, 977430913, 868448879, 375624468, 5053133, 383758861, 62150884, 59776839, 53744375, 428636867, 748938658, 621307676, 884643574, 662381604, 808011, 54487872, 978551624, 561641552, 732971251, 6100179, 822618137, 63629827, 341759805, 459576817, 421662654, 845143, 977430913, 153771, 546727561, 48360920, 561641552, 823548332, 663505199, 932407733, 681311643, 601855379, 731026521, 75211372, 968427029, 58325695, 822618137, 52207035, 535024052, 373577216, 39485001, 804326019, 13673627, 441256042, 846898463, 39765660, 14641632, 560328779, 13960385, 718221810, 69605788, 972983991, 621307676, 370400447, 559408599, 608107931, 47342107, 383758861, 732971251, 559979412, 599414071, 899882491, 373577216, 19593317, 801686816, 961841845, 41969801, 44936020, 26013271, 666919030, 748462087, 82565861, 428636867, 830838508, 949860920, 373421069, 963275014, 608107931, 663505199, 58861403, 373421069, 733566999, 528303963, 552806417, 975783109, 88225123, 508924022, 733557312, 41369514, 15824053, 499571556, 809591144, 341759805, 22972959, 29649086, 641225546, 843965114, 784837658, 378267732, 846898463, 372197789, 608107931, 547351325, 39298867, 690371534, 978551624, 748938658, 83070856, 645795492, 400251526, 481210169, 49371568, 737722795, 693178237, 76307289, 681311643, 830838508, 64990615, 421662654, 681311643, 645795492, 978551624, 45307954, 677814219, 887810168, 70844516, 868448879, 528303963, 1272135, 402760837, 552018824, 750533597, 32966875, 4980718, 19042239, 923745917, 46390740, 843965114, 12543426, 514107234, 739670414, 600383106, 993718532, 515302678, 754193298, 627136880, 561641552, 26949551, 933680533, 733557312, 754193298, 25809543, 463808292, 745094838, 968969367, 45795073, 846898463, 993718532, 878935075, 963275014, 932407733, 390795220, 35414906, 927993812, 963275014, 47486216, 43435333, 599414071, 18292844, 754193298, 549422177, 967439909, 553792388, 540524063, 63920227, 515302678, 701875094, 782685574, 528667129, 633209480, 741662777, 998484866, 860591458, 967439909, 804326019, 754193298, 46824424, 884643574, 9922159, 617030443, 12750502, 28706899, 351826973, 57447437, 5593146, 58864409, 61917021, 528303963, 726527258, 508924022, 772507413, 809591144, 46364674, 76067476, 556423312, 372197789, 50150096, 931697169, 718221810, 737722795, 762643584, 45306364, 39316958, 463808292, 4215692, 690371534, 549422177, 57802954, 508303061, 74573480, 752589545, 63170887, 393576855, 10076872, 23055236, 701875094, 8500512, 26630651, 441256042, 582014845, 21292004, 823548332, 622782354, 400251526, 559408599, 32994639, 52000171, 36634077, 368550303, 931697169, 866273694, 537332938, 633209480, 36781522, 421662654, 3217068, 737991981, 713996141, 603142497, 579048770, 561641552, 582014845, 508303061, 822618137, 78533875, 896029322, 6664992, 40506832, 525500184, 737991981, 745094838, 854529589, 662381604, 621307676, 15240319, 40488353, 696716203, 528303963, 45163149, 993718532, 8312231, 638624837, 972983991, 633209480, 960904873, 532290792, 42867007, 42395543, 390098714, 971392544, 910983403, 935658597, 68963760, 712687862, 546727561, 32615996, 48359082, 772412959, 49024776, 61753639, 15209805, 20131732, 402760837, 687772425, 641225546, 662381604, 862791964, 392173479, 41305527, 557328704, 561641552, 535024052, 866273694, 931697169, 43578911, 19224091, 567087540, 891179009, 772412959, 39026837, 487763930, 998484866, 60165605, 83973812, 638306580, 930747579, 628094441, 24159903, 948296383, 22408635, 891179009, 2977640, 540524063, 567087540, 525500184, 822618137, 557328704, 732971251, 641225546, 70756384, 535024052, 16300935, 51740532, 537332938, 713996141, 59822303, 508303061, 10392377, 64105062, 963275014, 47100523, 830838508, 402760837, 16286759, 784837658, 840290585, 927993812, 560745550, 395878568, 395878568, 614137885, 25223587, 395878568, 822618137, 390795220, 8937779, 491841301, 16316639};
	p4 = {741662777, 633209480, 608107931, 532290792, 61977179, 536312475, 878935075, 578282154, 843965114, 638306580, 372197789, 993718532, 748462087, 933680533, 608107931, 561641552, 878935075, 7166651, 963275014, 748462087, 553792388, 906597397, 42932748, 737991981, 576565530, 732971251, 866273694, 25108248, 5652542, 599414071, 14961533, 63700116, 575359604, 383758861, 3184482, 375624468, 927993812, 65319046, 840290585, 841404, 390098714, 741662777, 491841301, 733557312, 420471645, 575359604, 19359674, 514107234, 63675816, 536164562, 528667129, 26466185, 733557312, 748462087, 762998275, 737991981, 762998275, 55596219, 723144616, 733566999, 463808292, 600383106, 368550303, 94361186, 854529589, 482935198, 33683014, 14844815, 628094441, 910983403, 36176939, 561641552, 459576817, 22191510, 78610107, 18836687, 51210201, 400251526, 482935198, 428636867, 392173479, 971392544, 678229596, 935658597, 3520760, 39479659, 536312475, 528667129, 552806417, 421662654, 4359466, 69874824, 393576855, 830838508, 373702660, 373421069, 494979778, 870797546, 910983403, 690371534, 789346479, 25832053, 35907658, 487763930, 22733096, 63678925, 69241904, 30362254, 789346479, 81141354, 383758861, 601855379, 948296383, 822618137, 723144616, 44777398, 963275014, 375624468, 617030443, 622782354, 716909917, 499571556, 828739580, 849426553, 687772425, 641117131, 845973764, 948296383, 846898463, 515302678, 392173479, 5490145, 54894785, 28062263, 373702660, 645795492, 906597397, 750533597, 372197789, 375624468, 46637542, 868448879, 677814219, 560328779, 44813482, 47966585, 39832794, 54118598, 1779477, 541226054, 693178237, 782685574, 968969367, 36247215, 741662777, 896029322, 468439514, 393576855, 79509339, 60728897, 540524063, 846898463, 557328704, 935658597, 985009809, 845973764, 772412959, 739670414, 663505199, 741662777, 390795220, 432072613, 849426553, 400251526, 462908729, 33895292, 29763901, 17171146, 975783109, 16734315, 33838586, 35274577, 28326467, 508924022, 43886531, 931697169, 59721088, 401079684, 532290792, 79197575, 560328779, 998484866, 18903607, 21096570, 560328779, 13106174, 444869066, 601855379, 608107931, 846898463, 42780065, 737722795, 978551624, 532290792, 923745917, 53476542, 82269823, 782685574, 7871598, 393576855, 463808292, 666919030, 10969882, 552018824, 420471645, 750533597, 927993812, 641117131, 377800723, 745094838, 930240473, 53013287, 31096512, 10004066, 525500184, 557328704, 772412959, 528303963, 977430913, 822618137, 341759805, 441256042, 358214755, 7310599, 46581826, 547319303, 80770337, 877314266, 748462087, 41667770, 666919030, 975304907, 19574513, 696716203, 737722795, 804857276, 432072613, 62225173, 960904873, 14146914, 862791964, 923745917, 748938658, 681311643, 968427029, 512548838, 546727561, 860591458, 723144616, 627136880, 739670414, 576565530, 930747579, 395878568, 780665021, 48156596, 804326019, 383758861, 43575054, 517728034, 86981341, 48910223, 377800723, 884643574, 18167171, 560328779, 39637839, 395878568, 494979778, 39734616, 56662445, 608107931, 809591144, 383758861, 44547842, 525500184, 528303963, 633209480, 804857276, 46103761, 565908692, 568761861, 977430913, 541226054, 561641552, 552806417, 58209862, 341759805, 862791964, 370400447, 43119461, 621307676, 33351270, 444869066, 78953405, 754193298, 846117143, 30099117, 538031571, 508924022, 2907282, 716909917, 55930110, 762643584, 556423312, 25529486, 670054414, 830838508, 53036835, 931697169, 854529589, 552806417, 899882491, 975783109, 62420368, 71452395, 752589545, 840290585, 930747579, 878935075, 17156051, 383758861, 899740485, 547319303, 1030928, 351826973, 884643574, 899882491, 370400447, 402760837, 878935075, 49164073, 3697613, 723144616, 741662777, 378267732, 804857276, 400251526, 62532445, 53252592, 508303061, 967439909, 444869066, 762643584, 400251526, 546727561, 845973764, 42415915, 21187844, 36496340, 641117131, 662381604, 360732975, 906597397, 390795220, 899882491, 35835335, 726527258, 731026521, 491841301, 628094441, 8010194, 822618137, 993718532, 35897813, 10622331, 395878568, 690371534, 968969367, 10358352, 25922166, 849426553, 25918540, 701875094, 35026117, 15408588, 40213263, 963275014, 737722795, 14834127, 46555259, 2443467, 390098714, 870797546, 7323976, 50013958, 748462087, 428636867, 36261845, 546727561, 843965114, 11719858, 954847373, 375624468, 481210169, 428636867, 15275836, 19159818, 575359604, 71402950, 578282154, 400251526, 2714186, 5834674, 603142497, 50769009, 373421069, 541226054, 567087540, 46206372, 15110708, 927993812, 400317333, 549422177, 9633440, 373577216, 567087540, 487763930, 46137089, 772507413, 560328779, 582014845, 701875094, 985009809, 549422177, 930240473, 351826973, 482935198, 567087540, 70005122, 393576855, 31821375, 28399845, 31890639, 40946376, 52263824, 38792845, 4657529, 27470256, 641225546, 948296383, 4983912, 16391506, 74898161, 20052981, 723144616, 546727561, 745094838, 85410240, 19015577, 599414071, 1751517, 11415704, 43432532, 36392470, 18551379, 28167261, 899740485, 701875094, 927993812, 372197789, 41298333, 718221810, 6704010, 804857276, 77924536, 860591458, 860591458, 560745550, 348671653, 762643584, 638624837, 10007671, 560148947, 67144596, 44773760, 24931081, 899882491, 494979778, 41359050, 961841845, 490273, 538031571, 93340831, 375624468, 59186408, 560328779, 524386358, 670054414, 967439909, 86318018, 681311643, 6858348, 499571556, 12942417, 822618137, 9444834, 372197789, 860591458, 693178237, 66825525, 10808270, 420471645, 30493192, 40422019, 701875094, 739670414, 608107931, 772412959, 393576855, 600383106, 61344806, 576565530, 744522477, 5705925, 877314266, 421662654, 933680533, 967439909, 731026521, 420471645, 44206960, 90594955, 972983991, 430776590, 72249765, 40436799, 732971251, 617030443, 17793307, 628094441, 42366917, 373421069, 910983403, 459576817, 784837658, 41897662, 663505199, 985009809, 25584607, 599414071, 846898463, 18810565, 726527258, 54450356, 712687862, 971392544, 39771778, 3394203, 1633294, 33539570, 732971251, 370400447, 73819, 393576855, 30848070, 18437430, 541226054, 961841845, 85691000, 846117143, 745094838, 370400447, 933680533, 621307676, 662381604, 726527258, 733566999, 6187651, 26951124, 40767383, 744522477, 63964644, 579061452, 536312475, 524386358, 891179009, 3336518, 754193298, 712687862, 737722795, 6053488, 528667129, 358214755, 887810168, 576565530, 55372457, 22058180, 884643574, 662381604, 2520135, 41250828, 35385886, 8906507, 23265592, 752589545, 512548838, 622782354, 358214755, 677814219, 383758861, 351826973, 830838508, 23774568, 713996141, 38674860, 690371534, 30778158, 67086731, 641225546, 1975887, 45138303, 373421069, 3864502, 401079684, 614137885, 8087863, 975304907, 7109756, 582014845, 762998275, 576565530, 34605194, 400251526, 2169265, 70542140, 62689002, 508924022, 896029322, 712687862, 663505199, 358214755, 911655828, 744522477, 5840109, 559408599, 762643584, 33550819, 42517955, 28532836, 784837658, 2022778, 846898463, 462908729, 537332938, 536164562, 733557312, 45017353, 12693922, 528303963, 772412959, 55770643, 720187, 4472248, 627136880, 65374271, 57684294, 579061452, 535024052, 341759805, 975783109, 372197789, 638624837, 515302678, 463808292, 24256555, 553677831, 26191536, 24109562, 383758861, 930747579, 7388689, 58564689, 537332938, 60491788, 681311643, 5396243, 35202800, 54490535, 671811797, 66798552, 911655828, 70419750, 375624468, 726527258, 557328704, 508924022, 932407733, 677814219, 383758861, 540524063, 780665021, 801686816, 40552773, 633209480, 628094441, 8943247, 546727561, 535024052, 67642029, 67641733, 390098714, 579048770, 10019640, 862791964, 641225546, 578282154, 641225546, 59344108, 693178237, 4138114, 28945433, 556423312, 49040896, 737991981, 804326019, 559979412, 56580855, 608107931, 754193298, 373577216, 525500184, 977430913, 970607, 553677831, 578282154, 896029322, 84380677, 60025245, 949860920, 575359604, 716909917, 536312475, 6050186, 975783109, 877314266, 887810168, 645795492, 430776590, 866273694, 745094838, 547351325, 44784096, 58748979, 33344005, 854529589, 45358517, 351826973, 27718864, 552806417, 512548838, 748938658, 713996141, 42293061, 16919356, 993718532, 73360580, 5586481, 4397897, 911655828, 508303061, 2406440, 468439514, 549422177, 508303061, 600383106, 441256042, 579061452, 614137885, 72593019, 963275014, 400251526, 972983991, 38457406, 40940855, 25717062, 14727460, 351826973, 560148947, 40028654, 663505199, 360732975, 599414071, 822618137, 968969367, 370400447, 930747579, 33480849, 38942674, 70637788, 823548332, 390795220, 66055157, 830838508, 559979412, 3409646, 75756723, 59633450, 70086934, 368550303, 528667129, 82253187, 32970664, 44823038, 891179009, 43761875, 34685057, 351826973, 628094441, 14842664, 713996141, 780665021, 804857276, 933680533, 843965114, 968969367, 752589545, 662381604, 392173479, 28567829, 90736657, 48117569, 557328704, 930240473, 780665021, 14682817, 459576817, 638624837, 45732936, 18814319, 341759805, 748938658, 528667129, 517728034, 27312361, 975304907, 536312475, 772507413, 896029322, 71206340, 16541617, 50985587, 57028330, 27373686, 30913287, 82373588, 373577216, 840290585, 45729971, 739670414, 963275014, 27506571, 911655828};
	p5 = 72;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bearland consists of N cities, numbered 1 through N.
// Some pairs of cities are connected by one-way roads of unit length.
// The distance from city X to city Y is the smallest number of roads you need to traverse in order to get from X to Y.
// 
// The road network has a special structure.
// You are given a description of this structure: two vector <int>s a and b, each with M elements.
// For each pair of distinct cities (X,Y), there is a one-way road from X to Y if and only if there is at least one index i such that X is divisible by a[i] and Y is divisible by b[i].
// 
// For example, suppose that N = 7, M = 1, a[0] = 2, and b[0] = 3.
// In this case the country has 7 cities and it contains the following one-way roads: 2 -> 3, 2 -> 6, 4 -> 3, 4 -> 6, 6 -> 3, and 6 -> 6.
// 
// You are given the int N.
// You are also given two ints S and T: the source city where you start your journey and the target city you want to reach.
// Finally, you are given the vector <int>s a and b described above.
// 
// If there is no path from S to T, return -1.
// Otherwise, compute and return the distance from S to T.
// 
// DEFINITION
// Class:FromToDivisible
// Method:shortest
// Parameters:int, int, int, vector <int>, vector <int>
// Returns:int
// Method signature:int shortest(int N, int S, int T, vector <int> a, vector <int> b)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 10^9, inclusive.
// -S and T will each be between 1 and N, inclusive.
// -S and T will be different.
// -M will be between 1 and 1000, inclusive.
// -a and b will each contain exactly M elements.
// -Each element in a and in b will be between 1 and N, inclusive.
// -The pairs (a[i],b[i]) are all distinct.
// 
// 
// EXAMPLES
// 
// 0)
// 11
// 9
// 6
// {3,10}
// {5,2}
// 
// Returns: 2
// 
// The one-way roads are: (3,5), (3,10), (6,5), (6,10), (9,5), (9,10), (10,2), (10,4), (10,6), (10,8).
// The shortest path from city 9 to city 6 is 9 -> 10 -> 6.
// It uses two roads, so the length is 2.
// 
// 1)
// 123456789
// 18
// 12
// {1,42,50}
// {1,17,3}
// 
// Returns: 1
// 
// Since a[0] = b[0] = 1, there is a one-way road from any city to any other city.
// In particular, there is a road from city 18 to city 12.
// 
// 2)
// 60
// 30
// 8
// {16,15,12}
// {2,20,5}
// 
// Returns: -1
// 
// 
// 
// 3)
// 77
// 10
// 62
// {2,5,7,4,17,26}
// {25,7,11,13,31,34}
// 
// Returns: 4
// 
// One shortest path is 10 -> 56 -> 26 -> 34 -> 62.
// 
// 4)
// 100
// 90
// 40
// {20,30,100,99,100}
// {10,30,100,100,99}
// 
// Returns: 2
// 
// The only optimal path is 90 -> 60 -> 40.
// 
// 5)
// 1000000000
// 7000
// 424212345
// {35000000,120000000,424212345,200000000,3500,19}
// {15,1,7000,200000000,400000000,17}
// 
// Returns: 3
// 
// 
// 
// 6)
// 2
// 1
// 2
// {2}
// {1}
// 
// Returns: -1
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
