#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class Decipherability {
    public:
        string check(string s, int k) {
            if (k == s.length()) return "Certain";
            for (int c = 'a'; c <= 'z'; c++) {
                ll prev = -1;
                rep(i, s.length()) {
                    if (s[i] != c) continue; 
                    if (prev != -1 && i - prev - 1 < k) {
                        return "Uncertain";
                    }
                    prev = i;
                }
            }

            return "Certain";
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	Decipherability *obj;
	string answer;
	obj = new Decipherability();
	clock_t startTime = clock();
	answer = obj->check(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	int p1;
	string p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = "snuke";
	p1 = 2;
	p2 = "Certain";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = "aba";
	p1 = 1;
	p2 = "Certain";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "aba";
	p1 = 2;
	p2 = "Uncertain";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "abcdabcd";
	p1 = 3;
	p2 = "Certain";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "koukyoukoukokukikou";
	p1 = 2;
	p2 = "Uncertain";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = "wolfsothe";
	p1 = 8;
	p2 = "Uncertain";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = "aa";
	p1 = 2;
	p2 = "Certain";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a string s that contains at least K characters.
// Cat Snuke will remove exactly K characters from the string.
// Afterwards, Snuke will show you the new string and you have to guess the original indices of all removed characters.
// You win the game if you guess all of them correctly.
// 
// For example, suppose that s="snuke" and K=2.
// Snuke removed two characters and showed you the string "nue".
// In this situation you can easily deduce that Snuke must have removed the characters s[0] and s[3].
// You announce that the indices of removed characters are 0 and 3, and you win the game.
// 
// You are given the string s and the int K.
// Return "Certain" (quotes for clarity) if you can always be sure to win the game, regardless of which characters Snuke removes.
// Otherwise, return "Uncertain".
// Note that the return value is case-sensitive.
// 
// DEFINITION
// Class:Decipherability
// Method:check
// Parameters:string, int
// Returns:string
// Method signature:string check(string s, int K)
// 
// 
// CONSTRAINTS
// -K will be between 1 and 50, inclusive.
// -The length of s will be between K and 50, inclusive.
// -Every character in s will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "snuke"
// 2
// 
// Returns: "Certain"
// 
// This is the example from the problem statement. As all characters are unique, you can always determine the indices of the erased ones.
// 
// 1)
// "aba"
// 1
// 
// Returns: "Certain"
// 
// Snuke will show you one of the strings "ba", "aa", and "ab".
// In the first case you can be sure that he erased the character at index 0.
// The second and the third string correspond to indices 1 and 2, respectively.
// 
// 2)
// "aba"
// 2
// 
// Returns: "Uncertain"
// 
// If Snuke shows you the string "a", there are two possibilities: either he erased the characters at indices 0 and 1, or the characters at indices 1 and 2.
// 
// 3)
// "abcdabcd"
// 3
// 
// Returns: "Certain"
// 
// 
// 
// 4)
// "koukyoukoukokukikou"
// 2
// 
// Returns: "Uncertain"
// 
// 
// 
// 5)
// "wolfsothe"
// 8
// 
// Returns: "Uncertain"
// 
// 
// 
// 6)
// "aa"
// 2
// 
// Returns: "Certain"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
