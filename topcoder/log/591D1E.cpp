#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class TheTree {
    public:
        int maximumDiameter(vector <int> c) {
            ll n = c.size(), ret = 0;
            rep(i, n) {
                ll j = i; while (j < n && c[j] > 1) j++;
                chmax(ret, n+j-2*i);
            }
            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheTree *obj;
	int answer;
	obj = new TheTree();
	clock_t startTime = clock();
	answer = obj->maximumDiameter(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {3};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {2,2};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {4,1,2,4};
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {4,2,1,3,2,5,7,2,4,5,2,3,1,13,6};
	p1 = 21;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
    
	// ----- test 4 -----
	disabled = false;
	p0 = {4, 3, 2};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
    
	// ----- test 4 -----
	disabled = false;
	p0 = {116, 771, 317, 611, 389, 111, 845, 345, 863, 454, 173, 44, 767, 259, 465, 754, 179, 189, 46, 251, 244, 468, 388, 197, 919, 294, 756, 896, 814, 669, 687, 613, 907, 269, 720, 702, 221, 208, 74, 37, 719, 811, 169, 474, 8, 775, 195, 344, 622, 293};
	p1 = 100;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
			
	// ----- test 4 -----
	disabled = false;
	p0 = {116, 771, 2, };
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
			
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Manao is working in the Tree Research Center.
// It may come as a surprise that the trees they research are not the ones you can see in a park.
// Instead, they are researching special graphs.
// (See Notes for definitions of terms related to these trees.)
// 
// Manao's daily job is reconstructing trees, given some partial information about them.
// Today Manao faced a difficult task.
// He needed to find the maximum possible diameter of a tree, given the following information:
// 
// 
// Some vertex in the tree is called V.
// The distance between V and the farthest vertex from V is D.
// For each x between 1 and D, inclusive, Manao knows the number of vertices such that their distance from V is x.
// 
// 
// You are given a vector <int> cnt containing D strictly positive integers.
// For each i, the i-th element of cnt is equal to the number of vertices which have distance i+1 from V.
// Please help Manao with his task.
// Return the maximum possible diameter of a tree that matches the given information.
// 
// 
// DEFINITION
// Class:TheTree
// Method:maximumDiameter
// Parameters:vector <int>
// Returns:int
// Method signature:int maximumDiameter(vector <int> cnt)
// 
// 
// NOTES
// -A tree is a connected graph with no cycles. Note that each tree with N vertices has precisely N-1 edges.
// -The distance between two vertices of a tree is the smallest number of edges one has to traverse in order to get from one of the vertices to the other one.
// -The diameter of a tree is the maximum of all pairwise distances. In other words, the diameter is the distance between the two vertices that are the farthest away from each other.
// 
// 
// CONSTRAINTS
// -cnt will contain between 1 and 50 elements, inclusive.
// -Each element of cnt will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3}
// 
// Returns: 2
// 
// The only tree that matches the given information is shown below. The vertex V is red.
// 
// 
// 
// 
// 1)
// {2, 2}
// 
// Returns: 4
// 
// There are two trees which correspond to the given partial information:
// 
// 
// 
// The tree on the left has diameter 3 and the tree on the right has diameter 4.
// 
// 2)
// {4, 1, 2, 4}
// 
// Returns: 5
// 
// This is one example of a tree that corresponds to the given constraints and has the largest possible diameter.
// 
// 
// 
// 3)
// {4, 2, 1, 3, 2, 5, 7, 2, 4, 5, 2, 3, 1, 13, 6}
// 
// Returns: 21
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
