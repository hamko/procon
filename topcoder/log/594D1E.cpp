#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class AstronomicalRecords {
    public:
        int minimalPlanets(vector <int> a_, vector <int> b_) {
            ll an = a_.size();
            ll bn = b_.size();
            ll ret = 0;
            ll dp[55][55] = {}; 
            rep(i, an) rep(j, bn) {
                vll a(an), b(bn);
                rep(k, an) {
                    a[k] = a_[k];
                }
                rep(k, bn) {
                    b[k] = b_[k];
                }
                ll ap = a[i], bp = b[j];
                rep(k, an) {
                    a[k] *= bp;
                }
                rep(k, bn) {
                    b[k] *= ap;
                }

                memset(dp, 0, sizeof(dp));
                rep(k, an) { 
                    rep(l, bn) {
                        if (a[k] == b[l]) {
                            dp[k+1][l+1] = dp[k][l] + 1;
                        } else {
                            dp[k+1][l+1] = max<ll>(dp[k+1][l], dp[k][l+1]);
                        }
                    }
                }
                chmax(ret, dp[an][bn]);
            }
            return an + bn - ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	AstronomicalRecords *obj;
	int answer;
	obj = new AstronomicalRecords();
	clock_t startTime = clock();
	answer = obj->minimalPlanets(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,2,1,2,1};
	p1 = {2,1,2,1,2};
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,2,3,4};
	p1 = {2,4,6,8};
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {2,3,2,3,2,3,2};
	p1 = {600,700,600,700,600,700,600};
	p2 = 10;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,2,3,4,5,6,7,8,9};
	p1 = {6,7,8,9,10,11,12};
	p2 = 12;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {100000000,200000000};
	p1 = {200000000,100000000};
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel found two astronomical records.
// They both describe the same solar system.
// Each planet in the system can be characterized by two parameters each being a positive number: planet's size and the distance at which it orbits the sun.
// All orbital distances are pairwise distinct, but sizes of some planets may be the same.
// 
// 
// 
// The first record is a vector <int> A with x elements.
// These elements give the relative sizes of some x planets in the solar system.
// Formally, the sizes of those planets have the ratio A[0] : A[1] : ... : A[x-1].
// The planets described by A are ordered by their distance from the sun.
// (That is, earlier elements of A correspond to planets that are closer to the sun.)
// 
// 
// 
// The second record is a vector <int> B with y elements.
// These elements give the relative sizes of some y planets in the solar system.
// Formally, the sizes of those planets have the ratio B[0] : B[1] : ... : B[y-1].
// The planets described by B are ordered by their distance from the sun.
// 
// 
// 
// Note that the planets considered by a record do not have to be consecutive.
// For example, if a solar system contains the planets P, Q, R, S, T, and U, it is possible that the first record compares P, R, and S, and the second record compares Q, R, T, and U.
// 
// 
// 
// We assume that both records are correct.
// Return the smallest possible total number of planets in the solar system.
// 
// DEFINITION
// Class:AstronomicalRecords
// Method:minimalPlanets
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int minimalPlanets(vector <int> A, vector <int> B)
// 
// 
// CONSTRAINTS
// -A will contain between 2 and 50 elements, inclusive.
// -B will contain between 2 and 50 elements, inclusive.
// -Each element in A will be between 1 and 1,000,000,000, inclusive.
// -Each element in B will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2,1,2,1}
// {2,1,2,1,2}
// 
// Returns: 6
// 
// There have to be at least 5 planets, because each record compares 5 of them.
// There cannot be exactly 5 planets, because the first one would have to be both smaller than and larger than the second one.
// (Their ratio would have to be both 1:2 and 2:1, which is impossible.)
// There can be exactly 6 planets with relative sizes 1,2,1,2,1,2.
// 
// 1)
// {1,2,3,4}
// {2,4,6,8}
// 
// Returns: 4
// 
// There can be only 4 planets because 1:2:3:4 = 2:4:6:8.
// 
// 2)
// {2,3,2,3,2,3,2}
// {600,700,600,700,600,700,600}
// 
// Returns: 10
// 
// 
// 
// 3)
// {1,2,3,4,5,6,7,8,9}
// {6,7,8,9,10,11,12}
// 
// Returns: 12
// 
// 
// 
// 4)
// {100000000,200000000}
// {200000000,100000000}
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
