#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
void printbits(ll mask, ll n) { rep(i, n) { cout << !!(mask & (1ll << i)); } cout << endl; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class OrderOfOperations {
    public:
        int minTime(vector <string> s) {
            ll n = s.size(), m = s[0].size();
            vll a(n);
            rep(i, n) rep(j, m) if (s[i][j] == '1')
                a[i] |= (1ll << j);

            vll dp(1ll << m, INF);
            dp[0] = 0;
            rep(mask, 1ll << m) rep(i, n) {
                ll tmp = __builtin_popcount(mask | a[i]) - __builtin_popcount(mask);
                chmin(dp[mask | a[i]], dp[mask] + tmp * tmp);
            }
            for (ll mask = (1<<m)-1; mask >= 0; mask--) 
                if (dp[mask] != INF)
                    return dp[mask];

            return -1;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    OrderOfOperations *obj;
    int answer;
    obj = new OrderOfOperations();
    clock_t startTime = clock();
    answer = obj->minTime(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    vector <string> p0;
    int p1;

    // ----- test 0 -----
    disabled = false;
    p0 = {"111","001","010"};
    p1 = 3;
    all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = {"11101","00111","10101","00000","11000"};
    p1 = 9;
    all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = {"11111111111111111111"};
    p1 = 400;
    all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"1000","1100","1110"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"111","111","110","100"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Noku has just finished writing his first computer program.
// Noku's computer has m memory cells.
// The cells have addresses 0 through m-1.
// Noku's program consists of n instructions.
// The instructions have mutually independent effects and therefore they may be executed in any order.
// The instructions must be executed sequentially (i.e., one after another) and each instruction must be executed exactly once.
// 
// 
// 
// You are given a description of the n instructions as a vector <string> with n elements.
// Each instruction is a string of m characters.
// For each i, character i of an instruction is '1' if this instruction accesses memory cell i, or '0' if it does not.
// 
// 
// 
// Noku's computer uses caching, which influences the time needed to execute an instruction.
// More precisely, executing an instruction takes k^2 units of time, where k is the number of new memory cells this instruction accesses.
// (I.e., k is the number of memory cells that are accessed by this instruction but have not been accessed by any previously executed instruction.
// Note that k may be zero, in which case the current instruction is indeed executed in 0 units of time.)
// 
// 
// 
// Noku's instructions can be executed in many different orders.
// Clearly, different orders may lead to a different total time of execution.
// Find and return the shortest amount of time in which it is possible to execute all instructions.
// 
// 
// DEFINITION
// Class:OrderOfOperations
// Method:minTime
// Parameters:vector <string>
// Returns:int
// Method signature:int minTime(vector <string> s)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -m will be between 1 and 20, inclusive.
// -s will have exactly n elements.
// -Each element of s will have exactly m characters.
// -Each character of s[i] will be either '0' or '1' for all valid i.
// 
// 
// EXAMPLES
// 
// 0)
// {
//  "111",
//  "001",
//  "010"
// }
// 
// Returns: 3
// 
// Cat Noku has 3 instructions.
// The first instruction ("111") accesses all three memory cells.
// The second instruction ("001") accesses only memory cell 2.
// The third instruction ("010") accesses only memory cell 1.
// If Noku executes these three instructions in the given order, it will take 3^2 + 0^2 + 0^2 = 9 units of time.
// However, if he executes them in the order "second, third, first", it will take only 1^2 + 1^2 + 1^2 = 3 units of time.
// This is one optimal solution.
// Another optimal solution is to execute the instructions in the order "third, second, first".
// 
// 
// 1)
// {
//  "11101",
//  "00111",
//  "10101",
//  "00000",
//  "11000"
// }
// 
// Returns: 9
// 
// 
// 
// 2)
// {
//   "11111111111111111111"
// }
// 
// Returns: 400
// 
// A single instruction that accesses all 20 memory cells.
// 
// 3)
// {
//   "1000",
//   "1100",
//   "1110"
// }
// 
// Returns: 3
// 
// 
// 
// 4)
// {
//   "111",
//   "111",
//   "110",
//   "100"
// }
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
