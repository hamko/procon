#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { if (!v.empty()) { o << '['; copy(v.begin(), v.end(), ostream_iterator<T>(o, ", ")); o << "\b\b]"; } return o; }
using ll = long long; using ld = long double; using vll = vector<ll>; using vld = vector<ld>;
using vi = vector<int>;
typedef pair<ll, ll> P;

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;
#define MAX_N 100005

class BearCries {
    public:
        int count(string s) {
            ll n = s.length();
            static ll dp[210][210][210]; rep(i, n) rep(j, n) rep(k, n) { dp[i][j][k] = 0; }
            dp[0][0][0] = 1;
            rep(i, n) rep(j, n) rep(k, n) {
                ll v = dp[i][j][k];
                if (!v) continue;
                if (s[i] == ';') {
                    (dp[i+1][j+1][k] += v) %= mo;
                    if (k > 0) (dp[i+1][j][k-1] += v * k) %= mo;
                } else {
                    if (j > 0) (dp[i+1][j-1][k+1] += v * j) %= mo;
                    (dp[i+1][j][k] += v * k) %= mo;
                }
            }
            return dp[n][0][0] % mo;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BearCries *obj;
	int answer;
	obj = new BearCries();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = ";_;;_____;";
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = ";;;___;;;";
	p1 = 36;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "_;__;";
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = ";_____________________________________;";
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = ";__;____;";
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = ";_;;__;_;;";
	p1 = 52;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Limak is a polar bear who often chats online with his friends.
// Nowadays, bears often use emoticons to express their feelings.
// In this problem we consider one particular emoticon: the crying emoticon.
// 
// A crying emoticon consists of an arbitrary positive number of underscores between two semicolons.
// Hence, the shortest possible crying emoticon is ";_;" (quotes for clarity).
// The strings ";__;" and ";_____________;" are also valid crying emoticons.
// 
// Today Limak is sad, so he sent his friend a sequence of crying emoticons.
// However, due to a network malfunction all those emoticons got mixed together into a single string.
// 
// You are given a string message containing the message Limak's friend received.
// You guess that the message can be divided into one or more crying emoticons.
// Each emoticon must be a subsequence of the message, and each character of the message must belong to exactly one emoticon.
// Note that the subsequences are not required to be contiguous.
// 
// Let X be the number of ways in which one can divide the given message into emoticons.
// Compute and return the value (X modulo 1,000,000,007).
// 
// DEFINITION
// Class:BearCries
// Method:count
// Parameters:string
// Returns:int
// Method signature:int count(string message)
// 
// 
// CONSTRAINTS
// -message will contain between 1 and 200 characters, inclusive.
// -Each character in message will be either semicolon or underscore.
// 
// 
// EXAMPLES
// 
// 0)
// ";_;;_____;"
// 
// Returns: 2
// 
// There are two ways to divide this string into two crying emoticons.
// One looks as follows:
// 
//  ;_;
//     ;_____;
// 
// and the other looks like this:
// 
//  ;_ ;
//    ; _____;
// 
// 
// 1)
// ";;;___;;;"
// 
// Returns: 36
// 
// This message consists of 3 semicolons, 3 underscores and 3 semicolons again.
// Clearly, we have to divide this message into exactly three crying emoticons, each with a single underscore.
// There are 36 different ways to do so.
// 
// 2)
// "_;__;"
// 
// Returns: 0
// 
// As this message begins with an underscore, it clearly cannot be divided into one or more crying emoticons: each crying emoticon starts with a semicolon.
// 
// 3)
// ";_____________________________________;"
// 
// Returns: 1
// 
// 
// 
// 4)
// ";__;____;"
// 
// Returns: 0
// 
// 
// 
// 5)
// ";_;;__;_;;"
// 
// Returns: 52
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
