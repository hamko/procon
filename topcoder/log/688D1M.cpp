#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
#define mp make_pair
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
#define exists find_if
#define forall all_of

using ll = long long; using vll = vector<ll>; using vvll = vector<vll>; using P = pair<ll, ll>;
using ld = long double;  using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>; vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using Pos = complex<double>;

namespace std{ namespace { template <class T> inline void hash_combine(size_t& seed, T const& v) { seed ^= hash<T>()(v) + 0x9e3779b9 + (seed<<6) + (seed>>2); } template <class Tuple, size_t Index = tuple_size<Tuple>::value - 1> struct HashValueImpl { static void apply(size_t& seed, Tuple const& tuple) { HashValueImpl<Tuple, Index-1>::apply(seed, tuple); hash_combine(seed, get<Index>(tuple)); } }; template <class Tuple> struct HashValueImpl<Tuple,0> { static void apply(size_t& seed, Tuple const& tuple) { hash_combine(seed, get<0>(tuple)); } }; } template <typename ... TT> struct hash<tuple<TT...>> { size_t operator()(tuple<TT...> const& tt) const { size_t seed = 0; HashValueImpl<tuple<TT...> >::apply(seed, tt); return seed; } }; } 
namespace std { template<typename U, typename V> struct hash<pair<U, V>> { size_t operator()(pair<U, V> const& v) const { return v.first ^ v.second; } }; } struct pairhash { public: template <typename T, typename U> size_t operator()(const pair<T, U> &x) const { return hash<T>()(x.first) ^ hash<U>()(x.second); } };

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; o << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const unordered_set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
vector<int> range(const int x, const int y) { vector<int> v(y - x + 1); iota(v.begin(), v.end(), x); return v; }
template <typename T> istream& operator>>(istream& i, vector<T>& o) { rep(j, o.size()) i >> o[j]; return i;}
string bits_to_string(ll input, ll n=64) { string s; rep(i, n) s += '0' + !!(input & (1ll << i)); return s; }
template <typename T> unordered_map<T, ll> counter(vector<T> vec){unordered_map<T, ll> ret; for (auto&& x : vec) ret[x]++; return ret;};
string substr(string s, P x) {return s.substr(x.fi, x.se - x.fi); }
struct ci : public iterator<forward_iterator_tag, ll> { ll n; ci(const ll n) : n(n) { } bool operator==(const ci& x) { return n == x.n; } bool operator!=(const ci& x) { return !(*this == x); } ci &operator++() { n++; return *this; } ll operator*() const { return n; } };

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;
#define ldout fixed << setprecision(40) 

class ParenthesesDiv1Medium {
    public:
        int minSwaps(string s, vector <int> L, vector <int> R) {
            ll n = L.size();

            vvll g(2010);
            rep(i, n) {
                g[L[i]].pb(R[i]);
            }

            vector<P> range; // (len, l) = lからlenの範囲について正しいカッコ列である必要

            rep(l, g.size()) if (g[l].size()) {
                auto&& r = g[l];
                sort(all(r));
                r.erase(unique(all(r)), r.end());
                rep(i, r.size()-1) 
                    g[r[i]+1].pb(r[i+1]);

                r.resize(1);
                // クロスする最小の[他のl]>lを探す
                ll new_r = INF;
                for (int other_l = r[0]; other_l > l; other_l--) if (g[other_l].size()) {
                    if (*max_element(all(g[other_l])) < r[0]) continue;
                    chmin(new_r, other_l-1);
                }
                if (new_r != INF) 
                    g[new_r+1].pb(r[0]), r[0] = new_r;

                range.pb(P(r[0]-l+1, l)); 
                if ((l - r[0] + 1) % 2 == 1)
                    return -1;
            }
            bool f[2020] = {};

            for (auto _ : range) {
                ll len = _.fi, l = _.se;
                repi(i, l, l+len) f[i] = 1;
            }
            ll out_open = 0, out_close = 0;
            rep(i, s.length()) if (!f[i]) 
                (s[i] == '(' ? out_open : out_close)++;

            sort(all(range));
            ll o = 0, c = 0;;
            for (auto _ : range) {
                ll len = _.fi, l = _.se;
                repi(i, l, l+len) f[i] = 1;

                string t;
                repi(i, l, l+len) if (s[i] != '*') t += s[i], s[i] = '*';

                ll balance = 0;
                ll open = 0, close = 0;
                rep(i, t.size()) {
                    if (t[i] == '(') {
                        if (balance + i >= t.size() - 1)  // (では降りきれない
                            close++, balance--;
                        else 
                            balance++;
                    } else {
                        if (balance <= 0)  // )ではもう降りれない
                            open++, balance++;
                        else 
                            balance--;
                    }
                }
                o += open, c += close;
            }

            if (max(0ll, o - c) > out_open) return -1;
            if (max(0ll, c - o) > out_close) return -1;
            return max(o, c);
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	ParenthesesDiv1Medium *obj;
	int answer;
	obj = new ParenthesesDiv1Medium();
	clock_t startTime = clock();
	answer = obj->minSwaps(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = ")(";
	p1 = {0,0,0,0};
	p2 = {1,1,1,1};
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = "(())";
	p1 = {0,2};
	p2 = {1,3};
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
		// ----- test 1 -----
	disabled = false;
	p0 = "))((";
	p1 = {0,2};
	p2 = {1,3};
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "(((())";
	p1 = {0,2};
	p2 = {1,3};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "(((((((((";
	p1 = {0,2};
	p2 = {1,3};
	p3 = -1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "()()()()";
	p1 = {0,0,0,0,2,2,2,4,4,6};
	p2 = {1,3,5,7,3,5,7,5,7,7};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = ")()(()()((())()()()()()()))(()())()()()(";
	p1 = {3,5,17,25,35};
	p2 = {12,10,30,30,38};
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
//    ", {1, 4, 3, 2, 0}, {8, 5, 6, 7, 9
	// ----- test 5 -----
	disabled = false;
	p0 = "((()())())";
	p1 = {1,4,3,2,0};
	p2 = {8,5,6,7,9};
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
		// ----- test 1 -----
	disabled = false;
	p0 = "(())";
	p1 = {0,1};
	p2 = {3,2};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
    //		// ----- test 1 -----
	disabled = false;
	p0 = "(())";
	p1 = {0,1};
	p2 = {1,2};
	p3 = -1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

		// ----- test 1 -----
	disabled = false;
	p0 = "((()()())))((())())()()()()(((())())()))((()(((())(()())())()((()(()))((())())(()()())))(())((((()(()(())()))((((()((()))(())))(((())())(())((((())()())(((())()))(((())((())()()())())(())()())((((((())))((()((()()()))(())(()(())))((())(()())))((()(()))()())()))()))())()))))()))))()(((()())()())))(()))))()())()(()))(((()())))()())(((()(((((()()))((())()((()))(()()((()()))())))))))(()))()())()))((()()))))()()))()()(()((((())())))((()(((((())()))))()()(((()()())((()))((()((()()))()()(((((((()))((((((()))())(()(((())(())))())(((()))))()((())(())))((()))))(())))))())()())((((()))))))((())())(((()))()((()())(())((())))(()))()()())(())((()(()(((())))(((((((())))()(()(()()))((()())(()((()(((()(())(())))()(())(()()(()))((()))((((())(()()(()((()))(())()()()(()((()()()((())((((()))((())(())()()))())((()(()))))))()())()()(()()(()(((())()(()(()))((((()))))())()))))))))(()))(())(())()((()))()))()(((()()()()((()(((((()()(()))((()()()((((((())()))))(())(())((()()()(()(((()()())())(((()))(())(((()()))(()()())(((((((()()()()(())()(((())())()(()))()())()()(()))))))()())((((()()(()))())()())()))((()(()())(()))()(((((()((((()())()()(()))())))()()))))())))))()((((()(()(()((()()))((()(()(()((())()((())((((()()())(()(()))())))()())())(()()(())))())()()((())(()((()())())))((()())()())(()()()))))((())(()((((()))(()((())))()))((()))()()((((()()))(())))))))()(())((())(())(()(()()(()()()((()))(((()(())((())((((((())()))()()))))(((((())())))()(()())))))(()()))))())()))()())())((()((((())((()()(())())()(())))()())()))(((((()((())((()((())(()())))(((()(())()()(()(((((()()()(())()))()(())))))((()(())))()())))()((()(()))()(()(()))()()()))()))(((()))((()()(((()((((()()))((())((())))())(()(((()()()()()()())()()()))()()()))()(()((())((()((()()()))(()))))()(())()())))(()()(()())()(()()()(()(()()())))(())())())))))))(()()))()()))(((((())((()())()(()()))))((())))()((()))(())((()())))()())()(()()(()((()()())())))())(((((()((())()())))))(()))(())())((())())(())()(()(()()()))()))()))()()()))(((((()))(((())))";
	p1 = {146, 1270, 426, 1833, 1226, 53, 1861, 1474, 954, 1284, 426, 510, 1728, 946, 496, 655, 248, 74, 496, 994, 986, 1196, 442, 76, 718, 1226, 1290, 722, 1736, 1854, 1728, 1852, 1304, 1, 1290, 426, 894, 1024, 1196, 21, 986, 74, 996, 430, 440, 192, 426, 1052, 426, 1270, 140, 504, 510, 1284, 1475, 1198, 140, 504, 426, 539, 140, 1468, 994, 982, 80, 498, 1360, 950, 1728, 1022, 1270, 1054, 158, 640, 1848, 496, 80, 1400, 74, 1296, 72, 1798, 1280, 500, 986, 952, 1784, 1204, 510, 976, 1052, 1202, 151, 16, 433, 508, 716, 1728, 1212, 1024, 500, 655, 1212, 1276, 1587, 1052, 512, 1230, 1346, 1937, 140, 1052, 1206, 1142, 1460, 1256, 442, 950, 1472, 440, 994, 1024, 1290, 990, 990, 494, 78, 308, 1052, 1290, 1202, 496, 76, 132, 1744, 714, 714, 512, 1296, 716, 982, 722, 76, 1272, 1871, 982, 500, 512, 864, 946, 508, 426, 900, 74, 1861, 1022, 1514, 722, 946, 254, 574, 916, 510, 996, 994, 866, 1852, 894, 496, 866, 958, 714, 1204, 1464, 1270, 1202, 132, 1190, 1282, 1272, 1198, 1458, 1256, 1456, 681, 1296, 1212, 1236, 866, 990, 1956, 504, 1284, 1346, 1290, 1992, 1212, 1024, 453, 1282, 1284, 1276, 1276, 1854, 508, 72, 1220, 76, 714, 442, 1728, 950, 430, 1468, 2, 714, 1196, 1340, 714, 1474, 508, 1256, 494, 864, 1290, 72, 722, 712, 1270, 74, 948, 343, 1264, 1276, 1947, 442, 1230, 574, 986, 1510, 900, 659, 1856, 1212, 72, 948, 72, 510, 80, 1258, 1456, 496, 716, 1562, 952, 1836, 1514, 1470, 72, 748, 512, 894, 426, 74, 976, 498, 146, 510, 1278, 500, 1274, 950, 494, 508, 1458, 1226, 1024, 72, 502, 1956, 512, 440, 132, 0, 76, 785, 1740, 512, 508, 1427, 1282, 430, 74, 714, 1276, 1744, 1196, 442, 502, 1340, 1272, 1472, 1736, 0, 904, 1022, 1470, 80, 426, 1236, 1222, 132, 182, 0, 712, 430, 1848, 140, 950, 1775, 512, 512, 1458, 426, 954, 716, 1464, 1311, 1974, 1264, 745, 1542, 691, 1304, 54, 948, 74, 1196, 494, 646, 1738, 1746, 593, 80, 1024, 996, 1288, 496, 952, 948, 898, 510, 148, 1248, 80, 132, 140, 1740, 502, 504, 146, 1272, 952, 510, 1278, 1468, 1784, 148, 1276, 502, 894, 512, 904, 1230, 1202, 900, 1362, 1212, 864, 1206, 144, 1474, 1599, 1539, 510, 795, 140, 512, 722, 714, 976, 1836, 596, 183, 498, 1005, 430, 1813, 1466, 500, 1340, 1278, 1956, 442, 1118, 954, 81, 1728, 818, 72, 1236, 986, 716, 982, 1318, 144, 140, 948, 72, 722, 718, 1348, 132, 494, 1307, 986, 1282, 80, 718, 1264, 986, 148, 1784, 1458, 504, 494, 1278, 274, 1894, 76, 952, 866, 1236, 904, 994, 1854, 722, 1979, 494, 905, 1458, 712, 875, 494, 722, 0, 1274, 1360, 1226, 898, 1196, 442, 430, 866, 494, 572, 450, 1848, 78, 1470, 1456, 440, 508, 508, 712, 1278, 45, 1256, 990, 718, 1206, 1000, 286, 948, 132, 990, 898, 146, 500, 1052, 982, 500, 1022, 152, 1946, 1240, 72, 508, 0, 1810, 494, 226, 140, 1444, 1472, 982, 1744, 74, 512, 898, 1540, 76, 74, 946, 1982, 1746, 1270, 537, 1280, 72, 716, 1230, 1422, 74, 72, 496, 1274, 1296, 1290, 1296, 537, 496, 1086, 1202, 1274, 1024, 1349, 494, 1362, 494, 1022, 442, 0, 1236, 994, 1744, 1218, 1296, 1416, 1134, 1087, 1270, 990, 430, 1738, 1284, 140, 1306, 1222, 907, 994, 1474, 1052, 148, 434, 996, 937, 148, 1507, 996, 1306, 132, 946, 1925, 500, 1236, 864, 1220, 442, 72, 638, 440, 1468, 80, 986, 1726, 818, 146, 1294, 1863, 1510, 1218, 140, 498, 1206, 996, 1218, 430, 1635, 1052, 976, 1272, 148, 954, 148, 1474, 1726, 72, 864, 996, 494, 1307, 1330, 898, 946, 1022, 996, 948, 1026, 1609, 1236, 1024, 80, 140, 866, 496, 1204, 496, 1196, 712, 494, 946, 295, 1728, 527, 1264, 994, 996, 144, 733, 866, 718, 510, 1456, 72, 500, 950, 78, 994, 1198, 979, 498, 1222, 722, 948, 1340, 430, 76, 1340, 994, 76, 1865, 1258, 1738, 1346, 502, 144, 1212, 1274, 1476, 430, 442, 714, 1772, 1296, 146, 1022, 976, 904, 140, 1236, 586, 1282, 0, 1264, 494, 426, 866, 1052, 1881, 738, 1022, 446, 442, 376, 990, 976, 504, 146, 148, 1294, 1330, 148, 756, 1362, 982, 1740, 1474, 426, 1290, 502, 1642, 1226, 1533, 1836, 1256, 1340, 78, 866, 712, 1272, 1736, 1024, 722, 1581, 1288, 1740, 494, 10, 1272, 625, 671, 1360, 498, 1206, 1280, 1306, 148, 712, 982, 904, 864, 1474, 1514, 1196, 496, 900, 510, 948, 498, 426, 426, 502, 1230, 866, 1206, 1950, 982, 1029, 722, 1040, 1220, 498, 904, 0, 727, 146, 1280, 1022, 1206, 397, 718, 426, 1024, 954, 1282, 504, 894, 1052, 1202, 1518, 946, 976, 900, 76, 1348, 1276, 1220, 996, 1369, 714, 510, 1460, 440, 442, 952, 1348, 1537, 140, 996, 1282, 1486, 510, 762, 1258, 440, 1280, 842, 1466, 900, 496, 74, 504, 840, 440, 1202, 494, 894, 946, 504, 1280, 1726, 1117, 1296, 1198, 1472, 722, 722, 502, 500, 500, 1290, 1222, 1786, 78, 1218, 904, 72, 146, 0, 982, 950, 72, 46, 990, 976, 1296, 502, 370, 78, 502, 1088, 900, 494, 1296, 78, 132, 440, 510, 904, 1226, 1218, 1736, 716, 898, 500, 1346, 578, 72, 16, 894, 1206, 240, 510, 898, 1728, 504, 946, 508, 1052, 440, 1346, 0, 1202, 1510, 132, 504, 35, 1485, 1458, 72, 440, 946, 718, 502, 950, 494, 366, 866, 1024, 1014, 1963, 1958, 760, 1330, 756, 1464, 885, 1282, 718, 1296, 76, 1230, 948, 1941, 908, 1274, 722, 0, 440, 1348, 954, 508, 80, 498, 954, 74, 494, 426, 512, 1304, 1458, 1788, 954, 76, 1065, 1324, 1226, 1270, 504, 990, 504, 140, 714, 510, 1512, 1304, 508, 1022, 502, 1022, 1288, 1765, 1230, 898, 1270, 1464, 1272, 1882, 1296, 144, 1514, 1812, 946, 146, 508, 1218, 508, 1290, 1280, 526, 442, 500, 1468, 716, 954, 821, 366, 1738, 1512, 990, 1888, 1276, 1264, 426, 1294, 1446, 1024, 1198, 946, 904, 1024, 718, 994, 533, 1460, 1810, 254, 510, 498, 257, 1744, 1218, 440, 1812, 1198, 510, 1204, 140, 1516, 80, 502, 1728, 684, 948, 1729, 1933, 1736, 498, 440, 1470, 1749, 76, 78, 1222, 894, 535, 74, 508, 714, 910, 291, 1220, 1276, 898, 976, 716, 1549, 132, 494, 952, 1270, 72, 504, 1272, 1036, 510, 339, 510, 1919, 1274, 1992, 504, 80, 0, 1474, 74, 1270, 1836, 199, 1817, 1476, 982, 146, 1340, 494, 352, 504, 898, 1202, 1284, 1024, 1196, 140, 547, 1042, 338, 1360, 1230, 0, 76, 230, 508, 982, 1198, 500, 1256, 1542, 1280, 1937, 442, 976, 426, 1304, 1264, 1206, 132, 900, 336, 157, 982, 1024, 80, 1456, 712, 1282, 718, 74, 80, 1052, 904, 1122, 0, 1280, 504, 500, 1252, 894, 1064, 1198, 952, 254, 1097, 504, 146, 517, 950, 504, 1274, 442, 1274, 72, 1331, 1456, 976, 1836, 948, 1284, 510, 1306, 498, 1820, 1464, 712, 1280, 1744, 1264, 1198, 894, 714, 1340, 1340, 1067, 1340, 1294, 1024, 1535, 950, 1982, 722, 197, 1365, 948, 1274, 1930, 1230, 712, 990, 76, 1227, 80, 954, 1729, 148, 908, 1294, 950, 894, 900, 718, 1196, 1372, 76, 1052, 430, 80, 72, 146, 1346, 464, 149, 494, 952, 46, 254, 1212, 1304, 1220, 925, 1202, 78, 266, 1726, 1282, 950, 1304, 78, 146, 952, 996, 1346, 78, 442, 1468, 498, 440, 982, 712, 1458, 414, 146, 440, 1340, 494, 716, 146, 148, 1466, 502, 1460, 512, 946, 898, 440, 76, 440, 1204, 1270, 952, 1284, 1222, 1284, 1206, 1836, 140, 593, 1276, 1288, 1362, 996, 74, 718, 1726, 1014, 148, 1629, 442, 976, 718, 898, 1276, 1282, 426, 948, 72, 54, 348, 722, 1786, 682, 1340, 864, 1206, 952, 426, 78, 1127, 1278, 986, 146, 1558, 722, 1022, 494, 653, 793, 1925, 982, 1466, 1304, 426, 140, 1346, 78, 722, 952, 426, 1526, 78, 714, 1024, 72, 1212, 1472, 442, 900, 714, 1288, 1202, 140, 1202, 1456, 1294, 140, 502, 1726, 1270, 1676, 1304, 718, 996, 1196, 1258, 1223, 726, 1278, 1855, 952, 1276, 1296, 955, 309, 1220, 426, 1373, 1272, 1278, 512, 1599, 1264, 1226, 950, 132, 74, 1212, 1022, 442, 716, 1270, 494, 1202, 1544, 440, 1304, 1024, 0, 510, 635, 718, 426, 1466, 864, 1468, 1274, 1258, 722, 1237, 900, 80, 1728, 894, 1736, 1196, 1304, 996, 1304, 1280, 1466, 1346, 864, 952, 714, 1280, 1284, 510, 1472, 0, 0, 123, 1022, 80, 1256, 1291, 718, 946, 148, 996, 1202, 72, 718, 74, 866, 1921, 1360, 76, 1865, 1288, 440, 338, 510, 78, 477, 430, 982, 718, 0, 1954, 654, 1939, 996, 1304, 1256, 904, 1276, 0, 512, 1220, 894, 1218, 442, 144, 496, 586, 1272, 682, 1672, 1964, 1679, 504, 426, 426, 905, 996, 1348, 1810, 430, 430, 950, 78, 1812, 1306, 1294, 148, 1794, 898, 144, 1206, 1744, 212, 736, 1086, 948, 986, 430, 1288, 898, 575, 494, 714, 1198, 1280, 948, 300, 1196, 1676, 1284, 144, 986, 946, 1196, 682, 1230, 1290, 1330, 442, 78, 890, 321, 1891, 1024, 1362, 1274, 716, 990, 1683, 1852, 900, 72, 898, 1270, 1276, 140, 442, 426, 900, 508, 140, 1052, 1356, 1226, 1958, 148, 1022, 440, 1272, 1222, 140, 140, 510, 1272, 954, 152, 994, 904, 1313, 1270, 1256, 146, 1222, 982, 834, 982, 1786, 74, 74, 1212, 78, 1198, 144, 904, 502, 1360, 78, 78, 1276, 716, 1306, 1512, 866, 144, 1976, 994, 78, 1202, 714, 1510, 1954, 864, 76, 440, 1236, 946, 904, 716, 1470, 1692, 1340, 502, 508, 1196, 948, 864, 512, 512, 74, 148, 1272, 1456, 508, 1278, 136, 430, 1450, 1236, 1274, 1272, 144, 1362, 500, 502, 502, 1458, 508, 1296, 1024, 682, 146, 1230, 1282, 712, 74, 1246, 990, 76, 1196, 111, 146, 502, 1024, 1226, 722, 994, 1016, 996, 788, 954, 898, 1276, 1179, 1288, 1988, 72, 1346, 1284, 996, 426, 744, 1362, 1052, 718, 1736, 76, 712, 996, 1512, 1428, 990, 1304, 718, 866, 0, 76, 664, 1218, 1879, 1815, 132, 954, 148, 1458, 596, 508, 140, 994, 1024, 1962, 1494, 990, 718, 986, 430, 1278, 1466, 1340, 512, 76, 347, 1264, 498, 440, 1204, 1597, 442, 1340, 0, 1784, 327, 188, 1306, 950, 251, 1222, 144, 1550, 946, 716, 994, 722, 900, 496, 72, 722, 712, 1230, 1478, 496, 1258, 1294, 752, 321, 508, 510, 1267, 442, 510, 1222, 78, 132, 1202, 866, 146, 1226, 1382, 500, 900, 946, 1196, 504, 1348, 76, 990, 1306, 140, 1256, 318, 1589, 78, 1198, 1294, 1280, 894, 1460, 904, 1264, 1550, 1362, 1738, 80, 954, 1466, 864, 1549, 1258, 1474, 954, 1510, 954, 952, 904, 1024, 1728, 917, 502, 990, 504, 0, 111, 1474, 74, 144, 1591, 148, 990, 510, 714, 1206, 494, 508, 160, 996, 1954, 946, 140, 864, 496, 426, 181, 1348, 1474, 1022, 500, 132, 132, 1024, 178, 498, 939, 1548, 744, 996, 1278, 148, 898, 1272, 440, 1196, 74, 1490, 521, 894, 718, 1599, 148, 900, 148, 1276, 1288, 996, 496, 1222, 140, 76, 954, 1468, 954, 1258, 836, 1294, 1468, 1458, 1341, 510, 762, 946, 510, 1474, 722, 950, 946, 722, 1608, 1510, 1464, 1678, 326, 1855, 0, 788, 180, 1366, 282, 508, 426, 1052, 1502, 1282, 1521, 1510, 952, 976, 1468, 1519, 510, 47, 718, 510, 714, 144, 1294, 1346, 76, 990, 990, 440, 976, 1837, 950, 1906, 976, 1306, 712, 955, 712, 502, 1272, 76, 718, 714, 1202, 736, 716, 1728, 1315, 733, 76, 1150, 1294, 144, 1460, 994, 1515, 498, 986, 1278, 1460, 1118, 502, 948, 161, 146, 1212, 498, 1510, 72, 504, 1212, 982, 1330, 430, 144, 512, 496, 1954, 952, 76, 440, 72, 986, 1052, 1950, 722, 1784, 494, 948, 144, 1613, 156, 78, 900, 1052, 104, 76, 72, 76, 1258, 1304, 72, 442, 105, 78, 894, 1330, 440, 950, 1476, 718, 1270, 547, 176, 1272, 990, 1202, 1854, 144, 496, 146, 1220, 1769, 1222, 894, 426, 1354, 948, 1206, 498, 1360, 144, 1282, 952, 1024, 176, 948, 946, 512, 1274, 1912, 894, 1288, 1270, 1198, 996, 686, 1962, 1236, 554, 494, 1304, 1270, 504, 272, 78, 144, 146, 954, 144, 500, 1627, 1340, 1512, 508} ;
    p2=   {1219, 1509, 717, 1834, 1347, 66, 1944, 1511, 1469, 1509, 897, 711, 1991, 1361, 1991, 662, 249, 1205, 1735, 1727, 1725, 1211, 1195, 717, 1347, 1303, 1361, 1255, 1987, 1999, 1987, 1999, 1459, 44, 1471, 1295, 1811, 1809, 1217, 22, 1991, 865, 1023, 503, 1305, 205, 1347, 1509, 1785, 1995, 1211, 1339, 1229, 1809, 1504, 1993, 995, 951, 439, 552, 1851, 1995, 1211, 1991, 145, 1217, 1735, 1457, 1957, 1961, 1851, 1189, 173, 641, 1853, 501, 1257, 1401, 951, 1467, 497, 1803, 1505, 1997, 1023, 1473, 1987, 1305, 1195, 1847, 1463, 1991, 424, 19, 438, 899, 1051, 1949, 1973, 1847, 1783, 656, 1993, 1997, 1588, 1195, 1735, 1279, 1953, 1942, 1991, 1953, 1219, 1145, 1975, 1987, 1275, 1997, 1973, 945, 1221, 1995, 1811, 1347, 1735, 1347, 131, 311, 1949, 1305, 1273, 1269, 1785, 1847, 1973, 1955, 1735, 1359, 1955, 1999, 993, 995, 1221, 1305, 1872, 1293, 947, 993, 1219, 975, 1853, 1051, 1217, 1305, 1940, 1255, 1851, 1225, 1737, 261, 591, 921, 1021, 1463, 1993, 1509, 1975, 1957, 497, 1201, 959, 865, 1455, 1467, 1289, 1459, 493, 1191, 1293, 1999, 1835, 1995, 1511, 1997, 698, 1995, 1339, 1735, 1853, 1257, 1999, 899, 1295, 1995, 1511, 1999, 1359, 1235, 482, 1953, 1735, 1957, 1287, 1973, 1465, 1811, 1463, 1277, 1229, 1263, 1961, 1201, 495, 1473, 7, 1263, 1955, 1835, 899, 1853, 1051, 1467, 1471, 1277, 1785, 1987, 1991, 1809, 1459, 715, 1987, 364, 1743, 1471, 1948, 1211, 1955, 611, 1993, 1511, 1945, 662, 1859, 1809, 1329, 1303, 945, 1955, 1329, 1287, 1467, 899, 1973, 1567, 1957, 1991, 1809, 1999, 713, 775, 721, 1743, 1467, 949, 1347, 1219, 1737, 713, 1283, 1329, 1361, 1269, 1197, 1275, 1991, 1271, 1255, 1809, 1217, 1993, 1835, 1225, 951, 1473, 1235, 786, 1991, 1263, 945, 1442, 1727, 1735, 1263, 1993, 1277, 1847, 1279, 715, 1235, 1735, 1725, 1853, 1737, 949, 1339, 1737, 1945, 497, 1269, 1991, 1945, 899, 217, 1975, 1361, 1463, 1973, 1263, 1217, 1776, 985, 1275, 1743, 1459, 1225, 1853, 1509, 1328, 1993, 1361, 786, 1543, 692, 1305, 63, 951, 903, 1263, 1263, 647, 1851, 1751, 608, 865, 1211, 1051, 1467, 1221, 1997, 1217, 903, 1051, 1847, 1249, 143, 1463, 1455, 1987, 1293, 1949, 1235, 1743, 1255, 903, 1991, 1783, 1991, 1277, 1283, 721, 1277, 1783, 1953, 1281, 1293, 1205, 1735, 1737, 1997, 1287, 951, 1999, 1602, 1546, 721, 798, 439, 711, 1987, 1957, 1455, 1975, 599, 216, 1471, 1008, 1459, 1830, 1997, 1289, 1975, 1727, 1957, 1281, 1121, 1273, 98, 1739, 847, 1955, 1835, 1997, 1953, 1955, 1323, 1459, 1743, 1991, 1957, 1221, 1945, 1991, 1835, 1279, 1312, 1469, 1991, 995, 1257, 1289, 1851, 1257, 1945, 1997, 1273, 711, 1847, 285, 1895, 143, 1283, 1743, 1957, 1289, 1203, 1961, 1949, 1980, 975, 906, 1987, 1281, 878, 893, 863, 721, 1505, 1949, 1513, 1473, 1293, 1279, 897, 981, 949, 591, 491, 1949, 1217, 1735, 1847, 1743, 1847, 1197, 1211, 1955, 70, 1785, 1737, 989, 1995, 1011, 293, 1459, 1459, 1197, 1263, 953, 1021, 1473, 1021, 1463, 1217, 153, 1961, 1241, 1735, 1277, 953, 1953, 1991, 227, 493, 1445, 1809, 1957, 1955, 1225, 903, 1987, 1545, 425, 899, 981, 1985, 1753, 1957, 706, 1465, 143, 1735, 1457, 1443, 429, 1991, 865, 1509, 1987, 1513, 1735, 614, 711, 1163, 1975, 1851, 1273, 1358, 1303, 1975, 1467, 1305, 1957, 1361, 1743, 1997, 1953, 1339, 1991, 1419, 1145, 1148, 1457, 1195, 1329, 1811, 1513, 1217, 1973, 1473, 944, 1359, 1961, 1811, 1201, 435, 1459, 942, 503, 1508, 1467, 1737, 1467, 1021, 1928, 903, 1997, 1739, 1275, 507, 1303, 641, 1211, 1739, 1473, 1465, 1953, 849, 1201, 1513, 1874, 1973, 1987, 893, 1211, 1361, 1945, 1281, 1809, 1636, 1809, 1509, 1835, 497, 1459, 945, 1785, 1945, 1999, 1949, 1993, 1785, 1310, 1811, 1851, 1961, 1289, 1505, 975, 1049, 1612, 1457, 1465, 1023, 1995, 1347, 1197, 1811, 1289, 1219, 1511, 1201, 1269, 296, 1737, 530, 1851, 1851, 1811, 1513, 862, 1329, 1471, 1743, 1811, 1995, 1469, 989, 715, 1339, 1217, 980, 1271, 1303, 1257, 1205, 1999, 441, 993, 1991, 1995, 145, 1866, 1835, 1973, 1455, 903, 1505, 1329, 1949, 1483, 1853, 897, 1275, 1773, 1471, 1997, 1345, 1221, 1999, 1735, 1269, 591, 1471, 1195, 1953, 995, 721, 1811, 1743, 1916, 859, 1295, 487, 1743, 381, 1205, 1229, 985, 1255, 711, 1961, 1809, 1273, 759, 1505, 1345, 1783, 1975, 493, 1509, 1783, 1643, 1329, 1724, 1853, 1295, 1465, 897, 1273, 899, 1459, 1809, 1345, 1347, 1648, 1999, 1785, 1221, 33, 1953, 628, 672, 1961, 951, 1993, 1511, 1465, 1975, 1329, 1201, 1279, 1471, 1957, 1743, 1467, 1743, 1281, 1303, 1279, 1339, 953, 1203, 1275, 1329, 903, 1991, 1961, 1511, 1048, 945, 1045, 1949, 1023, 1225, 1955, 728, 975, 1993, 1287, 1953, 402, 865, 1287, 1201, 1835, 1735, 1303, 903, 1459, 1847, 1529, 1853, 1957, 1257, 897, 1465, 1457, 1847, 1991, 1370, 1021, 1511, 1945, 509, 1847, 1737, 1737, 1708, 1853, 1197, 1465, 1499, 1457, 765, 1853, 1263, 1295, 849, 1809, 1347, 1809, 1217, 1851, 847, 1295, 1725, 1339, 1279, 1739, 1271, 1737, 1961, 1132, 1993, 1949, 1727, 1273, 1851, 899, 715, 1219, 1851, 1339, 1811, 1021, 1955, 1973, 511, 1347, 1811, 1473, 993, 1739, 69, 1281, 1293, 1811, 1197, 387, 893, 1203, 1089, 1455, 1023, 1513, 143, 1987, 903, 1281, 981, 1973, 1785, 1847, 1345, 1463, 1975, 1847, 579, 1455, 17, 1975, 1263, 245, 1469, 1961, 1735, 717, 1211, 1471, 1739, 947, 1957, 75, 1263, 1809, 425, 1465, 42, 1500, 1467, 1727, 1235, 1197, 993, 1305, 1945, 1257, 407, 1359, 1257, 1019, 1970, 1995, 765, 1467, 761, 1975, 886, 1295, 1811, 1957, 1457, 1305, 1221, 1942, 915, 1359, 1973, 1835, 1999, 1505, 1195, 711, 1811, 717, 1465, 1345, 511, 1847, 1347, 1835, 1473, 1799, 1359, 1505, 1080, 1325, 1739, 1271, 1953, 1739, 1995, 1975, 1329, 1953, 1847, 1847, 897, 1465, 717, 1469, 1295, 1770, 1513, 1225, 1283, 1949, 1345, 1913, 1509, 1277, 1735, 1853, 1305, 1211, 975, 1273, 1255, 1473, 1457, 531, 1201, 507, 1505, 1511, 1847, 828, 405, 1955, 1783, 1295, 1903, 1305, 1973, 711, 1467, 1447, 1739, 1505, 1293, 1329, 1991, 1743, 1279, 710, 1511, 1997, 271, 1945, 1195, 258, 1949, 1735, 953, 1997, 1201, 1961, 1205, 1257, 1529, 441, 893, 1997, 685, 1513, 1734, 1940, 1853, 711, 711, 1505, 1750, 1467, 1463, 1853, 1997, 706, 1281, 1229, 1509, 911, 292, 1361, 1281, 1809, 1973, 985, 1670, 1345, 1997, 1847, 1295, 951, 1229, 1293, 1039, 993, 364, 511, 1928, 1283, 1997, 1743, 1973, 893, 1955, 893, 1953, 1995, 202, 1830, 1477, 1279, 507, 1727, 1851, 353, 863, 1279, 1961, 1957, 1277, 1509, 495, 612, 1043, 405, 1457, 1467, 1851, 77, 249, 1735, 1853, 1811, 1203, 1955, 1545, 1997, 1940, 1217, 1459, 947, 1997, 1277, 1271, 1509, 1783, 407, 174, 1303, 1195, 1219, 1955, 1465, 1725, 1023, 1739, 717, 1205, 989, 1123, 863, 1809, 981, 1277, 1253, 1229, 1149, 1275, 1217, 317, 1102, 1023, 439, 518, 1051, 1361, 1973, 1051, 1465, 1197, 1334, 1975, 1287, 1945, 1051, 1975, 947, 1851, 1735, 1829, 1961, 1023, 1289, 1991, 1853, 1339, 1195, 1201, 1961, 1459, 1070, 1853, 1785, 1993, 1690, 1811, 1983, 1785, 204, 1448, 1271, 1961, 1931, 1465, 1345, 1263, 1743, 1228, 1459, 1255, 1730, 439, 913, 1987, 1987, 1221, 1289, 1217, 1853, 1379, 1847, 1853, 993, 1785, 903, 713, 1359, 475, 150, 1295, 1993, 67, 265, 1975, 1469, 1853, 928, 1211, 951, 271, 1987, 1945, 1999, 1961, 499, 1257, 1975, 1739, 1465, 1987, 1273, 1811, 1293, 1835, 1785, 1201, 1463, 415, 1953, 1459, 1361, 495, 1513, 1847, 713, 1999, 1737, 1737, 1957, 1513, 1217, 951, 951, 1455, 1229, 1359, 1225, 1305, 1463, 1811, 1467, 1953, 903, 610, 1847, 1993, 1473, 1999, 1973, 1293, 1995, 1015, 953, 1630, 993, 1225, 1345, 1275, 1809, 1785, 1995, 1469, 1229, 65, 353, 947, 1957, 689, 1851, 993, 1283, 1051, 1955, 507, 1132, 1359, 1743, 1345, 1667, 1303, 1835, 1847, 670, 796, 1926, 1347, 1955, 1339, 1021, 1987, 1975, 1051, 1219, 1463, 441, 1527, 717, 945, 1271, 953, 1347, 1975, 1727, 1505, 1513, 1739, 1743, 497, 1471, 1995, 1851, 1225, 1467, 1737, 1997, 1687, 1945, 1463, 1217, 1229, 1809, 1224, 731, 1471, 1938, 1305, 1345, 1725, 974, 310, 1289, 893, 1378, 1295, 1737, 1465, 1628, 1295, 1995, 1329, 497, 1455, 1217, 1257, 1283, 993, 1347, 1361, 1295, 1545, 1785, 1785, 1347, 499, 1257, 700, 1459, 1289, 1513, 1195, 1953, 1469, 1811, 1235, 1238, 1201, 507, 1847, 1513, 1955, 1987, 1735, 1735, 1953, 1999, 1973, 1727, 1225, 1785, 1725, 1953, 1847, 1219, 1811, 497, 145, 124, 1275, 501, 1509, 1292, 897, 1273, 1203, 1853, 1277, 981, 1229, 1727, 1345, 1926, 1953, 1359, 1870, 1361, 1505, 365, 1283, 1949, 478, 863, 1999, 1203, 495, 1957, 669, 1942, 1783, 1987, 1281, 1283, 1513, 1993, 1851, 1513, 1217, 1975, 1993, 1271, 1851, 611, 1287, 683, 1673, 1965, 1682, 1347, 903, 863, 922, 1283, 1459, 1973, 949, 1993, 1467, 1361, 1973, 1359, 1359, 1279, 1795, 1505, 1511, 1471, 1961, 213, 859, 1161, 1225, 1737, 511, 1743, 953, 576, 1975, 947, 1997, 1329, 1275, 301, 1295, 1685, 1347, 1955, 1205, 1287, 1203, 697, 1339, 1359, 1735, 495, 1511, 891, 324, 1900, 1957, 1469, 1473, 1991, 1469, 1684, 1853, 1961, 1469, 951, 1999, 1785, 1469, 1287, 499, 1203, 1957, 1255, 1281, 1357, 1277, 1975, 1737, 1991, 1205, 1973, 1509, 1999, 1459, 717, 1961, 1997, 423, 995, 1991, 1328, 1273, 1287, 493, 1359, 1295, 849, 1961, 1973, 717, 1339, 1255, 1293, 1277, 493, 1023, 1853, 1511, 1345, 1465, 1511, 899, 1361, 1955, 1835, 1847, 1987, 1737, 1275, 1739, 1257, 1785, 1995, 1255, 1217, 1287, 1511, 953, 1851, 863, 1851, 1707, 1473, 1473, 1975, 1783, 1219, 1283, 1737, 1949, 1277, 507, 1737, 1851, 863, 1511, 137, 1255, 1451, 1725, 1975, 1463, 1743, 1727, 945, 1809, 1953, 1953, 1467, 1463, 1281, 687, 1505, 1255, 1811, 1225, 1255, 1251, 1203, 1991, 1957, 112, 1853, 1051, 1853, 1295, 1835, 1735, 1017, 1997, 841, 1277, 1219, 1735, 1180, 1853, 1991, 1505, 1471, 1785, 1473, 1255, 839, 1467, 1275, 947, 1743, 949, 1987, 1329, 1961, 1441, 1975, 1509, 1329, 947, 1505, 981, 669, 1225, 1914, 1834, 1737, 1509, 1957, 1811, 597, 1961, 1271, 1811, 1361, 1991, 1497, 1847, 1021, 1051, 945, 1785, 1785, 1987, 1257, 429, 356, 1463, 1197, 1997, 1945, 1634, 1339, 1469, 1997, 1957, 334, 209, 1469, 1303, 418, 1305, 509, 1669, 1205, 1295, 1277, 1811, 1263, 509, 1471, 985, 1205, 1505, 1501, 511, 1465, 1465, 759, 408, 865, 1289, 1268, 1305, 1465, 1467, 1277, 1455, 1219, 1275, 1339, 1339, 1445, 1973, 1273, 1459, 1945, 1467, 1949, 1203, 1229, 1783, 511, 1973, 319, 1644, 1281, 1219, 1949, 1305, 1289, 1993, 1229, 1269, 1555, 1835, 1997, 1949, 1851, 1727, 903, 1674, 1271, 1973, 1217, 1975, 1955, 1511, 1467, 1289, 1973, 920, 1465, 1293, 1809, 715, 114, 1997, 1975, 1021, 1592, 1221, 1509, 1995, 1467, 1809, 1957, 995, 165, 1275, 1973, 1195, 1957, 1737, 1469, 1809, 218, 1847, 1727, 1023, 1275, 949, 1269, 1945, 219, 1279, 942, 1689, 843, 1725, 1455, 1275, 1283, 1347, 1737, 1513, 953, 1491, 522, 1783, 1991, 1630, 1219, 1725, 1305, 1329, 1957, 1987, 1271, 1361, 1725, 507, 1511, 1991, 1995, 1359, 837, 1997, 1743, 1973, 1342, 1329, 769, 1275, 1339, 1949, 1359, 1473, 1023, 1853, 1621, 1945, 1465, 1687, 407, 1860, 711, 833, 227, 1447, 293, 1195, 1277, 1201, 1503, 1737, 1528, 1735, 1735, 1195, 1509, 1528, 1785, 50, 1783, 1205, 1225, 981, 1295, 1993, 1945, 1851, 1339, 893, 1945, 1838, 1211, 1909, 1505, 1727, 1727, 956, 1785, 897, 1809, 975, 1269, 1205, 1999, 853, 1271, 1975, 1316, 860, 721, 1163, 1991, 975, 1783, 1743, 1722, 945, 1211, 1467, 1835, 1119, 1271, 1473, 164, 863, 1955, 865, 1835, 711, 1505, 1995, 1283, 1471, 1743, 1953, 1999, 1361, 1975, 1021, 1303, 1221, 1305, 1305, 1995, 1993, 1287, 1955, 499, 1975, 1945, 1614, 247, 1287, 1513, 1513, 127, 1811, 1023, 497, 1973, 1851, 1973, 1225, 116, 903, 1505, 1785, 863, 1973, 1501, 1509, 1725, 552, 177, 1473, 1973, 1347, 1949, 1201, 1203, 721, 1735, 1770, 1785, 1851, 1225, 1355, 1305, 1455, 1359, 1785, 1225, 1305, 1743, 1511, 225, 989, 1219, 1217, 1737, 1913, 1809, 1735, 1737, 1255, 1279, 687, 1997, 1953, 557, 1727, 1465, 1339, 711, 319, 1271, 711, 947, 1269, 865, 1255, 1628, 1809, 1513, 509};
	p3 = 336;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------



	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Correct parentheses sequences can be defined recursively as follows:
// 
// The empty string "" is a correct sequence.
// If "X" and "Y" are correct sequences, then "XY" (the concatenation of X and Y) is a correct sequence.
// If "X" is a correct sequence, then "(X)" is a correct sequence.
// Each correct parentheses sequence can be derived using the above rules.
// 
// Examples of correct parentheses sequences include "", "()", "()()()", "(()())", and "(((())))".
// 
// 
// You are given a string s.
// You are also given vector <int>s L and R, each with the same number of elements.
// These encode a set of conditions.
// For each valid i, you have to satisfy the following condition:
// the substring of s that begins at the 0-based index L[i] and ends at the 0-based index R[i] must be a correct parentheses sequence.
// 
// 
// 
// You can only modify s in one way: in each step you can choose two characters of s and swap them.
// Return the minimal number of swaps needed to produce a string that satisfies all the given conditions.
// If it is impossible, return -1 instead.
// 
// DEFINITION
// Class:ParenthesesDiv1Medium
// Method:minSwaps
// Parameters:string, vector <int>, vector <int>
// Returns:int
// Method signature:int minSwaps(string s, vector <int> L, vector <int> R)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 2,000 characters, inclusive.
// -Each character in s will be '(' or ')'.
// -L will contain between 1 and 2,000 elements, inclusive.
// -L and R will contain the same number of elements.
// -For each valid i, 0 <= L[i] <= R[i] < |s|.
// 
// 
// EXAMPLES
// 
// 0)
// ")("
// {0,0,0,0}
// {1,1,1,1}
// 
// Returns: 1
// 
// We have four identical conditions.
// Each of them tells us that the substring that begins at index 0 and ends at index 1 must be a correct parentheses sequence.
// We can satisfy all conditions by swapping s[0] with s[1].
// This swap produces the string "()".
// 
// 
// 1)
// "(())"
// {0,2}
// {1,3}
// 
// Returns: 1
// 
// The only way to satisfy both conditions is to change s into "()()".
// This can be done in 1 swap: by swapping s[1] with s[2].
// 
// 
// 2)
// "(((())"
// {0,2}
// {1,3}
// 
// Returns: 2
// 
// This time we do swap(s[1],s[4]) and swap(s[3],s[5]).
// 
// 3)
// "((((((((("
// {0,2}
// {1,3}
// 
// Returns: -1
// 
// 
// 
// 4)
// "()()()()"
// {0,0,0,0,2,2,2,4,4,6}
// {1,3,5,7,3,5,7,5,7,7}
// 
// Returns: 0
// 
// 
// 
// 5)
// ")()(()()((())()()()()()()))(()())()()()("
// {3,5,17,25,35}
// {12,10,30,30,38}
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
