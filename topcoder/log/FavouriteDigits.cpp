#include <bits/stdc++.h>
using namespace std;

static const double EPS = 1e-14;
static const long long INF = 1e18;

#define pb push_back
#define rep(i,n) for(int i = 0; i < n; i++)
#define all(x) begin(x), end(x)
#define Min(x) *min_element(all(x))
#define Max(x) *max_element(all(x))
using ll = long long; using vll = vector<ll>; using vi = vector<int>;
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { if (!v.empty()) { o << '['; copy(v.begin(), v.end(), ostream_iterator<T>(o, ", ")); o << "]"; } return o; }
typedef pair<int, int> P;

#define MAX_N 100005

class FavouriteDigits {
public:
    vll nd;
    ll d1, d2, c1, c2;
    bool valid(vll& x, ll astnum) {
        vll c(10, 0);
        bool zeroflag = true;
        for (int i = x.size() - 1; i >= astnum; i--) {
            if (zeroflag && !x[i])
                continue;
            zeroflag = false;
            c[x[i]]++;
        }

        ll l1 = max<ll>(0, c1 - c[d1]);
        ll l2 = max<ll>(0, c2 - c[d2]);
        if (l1 + l2 > astnum)
            return false;

        vll part;
        rep(i, l1) part.pb(d1);
        rep(i, l2) part.pb(d2);
        rep(i, astnum - l1 - l2) part.pb(0);
        sort(all(part), greater<ll>());

        rep(i, astnum)
            x[i] = part[i];
        return true;
    }
    ll conv(vll& x) {
        ll ret = 0;
        rep(i, x.size()) 
            ret += x[i] * (pow(10, i));
        return ret;
    }
    
	long long findNext(long long N, int digit1, int count1, int digit2, int count2) {
        if (digit1 > digit2) {
            swap(digit1, digit2);
            swap(count1, count2);
        }
        d1 = digit1; d2 = digit2; c1 = count1; c2 = count2;
        
        while(N) 
            nd.pb(N % 10), N /= 10;
        while (nd.size() <= 17) {
            nd.pb(0);
        }

        if (valid(nd, 0)) {
            return conv(nd);
        }

        rep(i, nd.size()) {
            for (ll j = nd[i] + 1; j <= 9; j++) {
                vll tmpnd = nd;
                tmpnd[i] = j;
                ll ast = i;
                if (valid(tmpnd, ast))
                    return conv(tmpnd);
            }
        }

        return 0;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, int p1, int p2, int p3, int p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	FavouriteDigits *obj;
	long long answer;
	obj = new FavouriteDigits();
	clock_t startTime = clock();
	answer = obj->findNext(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	long long p0;
	int p1;
	int p2;
	int p3;
	int p4;
	long long p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 47ll;
	p1 = 1;
	p2 = 0;
	p3 = 2;
	p4 = 0;
	p5 = 47ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 47ll;
	p1 = 5;
	p2 = 0;
	p3 = 9;
	p4 = 1;
	p5 = 49ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 47ll;
	p1 = 5;
	p2 = 0;
	p3 = 3;
	p4 = 1;
	p5 = 53ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 47ll;
	p1 = 2;
	p2 = 1;
	p3 = 0;
	p4 = 2;
	p5 = 200ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 123456789012345ll;
	p1 = 1;
	p2 = 2;
	p3 = 2;
	p4 = 4;
	p5 = 123456789012422ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 92ll;
	p1 = 1;
	p2 = 1;
	p3 = 0;
	p4 = 0;
	p5 = 100ll;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = 47ll;
	p1 = 4;
	p2 = 8;
	p3 = 7;
	p4 = 7;
	p5 = 444444447777777ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Tetka Rapotacka just heard a juicy rumor about one of her neighbors: poor Jachym has lost N kacky (their local monetary unit) on a slot machine yesterday.
// Tetka Rapotacka now plans to share this rumor with everyone, including Tetka Klepetacka.
// Tetka Rapotacka has two favourite digits: digit1 and digit2.
// She only likes numbers that contain at least count1 occurrences of digit1 and at least count2 occurrences of digit2.
// When gossiping, she only uses numbers she likes.
// So if she does not like the number N, she will increase it until she finds a number that she likes.
// 
// 
// You are given the long long N and the four ints digit1, count1, digit2, and count2.
// Return the smallest integer that is greater than or equal to N, contains at least count1 occurrences of digit digit1, and at least count2 occurrences of digit digit2.
// 
// 
// DEFINITION
// Class:FavouriteDigits
// Method:findNext
// Parameters:long long, int, int, int, int
// Returns:long long
// Method signature:long long findNext(long long N, int digit1, int count1, int digit2, int count2)
// 
// 
// NOTES
// -The constraints guarantee that the return value will always fit into a long long.
// 
// 
// CONSTRAINTS
// -N will be between 1 and 10^15 - 1, inclusive.
// -digit1 will be between 0 and 9, inclusive.
// -digit2 will be between 0 and 9, inclusive.
// -digit1 and digit2 will not be equal.
// -count1 will be at least 0.
// -count2 will be at least 0.
// -count1+count2 will be at most 15.
// 
// 
// EXAMPLES
// 
// 0)
// 47
// 1
// 0
// 2
// 0
// 
// Returns: 47
// 
// As count1=0 and count2=0, Tetka Rapotacka likes all numbers.
// 
// 1)
// 47
// 5
// 0
// 9
// 1
// 
// Returns: 49
// 
// The number has to contain the digit 9. The next number that contains this digit is 49.
// 
// 2)
// 47
// 5
// 0
// 3
// 1
// 
// Returns: 53
// 
// 
// 
// 3)
// 47
// 2
// 1
// 0
// 2
// 
// Returns: 200
// 
// The correct return value may have more digits than N.
// 
// 4)
// 123456789012345
// 1
// 2
// 2
// 4
// 
// Returns: 123456789012422
// 
// 
// 
// 5)
// 92
// 1
// 1
// 0
// 0
// 
// Returns: 100
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
