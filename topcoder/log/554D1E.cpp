#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class TheBrickTowerEasyDivOne {
    public:
        int find(int rn, int rh, int bn, int bh) {
            if (rh != bh) { 
                return min(rn, bn) + min(rn + 1, bn) + min(rn, bn + 1);
            } else {
                return min(rn, bn) + max(min(rn + 1, bn), min(rn, bn + 1));
            }
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TheBrickTowerEasyDivOne *obj;
	int answer;
	obj = new TheBrickTowerEasyDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 1;
	p1 = 2;
	p2 = 3;
	p3 = 4;
	p4 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 4;
	p1 = 4;
	p2 = 4;
	p3 = 7;
	p4 = 12;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 7;
	p1 = 7;
	p2 = 4;
	p3 = 4;
	p4 = 13;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 47;
	p1 = 47;
	p2 = 47;
	p3 = 47;
	p4 = 94;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// John and Brus are building towers using toy bricks.
// They have two types of bricks: red and blue ones.
// The number of red bricks they have is redCount and each of them has a height of redHeight.
// The number of blue bricks they have is blueCount and each of them has a height of blueHeight.
// 
// 
// 
// A tower is built by placing bricks one atop another.
// A brick can be placed either on the ground, or on a brick of a different color.
// (I.e., you are not allowed to put two bricks of the same color immediately on one another.)
// A tower has to consist of at least one brick.
// The height of a tower is the sum of all heights of bricks that form the tower.
// Two towers are considered to be different if they have different heights.
// (Two towers of the same height are considered the same, even if they differ in the number and colors of bricks that form them.)
// 
// 
// 
// You are given the ints redCount, redHeight, blueCount and blueHeight.
// Return the number of different towers that John and Brus can build.
// 
// 
// 
// DEFINITION
// Class:TheBrickTowerEasyDivOne
// Method:find
// Parameters:int, int, int, int
// Returns:int
// Method signature:int find(int redCount, int redHeight, int blueCount, int blueHeight)
// 
// 
// CONSTRAINTS
// -redCount will be between 1 and 474,747,474, inclusive.
// -redHeight will be between 1 and 474,747,474, inclusive.
// -blueCount will be between 1 and 474,747,474, inclusive.
// -blueHeight will be between 1 and 474,747,474, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 2
// 3
// 4
// 
// Returns: 4
// 
// John and Brus have 1 red brick of height 2 and 3 blue bricks of height 4. Using these bricks, it's possible to build 4 towers:
// red (height 2);
// blue (height 4);
// red, blue (height 6);
// blue, red, blue (height 10).
// 
// 1)
// 4
// 4
// 4
// 7
// 
// Returns: 12
// 
// 2)
// 7
// 7
// 4
// 4
// 
// Returns: 13
// 
// 3)
// 47
// 47
// 47
// 47
// 
// Returns: 94
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
