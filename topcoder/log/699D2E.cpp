#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
void printbits(ll mask, ll n) { rep(i, n) { cout << !!(mask & (1ll << i)); } cout << endl; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class UpDownHiking {
    public:
        int maxHeight(int n, int a, int b) {
            ll max_height = -1;
            rep(i, n) {
                if (a * i - (b * (n-i)) > 0) { 
                    break;
                }
                chmax(max_height, a * i);
            }

            rep(i, n) {
                if (b * i - (a * (n-i)) > 0) { 
                    break;
                }
                chmax(max_height, b * i);
            }
            return max_height;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	UpDownHiking *obj;
	int answer;
	obj = new UpDownHiking();
	clock_t startTime = clock();
	answer = obj->maxHeight(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 7;
	p2 = 10;
	p3 = 10;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = 40;
	p2 = 30;
	p3 = 80;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = 50;
	p2 = 1;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 3;
	p1 = 42;
	p2 = 42;
	p3 = 42;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 20;
	p1 = 7;
	p2 = 9;
	p3 = 77;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
		// ----- test 4 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
			// ----- test 4 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = 2;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
				// ----- test 4 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
					// ----- test 4 -----
	disabled = false;
	p0 = 3;
	p1 = 3;
	p2 = 2;
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Limak is going to spend N days in the mountains.
// The days will be numbered 1 through N.
// In the morning of day 1 Limak starts his hike in the base camp at altitude 0.
// In the evening of day N Limak must return back to altitude 0.
// Limak carries a tent and a sleeping bag, so during the hike he can sleep at any altitude.
// 
// 
// During each day of his hike, Limak either ascends or descends.
// (Each day he has to choose one or the other, he cannot both ascend and descend on the same day.)
// Additionally, there are two constraints:
// 
// He cannot ascend too quickly, to make acclimatization to higher altitudes easier. More precisely, each day spent ascending can increase his altitude by at most A.
// He cannot descend too quickly, otherwise his knees hurt. More precisely, each day spent descending can decrease his altitude by at most B.
// 
// 
// For example, suppose that Limak's altitude in the morning is 470, and suppose that A=100 and B=200. In the evening of the same day Limak can be anywhere between the altitudes 270 and 570, inclusive.
// 
// 
// You are given the ints N, A, and B.
// Return the largest altitude Limak can reach.
// 
// DEFINITION
// Class:UpDownHiking
// Method:maxHeight
// Parameters:int, int, int
// Returns:int
// Method signature:int maxHeight(int N, int A, int B)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 50, inclusive.
// -A and B will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 7
// 10
// 
// Returns: 10
// 
// The highest altitude Limak can reach is 10.
// Here is one way to do so:
// 
// On day 1, Limak will start at altitude 0 and he will ascend to altitude 7.
// On day 2, Limak will start at altitude 7 and he will ascend to altitude 10.
// On day 3, Limak will start at altitude 10 and he will descend back to altitude 0.
// 
// 
// 1)
// 5
// 40
// 30
// 
// Returns: 80
// 
// In the five days of this hike Limak can change his altitude by +40, +40, -27, -27, and -26.
// The highest altitude reached is 80.
// 
// 2)
// 2
// 50
// 1
// 
// Returns: 1
// 
// Even though Limak can climb quickly, moving up even by 50 in one day, he can move down by at most 1 in the second day.
// So, in the first day he should climb by 1 only.
// 
// 3)
// 3
// 42
// 42
// 
// Returns: 42
// 
// 
// 
// 4)
// 20
// 7
// 9
// 
// Returns: 77
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
