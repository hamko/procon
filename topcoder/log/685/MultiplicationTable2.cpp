#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
using ll = long long; using vll = vector<ll>;

class MultiplicationTable2 {
    public:
        int minimalGoodSet(vector <int> table) {
            ll n = sqrt(table.size());
            ll ret = n;
            rep(i, n) {
                vll s; s.pb(table[i*n+i]);
                again:
                rep(j, s.size())  rep(h, s.size()) 
                    if (find(all(s), table[s[j]*n+s[h]]) == s.end()) {
                        s.pb(table[s[j]*n+s[h]]); goto again;
                    }
                chmin(ret, s.size());
            }
            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	MultiplicationTable2 *obj;
	int answer;
	obj = new MultiplicationTable2();
	clock_t startTime = clock();
	answer = obj->minimalGoodSet(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,1,2,3,1,0,3,2,2,0,1,3,1,2,3,0};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,1,2,3,1,2,3,0,2,3,0,1,3,0,1,2};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {1,1,1,1,2,2,2,2,3,3,3,3,0,0,0,0};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is creating a new binary operation.
// 
// The operation will be denoted $ and it will be defined on the finite set S = {0, 1, 2, ..., n-1}.
// I.e., for each ordered pair (i, j) of elements of S the operation (i $ j) will return some element of S.
// 
// For example, we can have S = {0, 1}, and we can define that (0 $ 0) = 0, (0 $ 1) = 1, (1 $ 0) = 0, and (1 $ 1) = 0.
// 
// Note that Ciel's operation is not necessarily symmetric.
// In other words, it is possible that for some i and j the operations (i $ j) and (j $ i) return two different values.
// 
// A nice concise description of the operation $ is its "multiplication table": a square table where in row i and column j we have the value (i $ j).
// You are given this "multiplication table" encoded as a vector <int> table with n^2 elements.
// For each valid i and j the operation (i $ j) returns the value table[i*n+j].
// 
// A subset T of S is called good if it has the following property:
// for any two elements i and j in T, (i $ j) is also in T.
// 
// Find and return the minimal size of a good subset of S.
// Note that the answer is always defined, as there always are some good subsets.
// For example, the entire set S is always good.
// 
// DEFINITION
// Class:MultiplicationTable2
// Method:minimalGoodSet
// Parameters:vector <int>
// Returns:int
// Method signature:int minimalGoodSet(vector <int> table)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -table will contain exactly n*n elements.
// -Each element in table will be between 0 and n-1, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,1,2,3,
//  1,0,3,2,
//  2,0,1,3,
//  1,2,3,0}
// 
// Returns: 2
// 
// The smallest Good set is {0,1}, we can verify:
// 
// 0 $ 0 = 1
// 0 $ 1 = 1
// 1 $ 0 = 1
// 1 $ 1 = 0
// 
// 
// 
// 1)
// {0,1,2,3,
//  1,2,3,0,
//  2,3,0,1,
//  3,0,1,2}
// 
// Returns: 1
// 
// This time the answer is 1 since {0} is a Good set.
// 
// 2)
// {1,1,1,1,
//  2,2,2,2,
//  3,3,3,3,
//  0,0,0,0}
// 
// Returns: 4
// 
// Now the only Good set is {0,1,2,3}.
// 
// 3)
// {0}
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
