#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class ShoppingSurveyDiv1 {
    public:
        int minValue(int n, int k, vector <int> s_) {
            rep(i, n + 1) {
                vi s = s_;
                rep(j, s.size()) {
                    s[j] = max<ll>(s[j] - i, 0);
                }
                // n-i people buy k-1 items
                if (*max_element(all(s)) <= n-i && accumulate(all(s), 0ll) <= (k-1)*(n-i)) 
                    return i;
            }
            return n;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	ShoppingSurveyDiv1 *obj;
	int answer;
	obj = new ShoppingSurveyDiv1();
	clock_t startTime = clock();
	answer = obj->minValue(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <int> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 10;
	p1 = 2;
	p2 = {1,2,3};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = 2;
	p2 = {1,2,3};
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 4;
	p1 = 4;
	p2 = {4,4,4,2};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 20;
	p1 = 3;
	p2 = {1,10,3,4,8,15,3,16,18,2,7,3};
	p3 = 10;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 4;
	p1 = 2;
	p2 = {1,2,1,1,3,1,2,2,1,2,1};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 2;
	p1 = 3;
	p2 = {1,1,1,2};
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A store sells M different items, conveniently numbered 0 through M-1.
// For a shopping survey you interviewed N customers.
// Each customer responded to the survey with a list of items they've bought.
// Each customer bought at most one of each item.
// It is possible that some customers did not buy anything at all.
// 
// 
// 
// After collecting the responses, you've summed up the results and found that s[i] people have bought item i.
// Due to an unfortunate accident, you've then lost the actual survey responses.
// All you have left are the values s[i] you computed.
// 
// 
// 
// You are now supposed to report the number of big shoppers among the survey respondents.
// A big shopper is defined as a customer who has bought K or more items.
// Of course, having lost the detailed responses, you might be unable to determine the actual number of big shoppers.
// 
// 
// 
// You are given the ints N and K, and the vector <int> s with M elements.
// Compute and return the smallest possible number of big shoppers.
// 
// 
// DEFINITION
// Class:ShoppingSurveyDiv1
// Method:minValue
// Parameters:int, int, vector <int>
// Returns:int
// Method signature:int minValue(int N, int K, vector <int> s)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 500, inclusive.
// -s will contain between 1 and 500 elements, inclusive.
// -Each element in s will be between 0 and N, inclusive.
// -K will be between 1 and the length of s, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 10
// 2
// {1, 2, 3}
// 
// Returns: 0
// 
// There are 10 customers.
// Item 0 was bought by 1 customer, item 1 by 2 customers, and item 2 by 3 of the customers.
// A big shopper is a customer who bought at least 2 items.
// Given this data it is possible that there are no big shoppers at all.
// (There could have been six customers who bought one item each, and four other customers who didn't buy anything at all.)
// 
// 1)
// 5
// 2
// {1, 2, 3}
// 
// Returns: 1
// 
// 
// 
// 2)
// 4
// 4
// {4, 4, 4, 2}
// 
// Returns: 2
// 
// 
// 
// 3)
// 20
// 3
// {1, 10, 3, 4, 8, 15, 3, 16, 18, 2, 7, 3}
// 
// Returns: 10
// 
// 
// 
// 4)
// 4
// 2
// {1, 2, 1, 1, 3, 1, 2, 2, 1, 2, 1}
// 
// Returns: 2
// 
// 
// 
// 5)
// 2
// 3
// {1, 1, 1, 2}
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
