#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { if (!v.empty()) { o << '['; copy(v.begin(), v.end(), ostream_iterator<T>(o, ", ")); o << "\b\b]"; } return o; }
using ll = long long; using ld = long double; using vll = vector<ll>; using vld = vector<ld>;
typedef pair<ll, ll> P;

static const double EPS = 1e-14;
static const long long INF = 1e18;
#define MAX_N 100005

// 浮動小数点二分探索
ld BinarySearchReal(ld rl, ld rr, function<bool(ld)> f) { 
    rep(i, 200) { ld m = (rl + rr) / 2; f(m)?rr=m:rl=m; }
    return rl;
}
void BinarySearchRealInteractive(ld rl, ld rr, function<bool(ld)> f) { 
    while (1) {
        cout << "####" << endl;
        ld tmp; cin >> tmp;
        if (rl > tmp) {cout << "Out of range: too small" << endl; continue; }
        if (rr < tmp) {cout << "Out of range: too large" << endl; continue; }
        ld ret = f(tmp); cout << tmp << " : " << ret << endl;
    }
}
class WaterTank {
    public:
        double minOutputRate(vector <int> t_, vector <int> x__, int C) {
            vector <ld> t(t_.size()), x_(x__.size()); rep(i, t_.size()) t[i] = t_[i]; rep(i, x__.size()) x_[i] = x__[i];
            auto f = [&](ld r){ 
                vector<ld> x = x_; 
                rep(i, x.size()) x[i] -= r;
                ld sum = 0; 
                rep(i, x.size()) {
                    sum += x[i] * t[i];
                    chmax(sum, 0);
                    if (!(sum <= C + EPS)) return false;
                }
                return true;
            };
            return BinarySearchReal(0, INF, f);
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, double p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << p2;
    cout << "]" << endl;
    WaterTank *obj;
    double answer;
    obj = new WaterTank();
    clock_t startTime = clock();
    answer = obj->minOutputRate(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    vector <int> p0;
    vector <int> p1;
    int p2;
    double p3;

    // ----- test 0 -----
    disabled = false;
    p0 = {3,3};
    p1 = {1,2};
    p2 = 3;
    p3 = 0.9999999999999999;
    all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = {1,2,3,4,5};
    p1 = {5,4,3,2,1};
    p2 = 10;
    p3 = 1.9999999999999996;
    all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = {5949,3198,376,3592,4019,3481,5609,3840,6092,4059};
    p1 = {29,38,96,84,10,2,39,27,76,94};
    p2 = 1000000000;
    p3 = 0.0;
    all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 3 -----
    disabled = false;
    p0 = {9,3,4,8,1,2,5,7,6};
    p1 = {123,456,789,1011,1213,1415,1617,1819,2021};
    p2 = 11;
    p3 = 2019.1666666666665;
    all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 4 -----
    disabled = false;
    p0 = {100};
    p1 = {1000};
    p2 = 12345;
    p3 = 876.55;
    all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    if (all_right) {
        if (tests_disabled) {
            cout << "You're a stud (but some test cases were disabled)!" << endl;
        } else {
            cout << "You're a stud (at least on given cases)!" << endl;
        }
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// 
// You are given the int C and the vector <int>s x and t.
// You have a water tank with capacity C liters.
// The tank is initially empty.
// 
// 
// 
// At time 0 water will start flowing into the tank through an input pipe.
// This process will consist of n consecutive intervals, numbered 0 to n-1 in order.
// Interval i lasts for t[i] seconds.
// During each second of interval i exactly x[i] liters of water will enter the tank.
// 
// 
// 
// The tank also has an output pipe.
// The water will always leave the tank through the output pipe as quickly as it can.
// The output pipe has a valve.
// You can use the valve to set the output pipe to any maximum output rate R (in liters per second).
// This maximum output rate must remain constant during the entire process.
// The rate must be nonnegative but it doesn't have to be an integer.
// 
// 
// 
// Determine and return the smallest output rate limit R such that the amount of water in the tank will never exceed C liters.
// 
// 
// DEFINITION
// Class:WaterTank
// Method:minOutputRate
// Parameters:vector <int>, vector <int>, int
// Returns:double
// Method signature:double minOutputRate(vector <int> t, vector <int> x, int C)
// 
// 
// NOTES
// -Your return value must have an absolute or relative error smaller than 1e-6.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -t,x will have exactly n elements.
// -Each element of t will be between 1 and 1,000,000, inclusive.
// -Each element of x will be between 1 and 1,000,000, inclusive.
// -C will be between 1 and 10^9, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3,3}
// {1,2}
// 3
// 
// Returns: 0.9999999999999999
// 
// In this case, we have two time intervals, the first one lasts 3 seconds and water flows at 1 liter per second. The second one lasts 3 seconds and water flows in at 2 liters per second.
// 
// The answer in this case is 1. During the first interval, water flows in and out at the same rate, while in the second interval, water flows in at a net rate of 1 liter per second. Any lower output rate would cause the tank to overflow 3 liters.
// 
// 1)
// {1,2,3,4,5}
// {5,4,3,2,1}
// 10
// 
// Returns: 1.9999999999999996
// 
// 
// 
// 2)
// {5949,3198,376,3592,4019,3481,5609,3840,6092,4059}
// {29,38,96,84,10,2,39,27,76,94}
// 1000000000
// 
// Returns: 0.0
// 
// 
// 
// 3)
// {9,3,4,8,1,2,5,7,6}
// {123,456,789,1011,1213,1415,1617,1819,2021}
// 11
// 
// Returns: 2019.1666666666665
// 
// 
// 
// 4)
// {100}
// {1000}
// 12345
// 
// Returns: 876.55
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
