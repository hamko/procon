#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class TypoCoderDiv1 {
    public:
        int getmax(vector <int> a, int r) {
            ll n = a.size();
            ll dp[55][2222] = {};
            memset(dp, -1, sizeof(dp));
            dp[0][r] = 0;
            auto is_ciel = [&](ll x) { return (x < 2200); };
            rep(i, n) { 
                rep(j, 2210) {
                    if (dp[i][j] == -1)
                        continue;
//                i個目は+、i+1個目を-にできる（i<n-1 && j+a[i]が灰、j+a[i]-a[i+1]がシエル）  下げて上げる
                    if (i<n-1 && !is_ciel(j+a[i]) && is_ciel(j+a[i]-a[i+1]))
                        chmax(dp[i+2][max<ll>(0, j+a[i]-a[i+1])], dp[i][j]+2);

                    if (i==n-1 && !is_ciel(j+a[i]))
                        chmax(dp[i+1][j], dp[i][j]+1);

//                i個目だけ+にできる(i<n && j+a[i]がCiel)   上げる
                    if (is_ciel(j+a[i]))
                        chmax(dp[i+1][j+a[i]], dp[i][j]);

//                i個目だけ-にできる（i<n && いつでもできる） 下げる
                    chmax(dp[i+1][max<ll>(0, j-a[i])], dp[i][j]);
                }
                /*
                rep(j, 2210) {
                    if (dp[i+1][j] != -1) {
                        cout << i << " " << j << " : " << dp[i+1][j] << endl;
                    }
                }
                */
            }
            
            ll ret = 0;
            rep(j, 2222) 
                chmax(ret, dp[n][j]);

            return ret;
           
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TypoCoderDiv1 *obj;
	int answer;
	obj = new TypoCoderDiv1();
	clock_t startTime = clock();
	answer = obj->getmax(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {100,200,100,1,1};
	p1 = 2000;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,0,0,0};
	p1 = 2199;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {90000,80000,70000,60000,50000,40000,30000,20000,10000};
	p1 = 0;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1000000000,1000000000,10000,100000,2202,1};
	p1 = 1000;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {2048,1024,5012,256,128,64,32,16,8,4,2,1,0};
	p1 = 2199;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {61,666,512,229,618,419,757,217,458,883,23,932,547,679,565,767,513,798,870,31,379,294,929,892,173,127,796,353,913,115,802,803,948,592,959,127,501,319,140,694,851,189,924,590,790,3,669,541,342,272};
	p1 = 1223;
	p2 = 29;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {34,64,43,14,58,30,2,16,90,58,35,55,46,24,14,73,96,13,9,42,64,36,89,42,42,64,52,68,53,76,52,54,23,88,32,52,28,96,70,32,26,3,23,78,47,23,54,30,86,32};
	p1 = 1328;
	p2 = 20;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// TypoCoder is a programming contest like TopCoder.
// TypoCoder also has a rating system.
// There are two types of coders in TypoCoder: brown coders and ciel coders.
// A brown coder is a coder whose rating is greater than or equal to 2200.
// A ciel coder is a coder whose rating is less than 2200.
// 
// Cat Lower competes in TypoCoder.
// He is currently a ciel coder.
// His rating at the end of the current year is X.
// 
// Next year there will be some contests.
// In each of those contests, Cat Lower can either try his best or lose on purpose.
// For each i, the i-th contest (0-based index) has weight D[i].
// If Cat Lower tries his best in the i-th contest, his rating will increase by D[i].
// If he decides to lose on purpose instead, his rating will decrease by D[i], but not below zero.
// Formally, his rating will decrease by min(D[i],his rating before the contest).
// 
// Cat Lower loves being a ciel coder.
// Therefore, he must never be a brown coder twice in a row.
// That is, whenever Cat Lower becomes a brown coder, he must be ciel again after the next contest (if there are any contests left).
// 
// TypoCoder awards "Chameleon coder of the year" to the coder whose color changed the most times during the year.
// 
// You are given the vector <int> D and the int X.
// Return the maximal number of color changes Cat Lower can have next year.
// 
// 
// DEFINITION
// Class:TypoCoderDiv1
// Method:getmax
// Parameters:vector <int>, int
// Returns:int
// Method signature:int getmax(vector <int> D, int X)
// 
// 
// CONSTRAINTS
// -D will contain between 1 and 50 elements, inclusive.
// -Each element of D will be between 0 and 1,000,000,000 (10^9), inclusive.
// -X will be between 0 and 2199, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {100,200,100,1,1}
// 2000
// 
// Returns: 3
// 
// When he increase at the second, the third and the last competition and decrease at the first and the fourth competition, he can change the color 3 times and this is the maximal.
// 
// 1)
// {0,0,0,0,0}
// 2199
// 
// Returns: 0
// 
// He cannot be a brown coder in this case.
// 
// 2)
// {90000,80000,70000,60000,50000,40000,30000,20000,10000}
// 0
// 
// Returns: 1
// 
// Note that Cat Lower always has at least one valid strategy: if he decides to lose in all contests, he will remain ciel forever.
// In this test case, the optimal strategy for him is to lose in the first eight contests and then to win in the last one.
// Note that before the last contest his rating will be 0.
// 
// 3)
// {1000000000,1000000000,10000,100000,2202,1}
// 1000
// 
// Returns: 4
// 
// 
// 
// 4)
// {2048,1024,5012,256,128,64,32,16,8,4,2,1,0}
// 2199
// 
// Returns: 0
// 
// 
// 
// 5)
// {61,666,512,229,618,419,757,217,458,883,23,932,547,679,565,767,513,798,870,31,379,294,929,892,173,127,796,353,913,115,802,803,948,592,959,127,501,319,140,694,851,189,924,590,790,3,669,541,342,272}
// 1223
// 
// Returns: 29
// 
// 
// 
// 6)
// {34,64,43,14,58,30,2,16,90,58,35,55,46,24,14,73,96,13,9,42,64,36,89,42,42,64,52,68,53,76,52,54,23,88,32,52,28,96,70,32,26,3,23,78,47,23,54,30,86,32}
// 1328
// 
// Returns: 20
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
