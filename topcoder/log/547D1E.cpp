#include <bits/stdc++.h>
using namespace std;

static const double EPS = 1e-14;
static const long long INF = 1e18;

#define rep(i,n) for(int i = 0; i < n; i++)
#define all(x) begin(x), end(x)
#define Min(x) *min_element(all(x))
#define Max(x) *max_element(all(x))
using ll = long long; using vll = vector<ll>; using vi = vector<int>;
using ld = long double;
typedef pair<int, int> P;

#define MAX_N 100005

class Pillars {
public:
	double getExpectedLength(int w, int x, int y) {
        if (x > y) swap(x, y);
        vector<ld> d(200000);
        rep(i, d.size()) 
            d[i] = sqrtl((ld)w*(ld)w+(ld)i*ld(i));
        ld ret = 0;
        ret += x * d[0];
        rep(i, d.size()) {
            if (!i) continue;
            ret += max<ld>(0, min<ld>(x, y-i)) * d[i];
            ret += max<ld>(0, min<ld>(y, x-i)) * d[i];
        }

        return (double)(ret / x / y);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Pillars *obj;
	double answer;
	obj = new Pillars();
	clock_t startTime = clock();
	answer = obj->getExpectedLength(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 1.0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 2.387132965131785;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = 3;
	p2 = 15;
	p3 = 6.737191281760445;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 10;
	p1 = 15;
	p2 = 23;
	p3 = 12.988608956320535;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 1;
	p1 = 100000;
	p2 = 100000;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, false, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// On a horizontal line, there are two vertical pillars.
// The distance between their bottoms is w.
// The height of the first pillar is an integer, chosen uniformly at random in the range 1 through x, inclusive.
// The height of the second pillar is an integer, chosen uniformly at random in the range 1 through y, inclusive.
// The tops of both pillars will be connected by a straight piece of rope.
// 
// You are given the ints w, x, and y.
// Compute and return the expected length of the rope.
// 
// DEFINITION
// Class:Pillars
// Method:getExpectedLength
// Parameters:int, int, int
// Returns:double
// Method signature:double getExpectedLength(int w, int x, int y)
// 
// 
// NOTES
// -Your return value must have a relative or an absolute error of less than 1e-9.
// -In this task, the expected rope length can be computed as the average rope length over all possible cases.
// 
// 
// CONSTRAINTS
// -w will be between 1 and 1000, inclusive.
// -x will be between 1 and 100,000, inclusive.
// -y will be between 1 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 1
// 
// Returns: 1.0
// 
// The rope always has a length of 1.
// 
// 1)
// 1
// 5
// 1
// 
// Returns: 2.387132965131785
// 
// There are 5 possible (equiprobable) cases in which the length of the rope is 1, sqrt(2), sqrt(5), sqrt(10) and sqrt(17). The correct answer is the arithmetic average of these 5 numbers.
// 
// 2)
// 2
// 3
// 15
// 
// Returns: 6.737191281760445
// 
// 
// 
// 3)
// 10
// 15
// 23
// 
// Returns: 12.988608956320535
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
