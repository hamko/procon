#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { if (!v.empty()) { o << '['; copy(v.begin(), v.end(), ostream_iterator<T>(o, ", ")); o << "\b\b]"; } return o; }
using ll = long long; using ld = long double; using vll = vector<ll>; using vld = vector<ld>;
using vi = vector<int>;
typedef pair<ll, ll> P;

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;
#define MAX_N 100005

class TheMatrix {
    public:
        int MaxArea(vector <string> b) {
            ll ni = b.size(), nj = b[0].length();
            vector<vll> y = vector<vll>(ni, vll(nj));
            rep(i, ni) {
                cout << b[i] << endl;
            }
            rep(i, ni) {
                y[i][0] = 1;
                rep(j, nj - 1) 
                    y[i][j+1] = (b[i][j+1] == b[i][j] ? 1 : y[i][j] + 1);
            }

            ll ret = 0;
            rep(j, nj) {
                for (int i = 0; i < ni; i++) { // [j, h)
                    for (int h = i + 1; h <= ni; h++) {
                        int prev = -1;
                        ll m = INF;
                        for (int k = i; k < h; k++) {
                            if (prev == b[k][j]) {
                                goto hell;
                            }
                            prev = b[k][j];
                        }
                        for (int k = i; k < h; k++) {
                            chmin(m, y[k][j]);
                        }
                        chmax(ret, (h - i) * m);
                        hell:;
                    }
                }
            }

            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TheMatrix *obj;
	int answer;
	obj = new TheMatrix();
	clock_t startTime = clock();
	answer = obj->MaxArea(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"1","0"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"0000"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"01"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"001","000","100"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"0"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"101","010"};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {"101","011","101","010"};
	p1 = 8;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 7 -----
	disabled = false;
	p0 = {
			
			"1100011100","00111101110001001100101001110100110010100110110000","00010011011000101000100001101110111100100000010100","01101110001101000001001000001011101010011101011110","00000100110011001011101011110011011101100001110111","00110011110000011001011100001110101010100110010110","00111001010011011111010100000100100000101101110001","10101101101110111110000011111011001011100011110001","00101110010101111000001010110100001110111011100011","01111110010100111010110001111000111101110100111011"};
	p1 = 12;
	all_right = (disabled || KawigiEdit_RunTest(7, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 8 -----
	disabled = false;
	p0 = {"11000100000", "10100011000", "10101001111", "10100100010", "11011101110", "01111101001", "10111110100", "01111010010", "00111011101", "01010110110", "00101011011", "10001111101", "11100011010", "10111010010", "01100010100", "11010010000", "10101100101", "00001000011", "10111111101", "00110101101", "11111100010", "10111001010"};
	p1 = 10;
	all_right = (disabled || KawigiEdit_RunTest(7, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Have you ever had a dream, that you were so sure was real? What if you were unable to wake from that dream? How would you know the difference between the dream world and the real world?
// 
// To answer this complex puzzle, one of the questions that must be answered is to find out whether the world that you live in can be represented by a chess matrix.
// 
// Cells of a matrix are called adjacent if they share an edge.
// A matrix of zeroes and ones is called a chess matrix if there are no two adjacent cells that share the same value.
// Hence, in a chess matrix the zeroes and ones have to alternate in the same way the colors alternate on a chessboard:
// 
// 
// 
// You are given a vector <string> board that represents a rectangular grid of cells, with a 0 or a 1 in each cell.
// Each character of each element of board will be either '0' or '1'.
// In this grid we selected some rectangular subgrid that is a chess matrix.
// Return the largest possible area of the selected subgrid.
// 
// DEFINITION
// Class:TheMatrix
// Method:MaxArea
// Parameters:vector <string>
// Returns:int
// Method signature:int MaxArea(vector <string> board)
// 
// 
// CONSTRAINTS
// -board will contain between 1 and 100 elements, inclusive.
// -Each element of the board is a string containing between 1 and 100 characters, inclusive.
// -All elements of board will have the same length.
// -Each character of each element of board will be either '0' or '1'.
// 
// 
// EXAMPLES
// 
// 0)
// {"1", 
//  "0"}
// 
// Returns: 2
// 
// The entire board is a chess matrix.
// 
// 1)
// {"0000"}
// 
// Returns: 1
// 
// The largest possible chess matrix here is just a single cell.
// 
// 2)
// {"01"}
// 
// Returns: 2
// 
// Again, the entire board is a chess matrix.
// 
// 3)
// {"001",
//  "000",
//  "100"}
// 
// Returns: 2
// 
// Each rectangular subgrid is determined by a contiguous range of rows and a contiguous range of columns. The four corners of this grid do not form a valid rectangular subgrid.
// 
// 4)
// {"0"}
// 
// Returns: 1
// 
// 
// 
// 5)
// {"101", 
//  "010"}
// 
// Returns: 6
// 
// 
// 
// 6)
// {"101", 
//  "011", 
//  "101", 
//  "010"}
// 
// Returns: 8
// 
// 
// 
// 7)
// {"11001110011000110001111001001110110011010110001011", 
//  "10100100010111111011111001011110101111010011100001", 
//  "11101111001110100110010101101100011100101000010001", 
//  "01000010001010101100010011111000100100110111111000", 
//  "10110100000101100000111000100001011101111101010010", 
//  "00111010000011100001110110010011010110010011100100", 
//  "01100001111101001101001101100001111000111001101010", 
//  "11010000000011011010100010000000111011001001100101", 
//  "10100000000100010100100011010100110110110001000001", 
//  "01101010101100001100000110100110100000010100100010", 
//  "11010000001110111111011010011110001101100011100010", 
//  "11101111000000011010011100100001100011111111110111", 
//  "11000001101100100011000110111010011001010100000001", 
//  "00100001111001010000101101100010000001100100001000", 
//  "01001110110111101011010000111111101011000110010111", 
//  "01001010000111111001100000100010101100100101010100", 
//  "11111101001101110011011011011000111001101100011011", 
//  "10000100110111000001110110010000000000111100101101", 
//  "01010011101101101110000011000110011111001111011100", 
//  "01101010011111010000011001111101011010011100001101", 
//  "11011000011000110010101111100000101011011111101100", 
//  "11100001001000110010100011001010101101001010001100", 
//  "11011011001100111101001100111100000101011101101011", 
//  "11110111100100101011100101111101000111001111110111", 
//  "00011001100110111100111100001100101001111100001111", 
//  "10001111100101110111001111100000000011110000100111", 
//  "10101010110110100110010001001010000111100110100011", 
//  "01100110100000001110101001101011001010001101110101", 
//  "10110101110100110110101001100111110000101111100110", 
//  "01011000001001101110100001101001110011001001110001", 
//  "00100101010001100110110101001010010100001011000011", 
//  "00011101100100001010100000000011000010100110011100", 
//  "11001001011000000101111111000000110010001101101110", 
//  "10101010110110010000010011001100110101110100111011", 
//  "01101001010111010001101000100011101001110101000110", 
//  "00110101101110110001110101110010100100110000101101", 
//  "11010101000111010011110011000001101111010011110011", 
//  "10010000010001110011011101001110110010001100011100", 
//  "00111101110001001100101001110100110010100110110000", 
//  "00010011011000101000100001101110111100100000010100", 
//  "01101110001101000001001000001011101010011101011110", 
//  "00000100110011001011101011110011011101100001110111", 
//  "00110011110000011001011100001110101010100110010110", 
//  "00111001010011011111010100000100100000101101110001", 
//  "10101101101110111110000011111011001011100011110001", 
//  "00101110010101111000001010110100001110111011100011", 
//  "01111110010100111010110001111000111101110100111011"}
// 
// Returns: 12
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
