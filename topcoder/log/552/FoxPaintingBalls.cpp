#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }

static const double EPS = 1e-14;
static const long long INF = 2e18;
static const long long mo = 1e9+7;

class FoxPaintingBalls {
    public:
        long long theMax(long long r, long long g, long long b, int nn) {
            vll ba = {r, g, b};
            sort(all(ba));
            ll n = (ll)nn * ((ll)nn+1ll) / 2ll;
            if (r + g + b < n) 
                return 0;
            if (n % 3 != 1) 
                return ba[0] / (n / 3);

            n /= 3;
            if (!n) {
                return accumulate(all(ba), 0ll);
            }
            vvll indice = {{2, 1, 0}, {1, 0, 2}, {2, 1, 0}};
            ll ret = 0;
            rep(i, 3) {
                vll cand;
                cand = {ba[indice[i][0]] - ba[indice[i][1]], ba[indice[i][0]] / (n+1), ba[indice[i][1]] / n, ba[indice[i][2]] / n};
                cout << ba << endl;
                cout << cand << endl;
                sort(all(cand));
                ret += cand[0];
                ba[2] -= (n+1) * cand[0];
                ba[1] -= n * cand[0];
                ba[0] -= n * cand[0];
                sort(all(ba));
            }

            cout << ret << " " << ba << endl;
            ret += ba[0] / (3 * n + 1) * 3;
            rep(i, 3)
                ba[i] -= ba[i] / (3 * n + 1) * (3 * n + 1);
            rep(_, 10) {
                sort(all(ba));
                if (ba[0] >= n && ba[1] >= n && ba[2] >= n + 1) { ret++; ba[0] -= n; ba[1] -= n; ba[2] -= n + 1; }
            }
            return ret;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, int p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FoxPaintingBalls *obj;
	long long answer;
	obj = new FoxPaintingBalls();
	clock_t startTime = clock();
	answer = obj->theMax(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	long long p0;
	long long p1;
	long long p2;
	int p3;
	long long p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2ll;
	p1 = 2ll;
	p2 = 2ll;
	p3 = 3;
	p4 = 1ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 1ll;
	p1 = 2ll;
	p2 = 3ll;
	p3 = 3;
	p4 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 8ll;
	p1 = 6ll;
	p2 = 6ll;
	p3 = 4;
	p4 = 2ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 7ll;
	p1 = 6ll;
	p2 = 7ll;
	p3 = 4;
	p4 = 2ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 100ll;
	p1 = 100ll;
	p2 = 100ll;
	p3 = 4;
	p4 = 30ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 19330428391852493ll;
	p1 = 48815737582834113ll;
	p2 = 11451481019198930ll;
	p3 = 3456;
	p4 = 5750952686ll;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1;
	p4 = 3ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
    // ----- test 6 -----
	disabled = false;
	p0 = 20ll;
	p1 = 18ll;
	p2 = 14ll;
	p3 = 4;
	p4 = 4ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	 // ----- test 6 -----
	disabled = false;
	p0 = 0ll;
	p1 = 0ll;
	p2 = 0ll;
	p3 = 4;
	p4 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
		 // ----- test 6 -----
	disabled = false;
	p0 = 1000000000000000000ll;
	p1 = 1000000000000000000ll;
	p2 = 3ll;
	p3 = 4;
	p4 = 1ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
		 // ----- test 6 -----
	disabled = false;
	p0 = 1ll;
	p1 = 0ll;
	p2 = 0ll;
	p3 = 1;
	p4 = 1ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A Ball Triangle is a set of identical balls placed in a triangular shape. A Ball Triangle has N rows, numbered 1 to N from top to bottom. For all i, 1 <= i <= N, the i-th row contains i balls. For example, the following image shows a Ball Triangle with N=3.
// 
// 
// 
// 
// Fox Jiro has infinitely many Ball Triangles. He can paint a Ball Triangle according to the following conditions:
// 
// Each of the balls has to be painted either red, green, or blue.
// No two adjacent balls may share the same color.
// 
// The following image shows one valid coloring of a Ball Triangle for N=3.
// 
// 
// 
// 
// Jiro wants to paint as many Ball Triangles as he can.
// As long as he follows the rules above, he may color the Ball Triangles in any way he likes.
// Some of the colored Ball Triangles may look exactly the same, but they don't have to.
// The only other constraint is the total amount of paint available to Jiro:
// In all the triangles together, he can paint at most R balls red, G balls green, and B balls blue.
// 
// You are given the long longs R, G, and B.
// You are also given the int N.
// Return the maximum possible number of Ball Triangles Jiro can paint.
// 
// DEFINITION
// Class:FoxPaintingBalls
// Method:theMax
// Parameters:long long, long long, long long, int
// Returns:long long
// Method signature:long long theMax(long long R, long long G, long long B, int N)
// 
// 
// CONSTRAINTS
// -R, G and B will each be between 0 and 1,000,000,000,000,000,000 (10^18), inclusive.
// -N will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 2
// 3
// 
// Returns: 1
// 
// Jiro can paint one Ball Triangle in the same way as in the image in the statement.
// 
// 1)
// 1
// 2
// 3
// 3
// 
// Returns: 0
// 
// This time Jiro can paint no Ball Triangles.
// 
// 2)
// 8
// 6
// 6
// 4
// 
// Returns: 2
// 
// 
// 
// 3)
// 7
// 6
// 7
// 4
// 
// Returns: 2
// 
// 
// 
// 4)
// 100
// 100
// 100
// 4
// 
// Returns: 30
// 
// 
// 
// 5)
// 19330428391852493
// 48815737582834113
// 11451481019198930
// 3456
// 
// Returns: 5750952686
// 
// 
// 
// 6)
// 1
// 1
// 1
// 1
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
