#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second
#define mt make_tuple
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

using ll = long long; using ld = long double; using vll = vector<ll>; using vvll = vector<vll>; using vld = vector<ld>; 
using vi = vector<int>; using vvi = vector<vi>;
vll conv(vi& v) { vll r(v.size()); rep(i, v.size()) r[i] = v[i]; return r; }
using P = pair<ll, ll>;

template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template<size_t...> struct seq{}; template<size_t N, size_t... Is> struct gen_seq : gen_seq<N-1, N-1, Is...>{}; template<size_t... Is> struct gen_seq<0, Is...> : seq<Is...>{};
template<class Ch, class Tr, class Tuple, size_t... Is>
void print_tuple(basic_ostream<Ch,Tr>& os, Tuple const& t, seq<Is...>){ using s = int[]; (void)s{0, (void(os << (Is == 0? "" : ", ") << get<Is>(t)), 0)...}; }
template<class Ch, class Tr, class... Args> 
auto operator<<(basic_ostream<Ch, Tr>& os, tuple<Args...> const& t) -> basic_ostream<Ch, Tr>& { os << "("; print_tuple(os, t, gen_seq<sizeof...(Args)>()); return os << ")"; }
ostream &operator<<(ostream &o, const vvll &v) { rep(i, v.size()) { rep(j, v[i].size()) o << v[i][j] << " "; cout << endl; } return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { o << '['; rep(i, v.size()) o << v[i] << (i != v.size()-1 ? ", " : ""); o << "]";  return o; }
template <typename T>  ostream &operator<<(ostream &o, const set<T> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it << (next(it) != m.end() ? ", " : ""); o << "]";  return o; }
template <typename T, typename U>  ostream &operator<<(ostream &o, const unordered_map<T, U> &m) { o << '['; for (auto it = m.begin(); it != m.end(); it++) o << *it; o << "]";  return o; }
void printbits(ll mask, ll n) { rep(i, n) { cout << !!(mask & (1ll << i)); } cout << endl; }

static const double EPS = 1e-14;
static const long long INF = 1e18;
static const long long mo = 1e9+7;

class BichromePainting {
    public:
        string isThatPossible(vector <string> b, int k) {
            ll ni = b.size();
            ll nj = b[0].size();
            while (1) {
                bool nochange = 1;
                rep(i, ni - k + 1) rep(j, nj - k + 1) {
                    bool wf = 0, bf = 0;
                    rep(s, k) rep(t, k) {
                        wf |= b[i+s][j+t] == 'W';
                        bf |= b[i+s][j+t] == 'B';
                    }
                    if (wf ^ bf) {
                        nochange = 0;
                        rep(s, k) rep(t, k) 
                            b[i+s][j+t] = '?';
                    }
                }
                if (nochange) 
                    break;
            }

            rep(i, ni) rep(j, nj) 
                if (b[i][j] != '?')
                    return "Impossible";
            return "Possible";
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    BichromePainting *obj;
    string answer;
    obj = new BichromePainting();
    clock_t startTime = clock();
    answer = obj->isThatPossible(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    vector <string> p0;
    int p1;
    string p2;

    // ----- test 0 -----
    disabled = false;
    p0 = {"BBBW","BWWW","BWWW","WWWW"};
    p1 = 3;
    p2 = "Possible";
    all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = {"BW","WB"};
    p1 = 2;
    p2 = "Impossible";
    all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = {"BWBWBB","WBWBBB","BWBWBB","WBWBBB","BBBBBB","BBBBBB"};
	p1 = 2;
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"BWBWBB","WBWBWB","BWBWBB","WBWBWB","BWBWBB","BBBBBB"};
	p1 = 2;
	p2 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"BWBWBB","WBWBWB","BWBWBB","WBWBWB","BWBWBB","BBBBBB"};
	p1 = 1;
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"BB","BB"};
	p1 = 2;
	p2 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have a square board divided into a grid of unit square cells.
// Initially each cell is white.
// You are given a vector <string> board that describes the desired final state.
// In the final state each cell is either white ('W') or black ('B').
// 
// 
// You are also given an int k.
// The only change you can make to the board looks as follows:
// You may select any square of k by k cells and repaint all of them using the same color: either black or white.
// Later changes to the board may overlap previous ones.
// 
// 
// Return "Possible" if we can obtain the desired final state.
// Otherwise, return "Impossible".
// 
// DEFINITION
// Class:BichromePainting
// Method:isThatPossible
// Parameters:vector <string>, int
// Returns:string
// Method signature:string isThatPossible(vector <string> board, int k)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 20, inclusive.
// -k will be between 1 and n, inclusive.
// -board will contain exactly n elements.
// -Each element in board will contain exactly n characters.
// -Each character in board will be 'W' or 'B'.
// 
// 
// EXAMPLES
// 
// 0)
// {"BBBW",
//  "BWWW",
//  "BWWW",
//  "WWWW"}
// 3
// 
// Returns: "Possible"
// 
// We can reach the desired state by doing two changes.
// First we paint the 3x3 square in the top left corner black:
// 
// BBBW
// BBBW
// BBBW
// WWWW
// 
// Then we paint the 3x3 square in the bottom right corner white.
// 
// 1)
// {"BW",
//  "WB"}
// 
// 2
// 
// Returns: "Impossible"
// 
// We can get only an all-white board and an all-black board.
// 
// 2)
// {"BWBWBB",
//  "WBWBBB",
//  "BWBWBB",
//  "WBWBBB",
//  "BBBBBB",
//  "BBBBBB"}
// 
// 2
// 
// Returns: "Possible"
// 
// 
// 
// 3)
// {"BWBWBB",
//  "WBWBWB",
//  "BWBWBB",
//  "WBWBWB",
//  "BWBWBB",
//  "BBBBBB"}
// 
// 2
// 
// Returns: "Impossible"
// 
// 
// 
// 4)
// {"BWBWBB",
//  "WBWBWB",
//  "BWBWBB",
//  "WBWBWB",
//  "BWBWBB",
//  "BBBBBB"}
// 
// 1
// 
// Returns: "Possible"
// 
// 
// 
// 5)
// {"BB",
//  "BB"}
// 2
// 
// Returns: "Possible"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
