#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for(long long i = 0; i < (long long)(n); i++)
#define pb push_back
#define all(x) (x).begin(), (x).end()
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T, typename U> ostream &operator<<(ostream &o, const pair<T, U> &v) {  o << "(" << v.first << ", " << v.second << ")"; return o; }
template <typename T> ostream &operator<<(ostream &o, const vector<T> &v) { if (!v.empty()) { o << '['; copy(v.begin(), v.end(), ostream_iterator<T>(o, ", ")); o << "\b\b]"; } return o; }
using ll = long long; using ld = long double; using vll = vector<ll>; using vld = vector<ld>;
typedef pair<ll, ll> P;

static const double EPS = 1e-14;
static const long long INF = 1e18;
#define MAX_N 100005

class WolfCardGame {
    public:
        vector <int> createAnswer(int N, int K) {
            vector<int> ret;
            if (N % 2) { rep(i, K) ret.pb(2*(i+1)); return ret; }
            if (N % 3) { rep(i, K) ret.pb(3*(i+1)); return ret; }
            if (N % 5) { rep(i, K) ret.pb(5*(i+1)); return ret; }
            ret.pb(N==90?2:1); rep(i, K-1) ret.pb(7*(i+1)); return ret; 
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	WolfCardGame *obj;
	vector <int> answer;
	obj = new WolfCardGame();
	clock_t startTime = clock();
	answer = obj->createAnswer(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <int> p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 20;
	p1 = 4;
	p2 = {1,2,3,4};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 40;
	p1 = 1;
	p2 = {39};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 97;
	p1 = 6;
	p2 = {7,68,9,10,62,58};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 2;
	p1 = 12;
	p2 = {33,69,42,45,96,15,57,12,93,9,54,99};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Wolf Sothe and Cat Snuke are playing a card game.
// The game is played with exactly 100 cards.
// The cards are numbered from 1 to 100.
// The game is played as follows:
// 
// First, Cat Snuke chooses the goal: an integer N between 1 and 100, inclusive.
// Then, Wolf Sothe chooses exactly K of the 100 cards and gives the chosen cards to Snuke.
// Next, Cat Snuke may throw some of those K cards away. He may choose any subset of cards he was given, possibly none or all of them.
// Finally, Cat Snuke may write minus signs onto any subset of the cards he still holds. For example, if he currently has the cards {1,3,4,7}, he may alter them to {-1,3,4,-7}.
// 
// 
// At the end of the game, Snuke computes the sum of the numbers on his cards (with the added minus signs).
// Snuke wins the game if the sum is exactly equal to the goal number N.
// Otherwise, Sothe wins.
// 
// Your task is to help Wolf Sothe win the game.
// We are now in step 2 of the game.
// You are given the int N chosen by Snuke and the int K that specifies the number of cards you have to give to Snuke.
// Choose those K cards in such a way that Snuke will be unable to win the game.
// If you can do that, return a vector <int> with K elements: the numbers on the chosen cards.
// If there are multiple solutions, you may return any of them.
// If there is no solution, return an empty vector <int> instead.
// 
// DEFINITION
// Class:WolfCardGame
// Method:createAnswer
// Parameters:int, int
// Returns:vector <int>
// Method signature:vector <int> createAnswer(int N, int K)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 100, inclusive.
// -K will be between 1 and 15, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 20
// 4
// 
// Returns: {1, 2, 3, 4 }
// 
// If we give Snuke cards with numbers 1, 2, 3, and 4 on them, the largest sum he can form is 1+2+3+4 = 10.
// Thus, he cannot reach N=20 and we win.
// 
// 1)
// 40
// 1
// 
// Returns: {39 }
// 
// 
// 
// 2)
// 97
// 6
// 
// Returns: {7, 68, 9, 10, 62, 58 }
// 
// 
// 
// 3)
// 2
// 12
// 
// Returns: {33, 69, 42, 45, 96, 15, 57, 12, 93, 9, 54, 99 }
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
