/**
 * ---==== Counting the Number of 11-Cycles in an Undirected Graph  ====---
 *                 Parallel version with Int128 answer type
 *
 * AUTHORS: Anton N. Voropaev 
 * ```````  Artem M. Karavaev ( http://www.flowproblem.ru )
 *      
 * CREATED: 25.11.2009     
 * ```````     
 * VERSION: 6.0 ( from 21.03.2010 )     
 * ```````
 */

#include "mpi.h"

#define VERSION "6.0"

#define N 128   // The maximum number of vertices ( YOU MAY CHANGE IT )
#define K 11     // The length of the cycles ( DO NOT CHANGE )

#include "Int128.h"
using namespace Zeal;

typedef Int128 TAnswer;

#include <stdio.h>
#include <stdlib.h>

int n, m;
FILE * in, * out = stdout;

int A1 [ N ] [ N ];
TAnswer A [ K ] [ N ] [ N ];
TAnswer ans;

void c11 ( );

#define MAIN 0
char nameOfProc [ MPI_MAX_PROCESSOR_NAME ];
int myId, numOfProcs, lenOfName;
double startTime, endTime, Time;
MPI_Status status;
int64 number [ 2 ];

void sumAndDiv ( TAnswer s, int k ) {
	int p;
	TAnswer tmp;
	if ( myId != MAIN ) {
		number [ 0 ] = s . l;
		number [ 1 ] = s . h;
    MPI_Send ( number, 2, MPI_LONG_LONG, MAIN, 1, MPI_COMM_WORLD );
	}
  if ( myId == MAIN ) {                                                     
		for ( p = 1; p < numOfProcs; p ++ ) {                               
			MPI_Recv ( number, 2, MPI_LONG_LONG, p, 1, MPI_COMM_WORLD, & status ); 
			tmp . l = number [ 0 ];
			tmp . h = number [ 1 ];
			s += tmp;   
		}
  }                                                                         
  ans = s;
  ans /= k;
}

// Multiply A * B. A contains only 0 and 1.
void MulMatrix ( int A [ N ] [ N ], TAnswer B [ N ] [ N ], TAnswer C [ N ] [ N ] ) {
	int i, j, r;
	for ( i = 0; i < n; i ++ )		
		for ( r = 0; r < n; r ++ )
			if ( A [ i ] [ r ] )
				for ( j = 0; j < n; j ++ )
					C [ i ] [ j ] += B [ r ] [ j ];
}

void Init ( ) {
	int i, p, q;

	fscanf ( in, "%d %d", &n, &m );  	  
	if ( n > N ) {
	  fprintf ( stderr, "n is too big (%d), make constant `N' bigger\n", n );
		exit ( 1 );
	}
  for ( i = 0; i < m; i ++ ) {
  	fscanf ( in, "%d %d", &p, &q );
  	A1 [ p - 1 ] [ q - 1 ] = 1;
    A1 [ q - 1 ] [ p - 1 ] = 1;
  	A [ 0 ] [ p - 1 ] [ q - 1 ] = 1;
  	A [ 0 ] [ q - 1 ] [ p - 1 ] = 1;
  } 		
	
	for ( i = 1; i < K; i ++ ) 
		MulMatrix ( A1, A [ i - 1 ], A [ i ] );

}

int main ( int argc, char * argv [ ] ) {

	int i;

  // Init MPI variables
	MPI_Init ( & argc, & argv );    
	MPI_Comm_size ( MPI_COMM_WORLD, & numOfProcs );
	MPI_Comm_rank ( MPI_COMM_WORLD, & myId );
	MPI_Get_processor_name ( nameOfProc, & lenOfName );

	if ( argc < 2 ) {
  	fprintf ( stderr, "Usage: %s ``input-file'' [ ``output-file'' ]\n", argv [ 0 ] );
  	return 0;
	}
	if ( argc > 3 ) {
  	fprintf ( stderr, "Too many parameters: %d\n", argc );
  	return 1;
	}
      
	if ( ( in = fopen ( argv [ 1 ], "r" ) ) == NULL ) {
		fprintf ( stderr, "Cannot open file %s for reading\n", argv [ 1 ] );
		return 1;
	}  
	if ( argc == 3 && myId == MAIN && ( out = fopen ( argv [ 2 ], "w" ) ) == NULL ) {
		fprintf ( stderr, "Cannot open file %s for writing\n", argv [ 2 ] );
		return 1;
	} 

	Init ( );
	fclose ( in );

	c11 ( );
  	
	if ( myId == MAIN ) {		
		ans . print ( out );
		fclose ( out );
	}

  // Waiting for all to finish at once
  MPI_Barrier ( MPI_COMM_WORLD );
	MPI_Finalize ( );

	return 0;
}

void c11 ( ) {
	TAnswer s, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105, t106, t107, t108, t109, t110, t111, t112, t113, t114, t115, t116, t117, t118, t119, t120, t121;
	int i, i1, i2, i3, i4, i5;
	s = 0;

	/* FIVE */
	t1 = t2 = t3 = t4 = t5 = t6 = t7 = t8 = t9 = 0;
	for ( i = myId; i < n * n; i += numOfProcs ) {
		i1 = i / n;
		i2 = i - i1 * n;

		for ( i3 = 0; i3 < n; i3 ++ ) {
			for ( i4 = 0; i4 < n; i4 ++ ) {
				for ( i5 = 0; i5 < n; i5 ++ ) {
					t1 += A[0][i2][i5]*A[1][i1][i5]*A[0][i3][i4]*A[0][i2][i4]*A[0][i3][i5]*A[0][i2][i3]*A[0][i1][i4]*A[0][i4][i5]*A[0][i1][i3]*A[0][i1][i2];
					t2 += A[1][i4][i5]*A[0][i3][i5]*A[0][i2][i4]*A[0][i1][i5]*A[0][i4][i5]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
					t3 += A[1][i4][i5]*A[0][i3][i5]*A[0][i2][i4]*A[0][i4][i5]*A[0][i1][i4]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
					t4 += A[0][i3][i5]*A[0][i2][i4]*A[0][i1][i4]*A[1][i5][i5]*A[0][i4][i5]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
					t5 += A[0][i2][i4]*A[1][i3][i5]*A[0][i4][i5]*A[0][i1][i5]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
					t6 += A[0][i3][i5]*A[0][i2][i4]*A[1][i1][i5]*A[0][i4][i5]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
					t7 += A[0][i2][i4]*A[0][i4][i5]*A[0][i1][i5]*A[1][i5][i5]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
					t8 += A[0][i3][i5]*A[0][i2][i4]*A[0][i1][i5]*A[0][i1][i4]*A[0][i2][i5]*A[0][i4][i5]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
					t9 += A[0][i2][i4]*A[0][i1][i4]*A[0][i4][i5]*A[0][i1][i5]*A[0][i3][i5]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
				}
			}
		}
	}
	s += t1 * ( -242 );
	s += t2 * ( -660 );
	s += t3 * ( -308 );
	s += t4 * ( -121 );
	s += t5 * ( -660 );
	s += t6 * ( -330 );
	s += t7 * ( -121 );
	s += t8 * ( 1628 );
	s += t9 * ( 1540 );

	/* FOUR */
	t1 = t2 = t3 = t4 = t5 = t6 = t7 = t8 = t9 = t10 = t11 = t12 = t13 = t14 = t15 = t16 = t17 = t18 = t19 = t20 = t21 = t22 = t23 = t24 = t25 = t26 = t27 = t28 = t29 = t30 = t31 = t32 = t33 = t34 = t35 = t36 = t37 = t38 = t39 = t40 = t41 = t42 = t43 = t44 = t45 = t46 = t47 = t48 = t49 = t50 = t51 = t52 = t53 = t54 = t55 = t56 = t57 = t58 = t59 = t60 = 0;
	for ( i = myId; i < n * n; i += numOfProcs ) {
		i1 = i / n;
		i2 = i - i1 * n;

		for ( i3 = 0; i3 < n; i3 ++ ) {
			for ( i4 = 0; i4 < n; i4 ++ ) {
				t1 += A[0][i1][i3]*A[1][i3][i4]*A[1][i3][i4]*A[1][i1][i2]*A[0][i2][i4]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i4];
				t2 += A[0][i1][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i4]*A[1][i3][i4]*A[1][i2][i3]*A[0][i2][i4]*A[0][i1][i4];
				t3 += A[0][i1][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i2][i3]*A[0][i2][i4]*A[0][i1][i4]*A[2][i1][i4]*A[0][i3][i4];
				t4 += A[1][i3][i4]*A[1][i2][i3]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i4]*A[0][i2][i4]*A[1][i1][i1];
				t5 += A[1][i3][i4]*A[0][i3][i4]*A[0][i1][i3]*A[1][i1][i3]*A[1][i2][i4]*A[0][i1][i2]*A[0][i2][i4];
				t6 += A[0][i1][i3]*A[1][i3][i4]*A[1][i2][i4]*A[1][i2][i3]*A[0][i3][i4]*A[0][i1][i4]*A[0][i1][i2];
				t7 += A[1][i3][i4]*A[0][i3][i4]*A[0][i1][i3]*A[1][i2][i3]*A[0][i1][i2]*A[1][i1][i4]*A[0][i2][i4];
				t8 += A[1][i3][i4]*A[1][i3][i4]*A[0][i3][i4]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2]*A[0][i1][i4];
				t9 += A[0][i1][i3]*A[0][i2][i3]*A[1][i3][i4]*A[1][i2][i4]*A[0][i3][i4]*A[0][i1][i2]*A[1][i1][i4];
				t10 += A[0][i1][i3]*A[0][i1][i4]*A[0][i2][i4]*A[0][i2][i3]*A[2][i3][i4]*A[1][i3][i4]*A[0][i1][i2];
				t11 += A[0][i1][i3]*A[0][i2][i4]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i4]*A[1][i3][i4]*A[1][i3][i4];
				t12 += A[0][i1][i3]*A[1][i2][i3]*A[0][i3][i4]*A[0][i1][i4]*A[0][i2][i3]*A[0][i1][i2]*A[2][i4][i4];
				t13 += A[0][i2][i3]*A[0][i1][i4]*A[0][i2][i4]*A[0][i3][i4]*A[0][i1][i3]*A[0][i1][i2]*A[3][i3][i4];
				t14 += A[0][i1][i3]*A[0][i3][i4]*A[0][i2][i4]*A[0][i2][i3]*A[2][i3][i4]*A[0][i1][i2]*A[1][i1][i4];
				t15 += A[0][i1][i3]*A[0][i3][i4]*A[0][i2][i4]*A[0][i2][i3]*A[1][i3][i4]*A[0][i1][i2]*A[2][i1][i4];
				t16 += A[0][i2][i3]*A[0][i3][i4]*A[0][i2][i4]*A[1][i1][i2]*A[1][i3][i4]*A[1][i3][i4];
				t17 += A[1][i2][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i1]*A[0][i2][i4]*A[0][i3][i4]*A[1][i4][i4]*A[0][i1][i3];
				t18 += A[0][i1][i3]*A[0][i3][i4]*A[1][i1][i3]*A[1][i2][i4]*A[1][i2][i4]*A[0][i1][i2];
				t19 += A[0][i1][i3]*A[0][i1][i4]*A[0][i2][i4]*A[1][i3][i3]*A[0][i2][i3]*A[0][i1][i2]*A[2][i4][i4];
				t20 += A[0][i1][i3]*A[1][i1][i3]*A[1][i2][i3]*A[0][i3][i4]*A[0][i2][i4]*A[0][i1][i2]*A[1][i4][i4];
				t21 += A[0][i1][i3]*A[1][i2][i4]*A[1][i2][i3]*A[0][i3][i4]*A[1][i1][i4]*A[0][i1][i2];
				t22 += A[0][i1][i3]*A[1][i4][i4]*A[1][i2][i3]*A[1][i2][i3]*A[0][i3][i4]*A[0][i1][i4]*A[0][i1][i2];
				t23 += A[0][i1][i3]*A[1][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i2][i4]*A[2][i1][i4];
				t24 += A[0][i1][i3]*A[0][i3][i4]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2]*A[2][i4][i4];
				t25 += A[0][i1][i3]*A[0][i3][i4]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2]*A[1][i3][i4]*A[1][i4][i4];
				t26 += A[0][i2][i3]*A[0][i3][i4]*A[1][i1][i2]*A[0][i1][i2]*A[0][i1][i4]*A[2][i3][i4];
				t27 += A[0][i2][i3]*A[0][i3][i4]*A[1][i1][i2]*A[0][i1][i2]*A[1][i3][i4]*A[1][i1][i4];
				t28 += A[0][i1][i3]*A[0][i2][i3]*A[1][i4][i4]*A[0][i3][i4]*A[0][i1][i4]*A[0][i1][i2]*A[2][i2][i3];
				t29 += A[0][i1][i3]*A[0][i2][i3]*A[1][i2][i4]*A[0][i3][i4]*A[0][i1][i2]*A[2][i1][i4];
				t30 += A[0][i1][i3]*A[1][i2][i3]*A[0][i2][i3]*A[1][i4][i4]*A[0][i1][i4]*A[0][i1][i2]*A[1][i3][i4];
				t31 += A[0][i1][i3]*A[1][i2][i3]*A[0][i3][i4]*A[1][i4][i4]*A[1][i1][i4]*A[0][i2][i3]*A[0][i1][i2];
				t32 += A[0][i1][i3]*A[0][i3][i4]*A[3][i1][i4]*A[0][i2][i4]*A[0][i2][i3]*A[0][i1][i2];
				t33 += A[0][i2][i4]*A[1][i1][i4]*A[1][i3][i3]*A[1][i4][i4]*A[0][i1][i3]*A[0][i2][i3]*A[0][i1][i2];
				t34 += A[0][i1][i3]*A[0][i2][i3]*A[1][i3][i4]*A[2][i1][i2]*A[0][i1][i2];
				t35 += A[1][i1][i2]*A[0][i2][i3]*A[1][i3][i4]*A[1][i1][i3]*A[0][i1][i2];
				t36 += A[1][i1][i2]*A[0][i2][i3]*A[1][i3][i3]*A[0][i3][i4]*A[0][i1][i4]*A[1][i4][i4]*A[0][i1][i2];
				t37 += A[1][i1][i2]*A[1][i3][i4]*A[1][i2][i3]*A[0][i2][i3];
				t38 += A[0][i1][i3]*A[1][i2][i2]*A[1][i3][i4]*A[1][i1][i1]*A[0][i2][i3]*A[0][i1][i2];
				t39 += A[1][i1][i4]*A[1][i1][i3]*A[0][i2][i4]*A[0][i3][i4]*A[0][i1][i4]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
				t40 += A[0][i2][i4]*A[1][i1][i4]*A[0][i1][i4]*A[1][i1][i1]*A[0][i3][i4]*A[0][i1][i3]*A[0][i2][i3]*A[0][i1][i2];
				t41 += A[0][i2][i3]*A[0][i1][i4]*A[0][i2][i4]*A[0][i3][i4]*A[0][i1][i3]*A[2][i1][i1]*A[0][i1][i2];
				t42 += A[0][i1][i4]*A[0][i3][i4]*A[0][i2][i3]*A[1][i1][i4]*A[1][i1][i2]*A[0][i1][i2]*A[0][i1][i3];
				t43 += A[0][i2][i4]*A[0][i3][i4]*A[1][i1][i4]*A[1][i1][i4]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
				t44 += A[1][i3][i4]*A[0][i2][i3]*A[0][i1][i4]*A[0][i1][i3]*A[0][i2][i4]*A[1][i1][i1]*A[0][i3][i4]*A[0][i1][i2];
				t45 += A[0][i1][i4]*A[0][i3][i4]*A[0][i2][i4]*A[1][i3][i4]*A[1][i1][i2]*A[0][i1][i2]*A[0][i1][i3];
				t46 += A[0][i2][i4]*A[1][i1][i4]*A[0][i1][i4]*A[1][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
				t47 += A[0][i2][i4]*A[1][i1][i4]*A[0][i1][i4]*A[1][i3][i4]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
				t48 += A[0][i2][i4]*A[0][i1][i4]*A[2][i1][i4]*A[0][i2][i3]*A[0][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
				t49 += A[0][i2][i3]*A[0][i3][i4]*A[1][i1][i2]*A[0][i1][i2]*A[1][i3][i4]*A[0][i1][i4];
				t50 += A[0][i2][i3]*A[0][i1][i3]*A[0][i3][i4]*A[0][i1][i4]*A[1][i2][i4]*A[1][i1][i1]*A[0][i1][i2];
				t51 += A[0][i2][i3]*A[0][i1][i3]*A[0][i2][i4]*A[1][i1][i4]*A[1][i1][i1]*A[0][i3][i4]*A[0][i1][i2];
				t52 += A[0][i2][i4]*A[0][i1][i4]*A[1][i2][i3]*A[1][i3][i4]*A[0][i1][i2]*A[0][i1][i3];
				t53 += A[0][i1][i4]*A[1][i4][i4]*A[0][i3][i4]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2]*A[0][i1][i3];
				t54 += A[0][i2][i4]*A[0][i1][i4]*A[2][i3][i4]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
				t55 += A[0][i2][i4]*A[0][i1][i4]*A[1][i2][i4]*A[1][i1][i3]*A[0][i1][i2];
				t56 += A[0][i2][i3]*A[0][i1][i3]*A[0][i2][i4]*A[1][i4][i4]*A[1][i1][i1]*A[0][i3][i4]*A[0][i1][i2];
				t57 += A[1][i3][i4]*A[0][i2][i3]*A[0][i1][i4]*A[0][i1][i3]*A[0][i2][i4]*A[0][i3][i4]*A[0][i1][i2];
				t58 += A[0][i2][i3]*A[0][i1][i3]*A[0][i2][i4]*A[1][i1][i4]*A[0][i3][i4]*A[0][i1][i2];
				t59 += A[0][i2][i3]*A[0][i1][i4]*A[0][i1][i2]*A[1][i1][i1]*A[0][i2][i4]*A[0][i3][i4]*A[0][i1][i3];
				t60 += A[0][i2][i3]*A[0][i1][i4]*A[0][i2][i4]*A[0][i3][i4]*A[0][i1][i3]*A[0][i1][i2];
			}
		}
	}
	s += t1 * ( 121 );
	s += t2 * ( 484 );
	s += t3 * ( 242 );
	s += t4 * ( 176 );
	s += t5 * ( 220 );
	s += t6 * ( 242 );
	s += t7 * ( 242 );
	s += t8 * ( 99 );
	s += t9 * ( 242 );
	s += t10 * ( 121 );
	s += t11 * ( 242 );
	s += t12 * ( 176 );
	s += t13 * ( 121 );
	s += t14 * ( 484 );
	s += t15 * ( 484 );
	s += t16 * ( 33 );
	s += t17 * ( 33 );
	s += t18 * ( 55 );
	s += t19 * ( 33 );
	s += t20 * ( 176 );
	s += t21 * ( 121 );
	s += t22 * ( 88 );
	s += t23 * ( 121 );
	s += t24 * ( 33 );
	s += t25 * ( 66 );
	s += t26 * ( 209 );
	s += t27 * ( 99 );
	s += t28 * ( 176 );
	s += t29 * ( 242 );
	s += t30 * ( 176 );
	s += t31 * ( 176 );
	s += t32 * ( 121 );
	s += t33 * ( 66 );
	s += t34 * ( 33 );
	s += t35 * ( 66 );
	s += t36 * ( 33 );
	s += t37 * ( 11 );
	s += t38 * ( 11 );
	s += t39 * ( -2288 );
	s += t40 * ( -968 );
	s += t41 * ( -484 );
	s += t42 * ( -2112 );
	s += t43 * ( -572 );
	s += t44 * ( -968 );
	s += t45 * ( -2112 );
	s += t46 * ( -1298 );
	s += t47 * ( -2288 );
	s += t48 * ( -1144 );
	s += t49 * ( -132 );
	s += t50 * ( -968 );
	s += t51 * ( -968 );
	s += t52 * ( -880 );
	s += t53 * ( -792 );
	s += t54 * ( -572 );
	s += t55 * ( -220 );
	s += t56 * ( -176 );
	s += t57 * ( 15796 );
	s += t58 * ( 8668 );
	s += t59 * ( 4004 );
	s += t60 * ( -16984 );

	/* THREE */
	t1 = t2 = t3 = t4 = t5 = t6 = t7 = t8 = t9 = t10 = t11 = t12 = t13 = t14 = t15 = t16 = t17 = t18 = t19 = t20 = t21 = t22 = t23 = t24 = t25 = t26 = t27 = t28 = t29 = t30 = t31 = t32 = t33 = t34 = t35 = t36 = t37 = t38 = t39 = t40 = t41 = t42 = t43 = t44 = t45 = t46 = t47 = t48 = t49 = t50 = t51 = t52 = t53 = t54 = t55 = t56 = t57 = t58 = t59 = t60 = t61 = t62 = t63 = t64 = t65 = t66 = t67 = t68 = t69 = t70 = t71 = t72 = t73 = t74 = t75 = t76 = t77 = t78 = t79 = t80 = t81 = t82 = t83 = t84 = t85 = t86 = t87 = t88 = t89 = t90 = t91 = t92 = t93 = t94 = t95 = t96 = t97 = t98 = t99 = t100 = t101 = t102 = t103 = t104 = t105 = t106 = t107 = t108 = t109 = t110 = t111 = t112 = t113 = t114 = t115 = t116 = t117 = t118 = t119 = t120 = t121 = 0;
	for ( i = myId; i < n * n; i += numOfProcs ) {
		i1 = i / n;
		i2 = i - i1 * n;

		for ( i3 = 0; i3 < n; i3 ++ ) {
			t1 += A[1][i2][i3]*A[1][i2][i3]*A[1][i2][i3]*A[0][i1][i3]*A[2][i1][i1]*A[0][i1][i2];
			t2 += A[1][i1][i2]*A[0][i1][i2]*A[1][i2][i3]*A[1][i2][i3]*A[1][i1][i3]*A[1][i1][i3];
			t3 += A[2][i1][i2]*A[1][i1][i2]*A[0][i1][i2]*A[2][i3][i3]*A[0][i2][i3]*A[0][i1][i3];
			t4 += A[1][i1][i2]*A[0][i1][i2]*A[1][i2][i3]*A[2][i2][i3]*A[0][i1][i3]*A[1][i1][i3];
			t5 += A[1][i1][i2]*A[0][i1][i2]*A[1][i2][i3]*A[1][i2][i3]*A[0][i1][i3]*A[2][i1][i3];
			t6 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[0][i1][i3]*A[0][i2][i3]*A[3][i3][i3];
			t7 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[0][i2][i3]*A[2][i3][i3]*A[1][i1][i3];
			t8 += A[1][i1][i2]*A[2][i1][i3]*A[0][i1][i2]*A[2][i2][i3]*A[0][i2][i3]*A[0][i1][i3];
			t9 += A[1][i1][i2]*A[3][i1][i3]*A[0][i1][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i2][i3];
			t10 += A[2][i1][i1]*A[2][i3][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i2];
			t11 += A[1][i1][i3]*A[1][i1][i1]*A[0][i2][i3]*A[1][i2][i3]*A[1][i2][i3]*A[1][i1][i2];
			t12 += A[1][i1][i1]*A[0][i2][i3]*A[1][i2][i3]*A[1][i1][i2]*A[0][i1][i2]*A[2][i3][i3];
			t13 += A[0][i1][i3]*A[1][i1][i1]*A[0][i1][i2]*A[2][i2][i3]*A[1][i2][i3]*A[1][i2][i3];
			t14 += A[1][i1][i3]*A[1][i1][i1]*A[0][i1][i2]*A[1][i2][i3]*A[1][i2][i3]*A[1][i2][i3];
			t15 += A[1][i1][i1]*A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[2][i2][i3]*A[2][i2][i3];
			t16 += A[2][i3][i3]*A[0][i1][i3]*A[1][i1][i1]*A[0][i1][i2]*A[0][i2][i3]*A[2][i2][i2];
			t17 += A[0][i2][i3]*A[0][i1][i3]*A[1][i2][i3]*A[1][i1][i1]*A[0][i1][i2]*A[3][i2][i3];
			t18 += A[1][i1][i1]*A[0][i2][i3]*A[1][i2][i3]*A[0][i1][i2]*A[1][i1][i3]*A[2][i2][i3];
			t19 += A[1][i1][i1]*A[0][i2][i3]*A[0][i1][i2]*A[2][i1][i3]*A[1][i2][i3]*A[1][i2][i3];
			t20 += A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[3][i1][i2]*A[2][i3][i3];
			t21 += A[2][i1][i3]*A[1][i2][i3]*A[1][i2][i3]*A[1][i1][i3]*A[0][i1][i2];
			t22 += A[1][i1][i3]*A[2][i2][i3]*A[2][i2][i3]*A[0][i1][i3]*A[0][i1][i2];
			t23 += A[3][i3][i3]*A[2][i1][i2]*A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2];
			t24 += A[2][i1][i2]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i3]*A[2][i3][i3];
			t25 += A[1][i1][i3]*A[0][i1][i3]*A[0][i1][i2]*A[3][i2][i3]*A[1][i2][i3];
			t26 += A[0][i1][i3]*A[0][i1][i2]*A[1][i2][i3]*A[2][i1][i3]*A[2][i2][i3];
			t27 += A[0][i1][i3]*A[0][i1][i2]*A[1][i2][i3]*A[1][i2][i3]*A[3][i1][i3];
			t28 += A[0][i1][i2]*A[1][i1][i3]*A[2][i3][i3]*A[1][i2][i3]*A[1][i1][i2];
			t29 += A[1][i1][i2]*A[0][i1][i2]*A[4][i3][i3]*A[0][i1][i3]*A[0][i2][i3];
			t30 += A[1][i1][i3]*A[3][i3][i3]*A[0][i1][i2]*A[1][i1][i2]*A[0][i2][i3];
			t31 += A[2][i3][i3]*A[2][i1][i3]*A[0][i1][i2]*A[1][i1][i2]*A[0][i2][i3];
			t32 += A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[2][i2][i3]*A[3][i1][i3];
			t33 += A[0][i2][i3]*A[0][i1][i3]*A[4][i1][i3]*A[0][i1][i2]*A[1][i2][i3];
			t34 += A[2][i3][i3]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[0][i2][i3];
			t35 += A[2][i3][i3]*A[1][i1][i2]*A[1][i2][i3]*A[1][i2][i3];
			t36 += A[0][i2][i3]*A[1][i2][i3]*A[3][i3][i3]*A[1][i1][i2];
			t37 += A[0][i2][i3]*A[2][i3][i3]*A[2][i2][i3]*A[1][i1][i2];
			t38 += A[1][i1][i2]*A[0][i1][i2]*A[1][i3][i3]*A[1][i1][i1]*A[1][i2][i3]*A[1][i2][i3];
			t39 += A[0][i2][i3]*A[3][i3][i3]*A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i1];
			t40 += A[0][i2][i3]*A[0][i1][i2]*A[2][i3][i3]*A[1][i1][i1]*A[2][i1][i2];
			t41 += A[0][i2][i3]*A[1][i2][i3]*A[0][i1][i2]*A[1][i3][i3]*A[1][i1][i1]*A[2][i1][i2];
			t42 += A[0][i1][i2]*A[1][i3][i3]*A[2][i2][i2]*A[1][i1][i3]*A[0][i2][i3]*A[1][i1][i1];
			t43 += A[0][i1][i2]*A[3][i3][i3]*A[0][i1][i3]*A[1][i2][i2]*A[0][i2][i3]*A[1][i1][i1];
			t44 += A[0][i1][i2]*A[1][i2][i2]*A[0][i2][i3]*A[1][i1][i1]*A[1][i1][i3]*A[2][i3][i3];
			t45 += A[1][i3][i3]*A[0][i2][i3]*A[1][i1][i3]*A[0][i1][i2]*A[3][i1][i2];
			t46 += A[0][i2][i3]*A[0][i1][i3]*A[1][i3][i3]*A[0][i1][i2]*A[4][i1][i2];
			t47 += A[2][i1][i2]*A[1][i3][i3]*A[1][i1][i3]*A[0][i1][i2]*A[1][i2][i3];
			t48 += A[2][i1][i2]*A[0][i2][i3]*A[0][i1][i2]*A[2][i1][i3]*A[1][i3][i3];
			t49 += A[0][i1][i2]*A[2][i1][i3]*A[1][i3][i3]*A[1][i2][i3]*A[1][i1][i2];
			t50 += A[0][i1][i2]*A[1][i3][i3]*A[3][i1][i3]*A[1][i1][i2]*A[0][i2][i3];
			t51 += A[1][i3][i3]*A[1][i1][i2]*A[1][i2][i3]*A[2][i2][i3];
			t52 += A[0][i1][i2]*A[1][i1][i1]*A[3][i1][i2]*A[1][i2][i3];
			t53 += A[0][i1][i2]*A[1][i3][i3]*A[1][i1][i3]*A[1][i2][i2]*A[1][i1][i1]*A[1][i2][i3];
			t54 += A[0][i1][i2]*A[1][i2][i2]*A[0][i2][i3]*A[1][i1][i1]*A[2][i1][i3]*A[1][i3][i3];
			t55 += A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[1][i1][i3]*A[1][i1][i3]*A[1][i1][i2]*A[1][i1][i2];
			t56 += A[1][i1][i3]*A[0][i1][i3]*A[1][i2][i3]*A[0][i2][i3]*A[0][i1][i2]*A[2][i3][i3];
			t57 += A[1][i1][i2]*A[0][i1][i2]*A[0][i2][i3]*A[1][i1][i3]*A[1][i1][i3]*A[1][i1][i3];
			t58 += A[1][i1][i1]*A[0][i2][i3]*A[1][i2][i3]*A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i3]*A[0][i1][i3];
			t59 += A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[1][i1][i3]*A[1][i1][i3]*A[2][i1][i2];
			t60 += A[2][i1][i1]*A[1][i2][i3]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3]*A[1][i1][i3];
			t61 += A[0][i1][i3]*A[1][i1][i3]*A[1][i1][i3]*A[1][i2][i3]*A[1][i1][i2]*A[0][i1][i2];
			t62 += A[1][i1][i3]*A[0][i1][i3]*A[2][i1][i3]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2];
			t63 += A[0][i2][i3]*A[1][i1][i2]*A[1][i2][i3]*A[1][i2][i3]*A[1][i2][i3];
			t64 += A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i3]*A[1][i2][i3]*A[1][i2][i3];
			t65 += A[0][i1][i2]*A[2][i3][i3]*A[1][i1][i2]*A[0][i2][i3]*A[1][i1][i3];
			t66 += A[0][i2][i3]*A[0][i1][i3]*A[1][i2][i3]*A[0][i1][i2]*A[3][i1][i1];
			t67 += A[0][i1][i3]*A[0][i1][i2]*A[2][i3][i3]*A[1][i1][i2]*A[1][i1][i2];
			t68 += A[0][i1][i3]*A[1][i3][i3]*A[1][i1][i3]*A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
			t69 += A[2][i1][i1]*A[1][i1][i1]*A[0][i1][i3]*A[0][i1][i2]*A[1][i2][i3]*A[0][i2][i3];
			t70 += A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i1]*A[0][i2][i3]*A[1][i1][i3]*A[1][i1][i3];
			t71 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[1][i3][i3]*A[0][i2][i3]*A[0][i1][i3];
			t72 += A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i1]*A[0][i2][i3]*A[0][i1][i3]*A[2][i1][i3];
			t73 += A[2][i1][i1]*A[0][i1][i2]*A[0][i1][i3]*A[1][i2][i3]*A[1][i2][i3];
			t74 += A[1][i1][i2]*A[0][i1][i3]*A[0][i2][i3]*A[1][i3][i3]*A[0][i1][i2]*A[2][i1][i1];
			t75 += A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[2][i2][i3]*A[2][i1][i1];
			t76 += A[0][i1][i3]*A[1][i2][i3]*A[1][i2][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
			t77 += A[0][i2][i3]*A[1][i1][i3]*A[1][i1][i3]*A[1][i1][i1]*A[1][i2][i3]*A[0][i1][i2];
			t78 += A[0][i1][i3]*A[1][i1][i1]*A[1][i1][i3]*A[1][i2][i3]*A[1][i2][i3]*A[0][i1][i2];
			t79 += A[0][i2][i3]*A[0][i1][i3]*A[2][i1][i3]*A[2][i1][i2]*A[0][i1][i2];
			t80 += A[2][i3][i3]*A[1][i1][i2]*A[0][i2][i3]*A[0][i1][i3]*A[1][i1][i1]*A[0][i1][i2];
			t81 += A[2][i2][i3]*A[0][i2][i3]*A[0][i1][i3]*A[1][i1][i1]*A[1][i1][i3]*A[0][i1][i2];
			t82 += A[0][i2][i3]*A[2][i1][i3]*A[1][i2][i3]*A[0][i1][i3]*A[1][i1][i1]*A[0][i1][i2];
			t83 += A[1][i1][i2]*A[1][i1][i3]*A[2][i2][i3]*A[0][i1][i3]*A[0][i1][i2];
			t84 += A[1][i1][i2]*A[1][i2][i3]*A[0][i1][i3]*A[2][i1][i3]*A[0][i1][i2];
			t85 += A[1][i1][i2]*A[3][i1][i3]*A[0][i1][i3]*A[0][i2][i3]*A[0][i1][i2];
			t86 += A[0][i1][i3]*A[1][i2][i3]*A[1][i1][i2]*A[1][i1][i2]*A[1][i3][i3];
			t87 += A[1][i3][i3]*A[1][i1][i2]*A[1][i2][i3]*A[1][i1][i3]*A[0][i1][i2];
			t88 += A[2][i1][i3]*A[1][i3][i3]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2];
			t89 += A[2][i1][i2]*A[1][i1][i2]*A[1][i1][i3]*A[0][i1][i2];
			t90 += A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2]*A[2][i2][i3]*A[1][i1][i1]*A[1][i1][i1];
			t91 += A[1][i1][i3]*A[1][i2][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
			t92 += A[1][i1][i1]*A[0][i2][i3]*A[0][i1][i3]*A[2][i1][i2]*A[1][i3][i3]*A[0][i1][i2];
			t93 += A[2][i2][i3]*A[1][i2][i3]*A[0][i1][i3]*A[1][i1][i1]*A[0][i1][i2];
			t94 += A[1][i1][i2]*A[1][i2][i3]*A[1][i1][i1]*A[0][i1][i3]*A[1][i3][i3]*A[0][i1][i2];
			t95 += A[0][i2][i3]*A[1][i1][i2]*A[1][i1][i3]*A[1][i3][i3]*A[1][i1][i1]*A[0][i1][i2];
			t96 += A[0][i2][i3]*A[3][i2][i3]*A[0][i1][i3]*A[1][i1][i1]*A[0][i1][i2];
			t97 += A[1][i1][i2]*A[2][i2][i3]*A[1][i1][i1]*A[0][i1][i2];
			t98 += A[1][i1][i2]*A[1][i2][i3]*A[2][i2][i2];
			t99 += A[2][i3][i3]*A[0][i1][i3]*A[1][i1][i1]*A[1][i1][i2];
			t100 += A[0][i1][i3]*A[1][i3][i3]*A[1][i1][i3]*A[1][i1][i1]*A[1][i1][i2];
			t101 += A[0][i2][i3]*A[1][i2][i3]*A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i3][i3];
			t102 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i2][i3]*A[1][i1][i2];
			t103 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i2][i2]*A[0][i2][i3]*A[0][i1][i3]*A[1][i3][i3];
			t104 += A[1][i1][i3]*A[0][i1][i3]*A[1][i2][i3]*A[0][i2][i3]*A[1][i1][i2]*A[0][i1][i2];
			t105 += A[1][i2][i3]*A[1][i1][i2]*A[1][i1][i2]*A[0][i2][i3]*A[0][i1][i2]*A[0][i1][i3];
			t106 += A[1][i1][i2]*A[1][i2][i3]*A[1][i1][i3]*A[0][i1][i3]*A[0][i1][i2];
			t107 += A[1][i1][i3]*A[0][i2][i3]*A[1][i2][i2]*A[1][i1][i2]*A[0][i1][i2]*A[0][i1][i3];
			t108 += A[0][i1][i3]*A[1][i2][i3]*A[1][i2][i3]*A[0][i2][i3]*A[0][i1][i2]*A[1][i1][i1];
			t109 += A[0][i1][i3]*A[1][i2][i3]*A[1][i2][i3]*A[1][i1][i3]*A[0][i1][i2];
			t110 += A[2][i3][i3]*A[1][i1][i2]*A[0][i2][i3]*A[0][i1][i3]*A[0][i1][i2];
			t111 += A[0][i2][i3]*A[2][i1][i3]*A[1][i2][i3]*A[0][i1][i3]*A[0][i1][i2];
			t112 += A[1][i1][i2]*A[0][i1][i2]*A[0][i2][i3]*A[1][i1][i3]*A[1][i1][i1]*A[0][i1][i3];
			t113 += A[0][i1][i3]*A[1][i1][i3]*A[1][i1][i3]*A[1][i1][i2];
			t114 += A[0][i2][i3]*A[0][i1][i3]*A[1][i1][i3]*A[1][i1][i1]*A[1][i2][i2]*A[0][i1][i2];
			t115 += A[0][i2][i3]*A[0][i1][i3]*A[1][i3][i3]*A[0][i1][i2]*A[2][i1][i2];
			t116 += A[1][i1][i2]*A[0][i1][i2]*A[0][i2][i3]*A[1][i1][i3]*A[1][i3][i3];
			t117 += A[0][i2][i3]*A[0][i1][i3]*A[1][i2][i3]*A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
			t118 += A[1][i1][i2]*A[0][i1][i2]*A[1][i2][i3]*A[1][i1][i1];
			t119 += A[0][i1][i2]*A[1][i2][i2]*A[0][i2][i3]*A[0][i1][i3]*A[1][i3][i3]*A[1][i1][i1];
			t120 += A[0][i2][i3]*A[0][i1][i3]*A[1][i1][i3]*A[1][i1][i2]*A[0][i1][i2];
			t121 += A[0][i2][i3]*A[0][i1][i3]*A[1][i2][i3]*A[1][i1][i1]*A[0][i1][i2];
		}
	}
	s += t1 * ( -11 );
	s += t2 * ( -44 );
	s += t3 * ( -66 );
	s += t4 * ( -176 );
	s += t5 * ( -176 );
	s += t6 * ( -33 );
	s += t7 * ( -66 );
	s += t8 * ( -176 );
	s += t9 * ( -176 );
	s += t10 * ( -22 );
	s += t11 * ( -33 );
	s += t12 * ( -44 );
	s += t13 * ( -33 );
	s += t14 * ( -22 );
	s += t15 * ( -33 );
	s += t16 * ( -11 );
	s += t17 * ( -66 );
	s += t18 * ( -132 );
	s += t19 * ( -66 );
	s += t20 * ( -33 );
	s += t21 * ( -88 );
	s += t22 * ( -88 );
	s += t23 * ( -33 );
	s += t24 * ( -66 );
	s += t25 * ( -176 );
	s += t26 * ( -176 );
	s += t27 * ( -88 );
	s += t28 * ( -33 );
	s += t29 * ( -33 );
	s += t30 * ( -66 );
	s += t31 * ( -66 );
	s += t32 * ( -176 );
	s += t33 * ( -176 );
	s += t34 * ( -11 );
	s += t35 * ( -11 );
	s += t36 * ( -22 );
	s += t37 * ( -22 );
	s += t38 * ( -22 );
	s += t39 * ( -22 );
	s += t40 * ( -22 );
	s += t41 * ( -44 );
	s += t42 * ( -11 );
	s += t43 * ( -11 );
	s += t44 * ( -22 );
	s += t45 * ( -66 );
	s += t46 * ( -33 );
	s += t47 * ( -33 );
	s += t48 * ( -66 );
	s += t49 * ( -66 );
	s += t50 * ( -66 );
	s += t51 * ( -22 );
	s += t52 * ( -22 );
	s += t53 * ( -11 );
	s += t54 * ( -11 );
	s += t55 * ( 396 );
	s += t56 * ( 352 );
	s += t57 * ( 264 );
	s += t58 * ( 704 );
	s += t59 * ( 792 );
	s += t60 * ( 704 );
	s += t61 * ( 792 );
	s += t62 * ( 1584 );
	s += t63 * ( 88 );
	s += t64 * ( 110 );
	s += t65 * ( 88 );
	s += t66 * ( 220 );
	s += t67 * ( 132 );
	s += t68 * ( 264 );
	s += t69 * ( 132 );
	s += t70 * ( 352 );
	s += t71 * ( 264 );
	s += t72 * ( 704 );
	s += t73 * ( 132 );
	s += t74 * ( 264 );
	s += t75 * ( 176 );
	s += t76 * ( 66 );
	s += t77 * ( 352 );
	s += t78 * ( 352 );
	s += t79 * ( 396 );
	s += t80 * ( 264 );
	s += t81 * ( 704 );
	s += t82 * ( 704 );
	s += t83 * ( 396 );
	s += t84 * ( 1012 );
	s += t85 * ( 792 );
	s += t86 * ( 88 );
	s += t87 * ( 44 );
	s += t88 * ( 88 );
	s += t89 * ( 264 );
	s += t90 * ( 66 );
	s += t91 * ( 132 );
	s += t92 * ( 264 );
	s += t93 * ( 220 );
	s += t94 * ( 264 );
	s += t95 * ( 264 );
	s += t96 * ( 176 );
	s += t97 * ( 22 );
	s += t98 * ( 22 );
	s += t99 * ( 44 );
	s += t100 * ( 88 );
	s += t101 * ( 44 );
	s += t102 * ( 44 );
	s += t103 * ( 22 );
	s += t104 * ( -3872 );
	s += t105 * ( -4752 );
	s += t106 * ( -1056 );
	s += t107 * ( -3168 );
	s += t108 * ( -2090 );
	s += t109 * ( -5016 );
	s += t110 * ( -1837 );
	s += t111 * ( -10208 );
	s += t112 * ( -3564 );
	s += t113 * ( -352 );
	s += t114 * ( -1760 );
	s += t115 * ( -1694 );
	s += t116 * ( -3124 );
	s += t117 * ( -880 );
	s += t118 * ( -792 );
	s += t119 * ( -198 );
	s += t120 * ( 33792 );
	s += t121 * ( 12936 );

	/* TWO */
	t1 = t2 = t3 = t4 = t5 = t6 = t7 = t8 = t9 = t10 = t11 = t12 = t13 = t14 = t15 = t16 = t17 = t18 = t19 = t20 = t21 = t22 = t23 = t24 = t25 = t26 = t27 = t28 = t29 = t30 = t31 = t32 = t33 = t34 = t35 = t36 = t37 = t38 = t39 = t40 = t41 = t42 = t43 = t44 = t45 = t46 = t47 = t48 = t49 = t50 = t51 = t52 = t53 = t54 = t55 = t56 = t57 = t58 = t59 = t60 = t61 = t62 = t63 = t64 = t65 = t66 = t67 = t68 = t69 = t70 = t71 = t72 = t73 = t74 = t75 = t76 = t77 = t78 = t79 = t80 = t81 = t82 = t83 = t84 = t85 = t86 = t87 = t88 = t89 = t90 = t91 = t92 = t93 = t94 = t95 = t96 = t97 = t98 = t99 = t100 = t101 = t102 = t103 = t104 = t105 = t106 = t107 = t108 = t109 = t110 = t111 = t112 = t113 = t114 = t115 = t116 = t117 = t118 = t119 = 0;
	for ( i = myId; i < n * n; i += numOfProcs ) {
		i1 = i / n;
		i2 = i - i1 * n;

		t1 += A[2][i1][i2]*A[2][i1][i2]*A[2][i1][i2]*A[1][i1][i2];
		t2 += A[1][i1][i2]*A[3][i2][i2]*A[3][i1][i1]*A[0][i1][i2];
		t3 += A[3][i1][i2]*A[2][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t4 += A[4][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t5 += A[3][i1][i2]*A[2][i1][i2]*A[2][i1][i2]*A[0][i1][i2];
		t6 += A[3][i2][i2]*A[1][i1][i2]*A[1][i1][i2]*A[2][i1][i1];
		t7 += A[1][i1][i2]*A[2][i1][i1]*A[2][i1][i2]*A[2][i2][i2];
		t8 += A[2][i1][i1]*A[0][i1][i2]*A[1][i1][i2]*A[4][i2][i2];
		t9 += A[2][i1][i1]*A[0][i1][i2]*A[2][i1][i2]*A[3][i2][i2];
		t10 += A[2][i1][i1]*A[0][i1][i2]*A[3][i1][i2]*A[2][i2][i2];
		t11 += A[3][i1][i2]*A[3][i1][i2]*A[1][i1][i2]*A[0][i1][i2];
		t12 += A[1][i1][i2]*A[4][i1][i2]*A[2][i1][i2]*A[0][i1][i2];
		t13 += A[5][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[0][i1][i2];
		t14 += A[3][i1][i1]*A[0][i1][i2]*A[4][i2][i2];
		t15 += A[5][i2][i2]*A[2][i1][i1]*A[0][i1][i2];
		t16 += A[2][i1][i2]*A[2][i1][i2]*A[1][i1][i1]*A[2][i2][i2];
		t17 += A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[4][i2][i2];
		t18 += A[1][i1][i1]*A[1][i1][i2]*A[2][i1][i2]*A[3][i2][i2];
		t19 += A[1][i1][i1]*A[1][i1][i2]*A[3][i1][i2]*A[2][i2][i2];
		t20 += A[1][i1][i1]*A[1][i1][i2]*A[5][i2][i2]*A[0][i1][i2];
		t21 += A[0][i1][i2]*A[1][i1][i1]*A[2][i1][i2]*A[4][i2][i2];
		t22 += A[0][i1][i2]*A[1][i1][i1]*A[3][i1][i2]*A[3][i2][i2];
		t23 += A[0][i1][i2]*A[1][i1][i1]*A[4][i1][i2]*A[2][i2][i2];
		t24 += A[4][i1][i2]*A[3][i1][i2]*A[0][i1][i2];
		t25 += A[2][i1][i2]*A[5][i1][i2]*A[0][i1][i2];
		t26 += A[1][i1][i2]*A[6][i1][i2]*A[0][i1][i2];
		t27 += A[3][i1][i2]*A[1][i2][i2]*A[1][i1][i1]*A[2][i1][i2];
		t28 += A[4][i1][i2]*A[1][i2][i2]*A[1][i1][i1]*A[1][i1][i2];
		t29 += A[1][i1][i2]*A[6][i2][i2];
		t30 += A[1][i2][i2]*A[5][i1][i2]*A[1][i1][i1]*A[0][i1][i2];
		t31 += A[2][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t32 += A[3][i1][i1]*A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t33 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[2][i1][i2]*A[2][i1][i1];
		t34 += A[2][i1][i1]*A[2][i1][i1]*A[2][i2][i2]*A[0][i1][i2];
		t35 += A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i1]*A[2][i2][i2]*A[2][i2][i2];
		t36 += A[2][i1][i2]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t37 += A[2][i1][i2]*A[0][i1][i2]*A[3][i1][i1]*A[1][i1][i2];
		t38 += A[0][i1][i2]*A[4][i1][i1]*A[1][i1][i2]*A[1][i1][i2];
		t39 += A[1][i1][i1]*A[1][i1][i2]*A[2][i2][i2]*A[0][i1][i2]*A[2][i1][i1];
		t40 += A[1][i1][i2]*A[0][i1][i2]*A[1][i1][i1]*A[2][i1][i2]*A[2][i1][i2];
		t41 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[3][i1][i2];
		t42 += A[0][i1][i2]*A[2][i1][i1]*A[2][i1][i2]*A[2][i1][i2];
		t43 += A[0][i1][i2]*A[3][i1][i2]*A[2][i1][i1]*A[1][i1][i2];
		t44 += A[1][i1][i2]*A[3][i2][i2]*A[2][i1][i1];
		t45 += A[3][i2][i2]*A[2][i2][i2]*A[1][i1][i2];
		t46 += A[3][i1][i2]*A[1][i1][i2]*A[2][i1][i2];
		t47 += A[4][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t48 += A[0][i1][i2]*A[5][i1][i2]*A[1][i1][i2];
		t49 += A[0][i1][i2]*A[1][i1][i1]*A[2][i2][i2]*A[3][i1][i1];
		t50 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[1][i2][i2]*A[3][i1][i1];
		t51 += A[1][i2][i2]*A[1][i1][i1]*A[2][i1][i1]*A[1][i1][i2]*A[1][i1][i2];
		t52 += A[3][i2][i2]*A[0][i1][i2]*A[1][i1][i1]*A[2][i1][i1];
		t53 += A[0][i1][i2]*A[1][i1][i1]*A[2][i1][i1]*A[2][i1][i2]*A[1][i2][i2];
		t54 += A[2][i2][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
		t55 += A[1][i1][i2]*A[3][i2][i2]*A[1][i1][i1]*A[1][i1][i1]*A[0][i1][i2];
		t56 += A[2][i1][i2]*A[2][i2][i2]*A[1][i1][i1]*A[1][i1][i1]*A[0][i1][i2];
		t57 += A[2][i1][i2]*A[1][i1][i1]*A[0][i1][i2]*A[3][i1][i2];
		t58 += A[0][i1][i2]*A[1][i1][i1]*A[4][i1][i2]*A[1][i1][i2];
		t59 += A[4][i2][i2]*A[2][i1][i2];
		t60 += A[1][i1][i2]*A[1][i1][i1]*A[4][i1][i1];
		t61 += A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i2]*A[1][i2][i2]*A[2][i1][i2];
		t62 += A[4][i2][i2]*A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
		t63 += A[0][i1][i2]*A[3][i1][i2]*A[1][i2][i2]*A[1][i1][i1]*A[1][i1][i1];
		t64 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t65 += A[0][i1][i2]*A[2][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t66 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[3][i1][i1];
		t67 += A[2][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t68 += A[0][i1][i2]*A[1][i1][i1]*A[1][i2][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t69 += A[2][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t70 += A[2][i1][i2]*A[1][i1][i2]*A[0][i1][i2]*A[2][i1][i1];
		t71 += A[0][i1][i2]*A[1][i1][i2]*A[2][i2][i2]*A[2][i1][i1];
		t72 += A[1][i1][i2]*A[2][i1][i2]*A[2][i1][i2]*A[0][i1][i2];
		t73 += A[1][i1][i2]*A[1][i1][i2]*A[3][i1][i2]*A[0][i1][i2];
		t74 += A[2][i2][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[0][i1][i2];
		t75 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
		t76 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[2][i1][i1];
		t77 += A[1][i1][i2]*A[2][i1][i2]*A[2][i1][i2];
		t78 += A[3][i2][i2]*A[0][i1][i2]*A[2][i1][i1];
		t79 += A[1][i1][i2]*A[1][i1][i2]*A[2][i1][i2]*A[1][i1][i1];
		t80 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[3][i1][i2];
		t81 += A[2][i1][i2]*A[1][i1][i2]*A[1][i2][i2]*A[1][i1][i1]*A[0][i1][i2];
		t82 += A[2][i2][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i1];
		t83 += A[3][i2][i2]*A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i2];
		t84 += A[2][i1][i2]*A[2][i2][i2]*A[0][i1][i2]*A[1][i1][i1];
		t85 += A[3][i1][i2]*A[2][i1][i2]*A[0][i1][i2];
		t86 += A[0][i1][i2]*A[1][i1][i2]*A[4][i1][i2];
		t87 += A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i2]*A[2][i1][i2]*A[0][i1][i2];
		t88 += A[3][i1][i2]*A[2][i2][i2];
		t89 += A[2][i1][i2]*A[1][i1][i1]*A[2][i1][i1];
		t90 += A[2][i2][i2]*A[1][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
		t91 += A[0][i1][i2]*A[2][i2][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i2][i2];
		t92 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i2][i2]*A[1][i2][i2]*A[1][i1][i2];
		t93 += A[2][i1][i2]*A[1][i1][i2]*A[1][i2][i2]*A[1][i1][i1];
		t94 += A[1][i1][i2]*A[4][i2][i2];
		t95 += A[0][i1][i2]*A[3][i1][i2]*A[1][i1][i1]*A[1][i2][i2];
		t96 += A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i2]*A[2][i1][i1];
		t97 += A[0][i1][i2]*A[2][i2][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t98 += A[0][i1][i2]*A[1][i1][i2]*A[1][i2][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t99 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t100 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[2][i1][i2];
		t101 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i1];
		t102 += A[0][i1][i2]*A[2][i1][i1]*A[1][i1][i2]*A[1][i1][i2];
		t103 += A[0][i1][i2]*A[2][i1][i1]*A[2][i2][i2];
		t104 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2]*A[1][i2][i2];
		t105 += A[1][i1][i2]*A[1][i1][i1]*A[2][i2][i2]*A[0][i1][i2];
		t106 += A[1][i1][i2]*A[1][i1][i2]*A[2][i1][i2];
		t107 += A[3][i1][i2]*A[1][i1][i2]*A[0][i1][i2];
		t108 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[1][i1][i1];
		t109 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[2][i1][i2];
		t110 += A[2][i1][i2]*A[2][i2][i2];
		t111 += A[1][i1][i2]*A[1][i1][i1]*A[2][i1][i1];
		t112 += A[0][i1][i2]*A[2][i2][i2]*A[1][i1][i1]*A[1][i1][i1];
		t113 += A[0][i1][i2]*A[1][i2][i2]*A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i2];
		t114 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
		t115 += A[0][i1][i2]*A[1][i1][i1]*A[1][i1][i2]*A[1][i1][i2];
		t116 += A[2][i1][i2]*A[1][i1][i2]*A[0][i1][i2];
		t117 += A[2][i2][i2]*A[1][i1][i2];
		t118 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i1]*A[1][i2][i2];
		t119 += A[0][i1][i2]*A[1][i1][i2]*A[1][i1][i2];
	}
	s += t1 * ( 11 );
	s += t2 * ( 11 );
	s += t3 * ( 33 );
	s += t4 * ( 11 );
	s += t5 * ( 33 );
	s += t6 * ( 11 );
	s += t7 * ( 11 );
	s += t8 * ( 22 );
	s += t9 * ( 22 );
	s += t10 * ( 11 );
	s += t11 * ( 33 );
	s += t12 * ( 66 );
	s += t13 * ( 33 );
	s += t14 * ( 11 );
	s += t15 * ( 11 );
	s += t16 * ( 11 );
	s += t17 * ( 11 );
	s += t18 * ( 22 );
	s += t19 * ( 22 );
	s += t20 * ( 22 );
	s += t21 * ( 22 );
	s += t22 * ( 22 );
	s += t23 * ( 22 );
	s += t24 * ( 33 );
	s += t25 * ( 33 );
	s += t26 * ( 33 );
	s += t27 * ( 11 );
	s += t28 * ( 11 );
	s += t29 * ( 11 );
	s += t30 * ( 11 );
	s += t31 * ( -22 );
	s += t32 * ( -88 );
	s += t33 * ( -264 );
	s += t34 * ( -22 );
	s += t35 * ( -44 );
	s += t36 * ( -88 );
	s += t37 * ( -264 );
	s += t38 * ( -132 );
	s += t39 * ( -88 );
	s += t40 * ( -264 );
	s += t41 * ( -264 );
	s += t42 * ( -132 );
	s += t43 * ( -264 );
	s += t44 * ( -11 );
	s += t45 * ( -44 );
	s += t46 * ( -44 );
	s += t47 * ( -44 );
	s += t48 * ( -44 );
	s += t49 * ( -44 );
	s += t50 * ( -88 );
	s += t51 * ( -44 );
	s += t52 * ( -44 );
	s += t53 * ( -88 );
	s += t54 * ( -22 );
	s += t55 * ( -44 );
	s += t56 * ( -44 );
	s += t57 * ( -264 );
	s += t58 * ( -264 );
	s += t59 * ( -11 );
	s += t60 * ( -44 );
	s += t61 * ( -44 );
	s += t62 * ( -22 );
	s += t63 * ( -44 );
	s += t64 * ( 44 );
	s += t65 * ( 440 );
	s += t66 * ( 352 );
	s += t67 * ( 363 );
	s += t68 * ( 176 );
	s += t69 * ( 176 );
	s += t70 * ( 352 );
	s += t71 * ( 462 );
	s += t72 * ( 1298 );
	s += t73 * ( 1298 );
	s += t74 * ( 528 );
	s += t75 * ( 396 );
	s += t76 * ( 1188 );
	s += t77 * ( 55 );
	s += t78 * ( 297 );
	s += t79 * ( 352 );
	s += t80 * ( 352 );
	s += t81 * ( 528 );
	s += t82 * ( 297 );
	s += t83 * ( 792 );
	s += t84 * ( 792 );
	s += t85 * ( 902 );
	s += t86 * ( 847 );
	s += t87 * ( 1188 );
	s += t88 * ( 11 );
	s += t89 * ( 44 );
	s += t90 * ( 22 );
	s += t91 * ( 88 );
	s += t92 * ( 44 );
	s += t93 * ( 231 );
	s += t94 * ( 231 );
	s += t95 * ( 330 );
	s += t96 * ( 198 );
	s += t97 * ( 66 );
	s += t98 * ( 132 );
	s += t99 * ( -616 );
	s += t100 * ( -1848 );
	s += t101 * ( -6468 );
	s += t102 * ( -7920 );
	s += t103 * ( -88 );
	s += t104 * ( -704 );
	s += t105 * ( -880 );
	s += t106 * ( -1364 );
	s += t107 * ( -1738 );
	s += t108 * ( -1584 );
	s += t109 * ( -12716 );
	s += t110 * ( -297 );
	s += t111 * ( -1914 );
	s += t112 * ( -792 );
	s += t113 * ( -2640 );
	s += t114 * ( 19712 );
	s += t115 * ( 25256 );
	s += t116 * ( 25432 );
	s += t117 * ( 5170 );
	s += t118 * ( 10692 );
	s += t119 * ( -68464 );

	/* ONE */
	t1 = t2 = t3 = t4 = t5 = t6 = t7 = t8 = t9 = t10 = t11 = t12 = t13 = t14 = t15 = t16 = t17 = t18 = t19 = t20 = t21 = t22 = t23 = t24 = t25 = t26 = t27 = t28 = t29 = t30 = t31 = t32 = 0;
	for ( i1 = myId; i1 < n; i1 += numOfProcs ) {
		t1 += A[10][i1][i1];
		t2 += A[4][i1][i1]*A[5][i1][i1];
		t3 += A[6][i1][i1]*A[3][i1][i1];
		t4 += A[7][i1][i1]*A[2][i1][i1];
		t5 += A[8][i1][i1]*A[1][i1][i1];
		t6 += A[3][i1][i1]*A[3][i1][i1]*A[2][i1][i1];
		t7 += A[4][i1][i1]*A[2][i1][i1]*A[2][i1][i1];
		t8 += A[3][i1][i1]*A[4][i1][i1]*A[1][i1][i1];
		t9 += A[5][i1][i1]*A[1][i1][i1]*A[2][i1][i1];
		t10 += A[8][i1][i1];
		t11 += A[6][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t12 += A[1][i1][i1]*A[2][i1][i1]*A[2][i1][i1]*A[2][i1][i1];
		t13 += A[3][i1][i1]*A[4][i1][i1];
		t14 += A[2][i1][i1]*A[5][i1][i1];
		t15 += A[3][i1][i1]*A[2][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t16 += A[6][i1][i1]*A[1][i1][i1];
		t17 += A[4][i1][i1]*A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t18 += A[2][i1][i1]*A[2][i1][i1]*A[2][i1][i1];
		t19 += A[2][i1][i1]*A[4][i1][i1];
		t20 += A[3][i1][i1]*A[1][i1][i1]*A[2][i1][i1];
		t21 += A[6][i1][i1];
		t22 += A[4][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t23 += A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i1]*A[2][i1][i1];
		t24 += A[1][i1][i1]*A[2][i1][i1]*A[2][i1][i1];
		t25 += A[3][i1][i1]*A[2][i1][i1];
		t26 += A[4][i1][i1]*A[1][i1][i1];
		t27 += A[1][i1][i1]*A[1][i1][i1]*A[1][i1][i1]*A[2][i1][i1];
		t28 += A[2][i1][i1]*A[2][i1][i1];
		t29 += A[4][i1][i1];
		t30 += A[2][i1][i1]*A[1][i1][i1]*A[1][i1][i1];
		t31 += A[2][i1][i1]*A[1][i1][i1];
		t32 += A[2][i1][i1];
	}
	s += t1 * ( 1 );
	s += t2 * ( -11 );
	s += t3 * ( -11 );
	s += t4 * ( -11 );
	s += t5 * ( -11 );
	s += t6 * ( 22 );
	s += t7 * ( 22 );
	s += t8 * ( 44 );
	s += t9 * ( 44 );
	s += t10 * ( 11 );
	s += t11 * ( 22 );
	s += t12 * ( -66 );
	s += t13 * ( -231 );
	s += t14 * ( -231 );
	s += t15 * ( -198 );
	s += t16 * ( -165 );
	s += t17 * ( -66 );
	s += t18 * ( 418 );
	s += t19 * ( 88 );
	s += t20 * ( 1914 );
	s += t21 * ( 110 );
	s += t22 * ( 660 );
	s += t23 * ( 264 );
	s += t24 * ( -792 );
	s += t25 * ( -5324 );
	s += t26 * ( -2541 );
	s += t27 * ( -3762 );
	s += t28 * ( 5060 );
	s += t29 * ( 1496 );
	s += t30 * ( 20614 );
	s += t31 * ( -58960 );
	s += t32 * ( 38016 );

	sumAndDiv ( s, 22 );
}
